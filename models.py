# models.py
# –Ø —Å–¥–µ–ª–∞–ª —Ç–∞–∫, —á—Ç–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ 
# –µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–¥–µ–ª–∞–ª —è —ç—Ç–æ 
# —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 
# –∏—Ö –≤ –±—É–¥—É—â–µ–º. –û–¥–Ω–∞–∫–æ —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª—å–∏–∑–≤–∞–Ω. –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ª–∏–±–æ 
# –µ–≥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–∏–±–æ —Å–¥–µ–ª–∞—Ç—å ondelete cascade –∏ –≤—ã—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö 
# –æ—Ç —Å—Ç–∞—Ä—ã—Ö "–æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö" –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ö—Ä–æ–º–µ —Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å 
# –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª—è—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, 
# –Ω–æ –∏ –æ—Ç—á–µ—Ç—ã –∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã.


from flask_sqlalchemy import SQLAlchemy
from flask_security import UserMixin, RoleMixin, current_user
from sqlalchemy.dialects.postgresql import ENUM
from sqlalchemy import Index, event, func, cast, Date
from utils.common import ensure_list
from datetime import datetime, timezone  # –î–æ–±–∞–≤–∏–º –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
import json
from logger import logger



db = SQLAlchemy()

 
# ‚úÖ –±—ã—Å—Ç—Ä–µ–µ üëâ üî• üìå ‚ùå üöÄ üòé üîÑ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ ‚ö†Ô∏è üíª üß† üí• üôå üóë ‚úèÔ∏è üîô üïò ‚ûï üì®

    
class DatabaseDuplicateError(Exception):
    pass    


# –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –æ—Ç—á–µ—Ç–∞–º–∏
key_word_report_link = db.Table(
    'key_word_report_link',
    db.Column('key_word_id', db.BigInteger, db.ForeignKey('key_words_group.id', ondelete="CASCADE"), primary_key=True),
    db.Column('report_id', db.BigInteger, db.ForeignKey('reports.id', ondelete="CASCADE"), primary_key=True),
    Index('ix_key_word_report_link_keyword_report', 'key_word_id', 'report_id')
)

# –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π
roles_users = db.Table(
    'roles_users',
    db.Column('user_id', db.BigInteger, db.ForeignKey('users.id', ondelete="CASCADE"), primary_key=True),
    db.Column('role_id', db.BigInteger, db.ForeignKey('roles.id', ondelete="CASCADE"), primary_key=True),
    Index('ix_roles_users_user_id_role_id', 'user_id', 'role_id')
)


# –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –≥—Ä—É–ø–ø–æ–π head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π   
head_sentence_group_link = db.Table(
    "head_sentence_group_link",
    db.Column("head_sentence_id", db.BigInteger, db.ForeignKey("head_sentences.id", ondelete="CASCADE"), primary_key=True),
    db.Column("group_id", db.BigInteger, db.ForeignKey("head_sentence_groups.id", ondelete="CASCADE"), primary_key=True),
    db.Column("sentence_index", db.Integer, nullable=False),  # –•—Ä–∞–Ω–∏–º –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Å–≤—è–∑–∏! –ù—É–∂–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–¥–æ–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ
    db.Index("ix_head_sentence_group", "head_sentence_id", "group_id")
)

# –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ body –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –≥—Ä—É–ø–ø–æ–π body –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
body_sentence_group_link = db.Table(
    "body_sentence_group_link",
    db.Column("body_sentence_id", db.BigInteger, db.ForeignKey("body_sentences.id", ondelete="CASCADE"), primary_key=True),
    db.Column("group_id", db.BigInteger, db.ForeignKey("body_sentence_groups.id", ondelete="CASCADE"), primary_key=True),
    db.Column("sentence_weight", db.Integer, nullable=False, server_default="1"),  # –•—Ä–∞–Ω–∏–º –≤–µ—Å –≤ —Å–≤—è–∑–∏!
    db.Index("ix_body_sentence_group", "body_sentence_id", "group_id")  
)

# –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –≥—Ä—É–ø–ø–æ–π tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
tail_sentence_group_link = db.Table(
    "tail_sentence_group_link",
    db.Column("tail_sentence_id", db.BigInteger, db.ForeignKey("tail_sentences.id", ondelete="CASCADE"), primary_key=True),
    db.Column("group_id", db.BigInteger, db.ForeignKey("tail_sentence_groups.id", ondelete="CASCADE"), primary_key=True),
    db.Column("sentence_weight", db.Integer, nullable=False, server_default="1"),  # –•—Ä–∞–Ω–∏–º –≤–µ—Å –≤ —Å–≤—è–∑–∏!
    db.Index("ix_tail_sentence_group", "tail_sentence_id", "group_id")  
)




class AppConfig(db.Model):
    __tablename__ = 'app_config'
    __table_args__ = (db.UniqueConstraint("profile_id", "config_key", name="uq_profile_config"),)
    
    id = db.Column(db.Integer, primary_key=True)
    profile_id = db.Column(db.BigInteger, db.ForeignKey('user_profiles.id', ondelete="CASCADE"), nullable=False) 
    config_key = db.Column(db.String(50), nullable=False)
    config_value = db.Column(db.String(200), nullable=False)
    config_type = db.Column(db.String(50), nullable=True)  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
    created_at = db.Column(db.DateTime, default=lambda: datetime.now(timezone.utc), nullable=False)  
    updated_at = db.Column(db.DateTime, default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc), nullable=False)  


    @staticmethod
    def get_setting(profile_id, key, default=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è."""
        try:
            config = AppConfig.query.filter_by(profile_id=profile_id, config_key=key).first()
            return config.config_value if config else default
        except Exception as e:
            return default
    

    @staticmethod
    def set_setting(profile_id, key, value):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∫–ª—é—á–∞.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω—É–∂–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.

        Args:
            profile_id (int): ID –ø—Ä–æ—Ñ–∏–ª—è.
            key (str): –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
            value (Any): –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞).
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        if isinstance(value, bool):
            config_type = "boolean"
            value = str(value).lower()  # True ‚Üí "true", False ‚Üí "false"
        elif isinstance(value, int):
            config_type = "integer"
            value = str(value)
        elif isinstance(value, float):
            config_type = "float"
            value = str(value)
        elif isinstance(value, (dict, list)):
            config_type = "json"
            value = json.dumps(value, ensure_ascii=False)  # –•—Ä–∞–Ω–∏–º JSON —Å—Ç—Ä–æ–∫–æ–π
        else:
            config_type = "string"
            value = str(value)

        try:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            config = AppConfig.query.filter_by(profile_id=profile_id, config_key=key).first()

            if config:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                config.config_value = value
                config.config_type = config_type
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                config = AppConfig(
                    profile_id=profile_id,
                    config_key=key,
                    config_value=value,
                    config_type=config_type
                )
                db.session.add(config)

            db.session.commit()
        except Exception as e:
            db.session.rollback()
            return False
        return True


class BaseModel(db.Model):
    __abstract__ = True
    id = db.Column(db.BigInteger, primary_key=True, autoincrement=True)

    def save(self):
        db.session.add(self)
        db.session.commit()

    def delete(self):
        db.session.delete(self)
        db.session.commit()
        
        
    def update(self, **kwargs):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.

        Args:
            **kwargs: –ü–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ, –≥–¥–µ –∫–ª—é—á ‚Äî —ç—Ç–æ –∏–º—è –ø–æ–ª—è –º–æ–¥–µ–ª–∏, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        
        Returns:
            bool: True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
        """
        logger.info(f"(–±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ update) üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {self.__class__.__name__}")
        allowed_columns = {column.name for column in self.__table__.columns}
        
        for key, value in kwargs.items():
            if key in allowed_columns:
                setattr(self, key, value)
            else:
                logger.warning(f"(–±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ update) ‚ùå –ü–æ–ª–µ '{key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ {self.__class__.__name__} –∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ")

        try:
            db.session.commit()
            logger.info(f"(–±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ update) ‚úÖ –û–±—ä–µ–∫—Ç {self.__class__.__name__} ID={self.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
            return 
        except Exception as e:
            db.session.rollback()
            logger.error(f"(–±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ update) ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {self.__class__.__name__} ID={self.id}: {e}")
            raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {self.__class__.__name__} ID={self.id}: {e}")
        

    @classmethod
    def delete_by_id(cls, object_id):
        obj = cls.query.get(object_id)
        if obj:
            obj.delete()
            return True
        return False


    @classmethod
    def get_by_id(cls, object_id):
        return cls.query.get(object_id)
    
    
class Role(db.Model, RoleMixin):
    __tablename__ = 'roles'
    id = db.Column(db.BigInteger, primary_key=True)
    name = db.Column(db.String(80), unique=True, nullable=False)  
    description = db.Column(db.String(255), nullable=True) 
    rank = db.Column(db.Integer, nullable=False)  


class User(BaseModel, db.Model, UserMixin):
    __tablename__ = 'users'
    id = db.Column(db.BigInteger, primary_key=True)
    username = db.Column(db.String(80), nullable=True, default='User')
    password = db.Column(db.String, nullable=False)
    user_bio = db.Column(db.Text, nullable=True)
    user_avatar = db.Column(db.LargeBinary, nullable=True)
    active = db.Column(db.Boolean, default=True, nullable=False)
    fs_uniquifier = db.Column(db.String(255), unique=True, nullable=False)
    email = db.Column(db.String, unique=True, nullable=False)
    confirmed_at = db.Column(db.DateTime, nullable=True) 
    last_login_at = db.Column(db.DateTime, nullable=True) 
    current_login_at = db.Column(db.DateTime, nullable=True) 
    last_login_ip = db.Column(db.String(45), nullable=True) 
    current_login_ip = db.Column(db.String(45), nullable=True)  
    login_count = db.Column(db.Integer, default=0, nullable=False)  # –°—á–µ—Ç—á–∏–∫ –≤—Ö–æ–¥–æ–≤


    roles = db.relationship('Role', secondary=roles_users, backref=db.backref('users', lazy='dynamic'))
    user_to_profiles = db.relationship('UserProfile', lazy="joined", backref=db.backref("profile_to_user"), cascade="all, delete-orphan")
    user_to_reports = db.relationship('Report', lazy=True)


    def get_max_rank(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ä–æ–ª–µ–π.
        
        Returns:
            int: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Ä–æ–ª–∏ –µ—Å—Ç—å.
            None: –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π.
        """
        if not self.roles:
            return None  # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π
        return max(role.rank for role in self.roles if role.rank is not None)
    

    def has_role(self, role_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å."""
        return any(role.name == role_name for role in self.roles)


    def add_role(self, role_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç."""
        role = Role.query.filter_by(name=role_name).first()
        if role and role not in self.roles:
            self.roles.append(role)
            db.session.commit()


    def find_by_email(email):
        return User.query.filter_by(email=email).first()


class UserProfile(BaseModel):
    __tablename__ = 'user_profiles'
    
    user_id = db.Column(db.BigInteger, db.ForeignKey('users.id'), nullable=False)
    profile_name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.String(500), nullable=True)
    default_profile = db.Column(db.Boolean, default=False, nullable=False)
    
    profile_to_configs = db.relationship("AppConfig", lazy=True, backref="profile", cascade="all, delete-orphan")
    profile_to_reports = db.relationship('Report', lazy=True, backref=db.backref("report_to_profile"), cascade="all, delete-orphan")
    profile_to_files = db.relationship("FileMetadata", lazy=True, backref=db.backref("file_to_profile"), cascade="all, delete-orphan")
    profile_to_key_words = db.relationship("KeyWord", lazy=True, backref=db.backref("key_word_to_profile"), cascade="all, delete-orphan")
    profile_to_report_types = db.relationship("ReportType", lazy=True, backref=db.backref("report_type_to_profile"), cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<UserProfile - {self.profile_name}>"

    def get_profile_data(self):
        user = self.profile_to_user
        return {
            "id": self.id,
            "profile_name": self.profile_name,
            "description": self.description,
            "default_profile": self.default_profile,
            "username": user.username if user else "No data",
            "email": user.email if user else "No data",
            "login_count": user.login_count if user else "No data"
        }

    @classmethod
    def create(cls, user_id, profile_name, description=None, default_profile=False):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            profile_name (str): –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è.
            description (str, optional): –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è. Defaults to None.
            default (bool, optional): –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. Defaults to False.
        
        Raises:
            ValueError: –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        existing_default_profile = cls.get_default_profile(user_id)
        if default_profile:
            if existing_default_profile:
                logger.warning(f"(create) ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")  
                existing_default_profile.default_profile = False
        else:
            if not existing_default_profile:
                default_profile = True
        
        new_profile = cls(
            user_id=user_id,
            profile_name=profile_name,
            description=description,
            default_profile=default_profile
        )
        new_profile.save()  
        logger.info(f"(create) ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        return new_profile
        
    @classmethod
    def get_default_profile(cls, user_id):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        Returns:
            UserProfile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ None, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
        """
        return cls.query.filter_by(user_id=user_id, default_profile=True).first() or None


    @classmethod
    def get_user_profiles(cls, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        return cls.query.filter_by(user_id=user_id).all()
    
    
    @classmethod
    def find_by_id_and_user(cls, profile_id, user_id):
        """–ò—â–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –µ–≥–æ ID –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return cls.query.filter_by(id=profile_id, user_id=user_id).first()


class ReportType(BaseModel):
    __tablename__ = 'report_type'
    profile_id = db.Column(db.BigInteger, db.ForeignKey('user_profiles.id'), nullable=False)
    type_text = db.Column(db.String(50), nullable=False)
    type_index = db.Column(db.Integer, nullable=False)
    
    type_to_subtypes = db.relationship("ReportSubtype", lazy=True, backref=db.backref("subtype_to_type"), cascade="all, delete-orphan")
    
    
    def __repr__(self):
        return f"<ReportType - {self.type_text}>"
        
     
    @classmethod
    def create(cls, type_text, profile_id, type_index=None):
        existing_type = cls.query.filter_by(type_text=type_text, profile_id=profile_id).first()
        if existing_type:
            logger.warning(f"(create) ‚ùå –¢–∏–ø {type_text} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_id}.")
            raise DatabaseDuplicateError(f"–¢–∏–ø {type_text} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_id}.")
        # If type_index is not provided, set it to the next available index
        all_types = cls.query.filter_by(profile_id=profile_id).all()
        if type_index is None:
            all_indexes = [t.type_index for t in all_types if t.type_index is not None]
            max_index = max(all_indexes, default=0)
            type_index = max_index + 1
        
        new_type = cls(
            type_text=type_text,
            profile_id=profile_id,
            type_index=type_index,
        )
        db.session.add(new_type)
        db.session.commit()
        return new_type
    
    @classmethod
    def find_by_profile(cls, profile_id):
        """
        Find all report types created by a specific user.
        """
        return cls.query.filter_by(profile_id=profile_id).all()
    
    @classmethod
    def get_types_with_subtypes(cls, profile_id):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ç–∏–ø–∞–º–∏ –∏ –∏—Ö –ø–æ–¥—Ç–∏–ø–∞–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ç–∏–ø–∞–º–∏ –∏ –ø–æ–¥—Ç–∏–ø–∞–º–∏.
        """
        types = cls.query.filter_by(profile_id=profile_id).all()
        result = []
        
        for report_type in types:
            subtypes = [{
                    "subtype_id": subtype.id,
                    "subtype_text": subtype.subtype_text,
                    "subtype_index": subtype.subtype_index
                } for subtype in report_type.type_to_subtypes]
            result.append({
                "type_id": report_type.id,
                "type_text": report_type.type_text,
                "subtypes": subtypes,
                "type_index": report_type.type_index 
            })
        return result


class ReportSubtype(BaseModel):
    __tablename__ = "report_subtype"
    type_id = db.Column(db.SmallInteger, db.ForeignKey("report_type.id"), nullable=False)
    subtype_text = db.Column(db.String(250), nullable=False)
    subtype_index = db.Column(db.Integer, nullable=False)
    
    subtype_to_reports = db.relationship('Report', lazy=True, backref=db.backref("report_to_subtype"), cascade="all, delete-orphan")
    
    @classmethod
    def create(cls, type_id, subtype_text, subtype_index=None): # subtype_index –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None —á—Ç–æ–±—ã –Ω–∏–∂–µ –∑–∞–π—Ç–∏ –≤ if –∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –µ–≥–æ
        """
        Creates a new report subtype.

        Args:
            type (int): The ID of the report type.
            subtype (str): The subtype text.
            subtype_index (int, optional): The index of the subtype. If not provided, it will be set automatically.

        Returns:
            ReportSubtype: The newly created report subtype object.
        """
        existing_subtype = cls.query.filter_by(type_id=type_id, subtype_text=subtype_text).first()
        if existing_subtype:
            logger.warning(f"(create) ‚ùå –ü–æ–¥—Ç–∏–ø {subtype_text} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ç–∏–ø–∞ {type_id}.")
            raise DatabaseDuplicateError(f"–ü–æ–¥—Ç–∏–ø '{subtype_text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ç–∏–ø–∞ ID={type_id}.")

        if subtype_index is None:
            all_subtypes = cls.query.filter_by(type_id=type_id).all()
            all_indexes = [s.subtype_index for s in all_subtypes if s.subtype_index is not None]
            max_index = max(all_indexes, default=0)
            subtype_index = max_index + 1

        new_subtype = cls(
            type_id=type_id,
            subtype_text=subtype_text,
            subtype_index=subtype_index
        )
        db.session.add(new_subtype)
        db.session.commit()
        return new_subtype
    
    @classmethod
    def find_by_report_type(cls, type_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–¥—Ç–∏–ø—ã, –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
        return cls.query.filter_by(type_id=type_id).all()


class Report(BaseModel):
    __tablename__ = "reports"
    profile_id = db.Column(db.BigInteger, db.ForeignKey('user_profiles.id'), nullable=False)
    user_id = db.Column(db.BigInteger, db.ForeignKey('users.id'), nullable=False)
    report_subtype = db.Column(db.Integer, db.ForeignKey('report_subtype.id'), nullable=False)
    comment = db.Column(db.String(255), nullable=True)
    report_name = db.Column(db.String(255), nullable=False)
    public = db.Column(db.Boolean, default=False, nullable=False)
    report_side = db.Column(db.Boolean, nullable=False, default=False)
    
   
    report_to_paragraphs = db.relationship('Paragraph', lazy=True, backref=db.backref("paragraph_to_report"), cascade="all, delete-orphan")

    
    @classmethod
    def create(cls, profile_id, report_subtype, report_name,  user_id, comment=None, public=False, report_side=False):
        new_report = cls(
            profile_id=profile_id,
            report_subtype=report_subtype,
            report_name=report_name,
            user_id=user_id,
            comment=comment,
            public=public,
            report_side=report_side
        )
        db.session.add(new_report)
        db.session.commit()
        return new_report
    
    
    @classmethod
    def find_by_profile(cls, profile_id):
        """–ò—â–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        reports = cls.query.filter_by(profile_id=profile_id, user_id=current_user.id).all()
        return reports
    
    
    @classmethod
    def get_report_type_id (cls, report_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –æ—Ç—á–µ—Ç–∞"""
        report = cls.query.filter_by(id=report_id).first()
        return report.report_to_subtype.subtype_to_type.id
    
    @classmethod
    def get_report_type_name (cls, report_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞"""
        report = cls.query.filter_by(id=report_id).first()
        return report.report_to_subtype.subtype_to_type.type_text
    
    
    @classmethod
    def find_by_subtypes(cls, report_subtype):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º –ø–æ–¥—Ç–∏–ø–æ–º"""
        return cls.query.filter_by(report_subtype=report_subtype).all()
    
    
    @classmethod
    def get_report_info(cls, report_id):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞.
        Args:
            report_id (int): ID –æ—Ç—á–µ—Ç–∞.
            profile_id (int): ID –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç—á–µ—Ç–µ –∏–ª–∏ None, –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        logger.debug(f"(get_report_info) üöÄ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ report_id={report_id}")
        
        report = cls.query.filter_by(id=report_id).first()
        if not report:
            logger.error(f"(get_report_info)‚ùå –ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None  

        report_data = {
            "id": report.id,
            "report_name": report.report_name,
            "report_type": report.report_to_subtype.subtype_to_type.type_text,
            "report_subtype": report.report_to_subtype.subtype_text,
            "comment": report.comment,
            "report_side": report.report_side,
            "user_id": report.user_id,
            "report_public": report.public
        }
        logger.debug(f"(get_report_info)‚úÖ –ü–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞: report_id={report_id}. –í–æ–∑–≤—Ä–∞—â–∞—é –¥–∞–Ω–Ω—ã–µ")
        return report_data
    
    
    @classmethod
    def get_report_data(cls, report_id):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤.
        Args:
            report_id (int): ID –æ—Ç—á–µ—Ç–∞.
            profile_id (int): ID –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        Returns:
            tuple: (dict, list) - (report_data, sorted_paragraphs)
        """
        logger.debug(f"(get_report_data) üöÄ –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞: report_id={report_id}")  
        try:
            report_data = cls.get_report_info(report_id)
        except Exception as e:
            logger.error(f"(get_report_data) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞ –∏–∑ (get_report_info): {e}")
            raise e
        
        if report_data is None:
            logger.error(f"–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: report_id={report_id}")
            return None, None
        try:
            sorted_paragraphs = Report.get_report_paragraphs(report_id)
        except Exception as e:
            logger.error(f"(get_report_data) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –æ—Ç—á–µ—Ç–∞ –∏–∑ (get_report_paragraphs): {e}")
            raise e
        logger.debug(f"(get_report_data) ‚úÖ –ü–æ–ª—É—á–∏–ª –æ–±–æ–±—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞: report_id={report_id}. –í–æ–∑–≤—Ä–∞—â–∞—é.")
        return report_data, sorted_paragraphs
    
    
    
    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –æ—Ç—á–µ—Ç–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö 
    # –ø–æ index (–∏—Å–ø–æ–ª—å–∑—é –µ–≥–æ –≤ –º–µ—Ç–æ–¥–µ get_report_data)
    @classmethod
    def get_report_paragraphs(cls, report_id):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –æ—Ç—á–µ—Ç–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ index.
        
        Args:
            report_id (int): ID –æ—Ç—á–µ—Ç–∞.
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ index.
        """
        logger.debug(f"(get_report_paragraphs)üöÄ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –æ—Ç—á–µ—Ç–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ paragraph_index
        paragraphs = Paragraph.query.filter_by(report_id=report_id).order_by(Paragraph.paragraph_index).all()
        sorted_paragraphs = []

        for paragraph in paragraphs:
            
            paragraph_data = paragraph.get_paragraph_data(paragraph.id)
            if paragraph_data is None:
                logger.error(f"(get_report_paragraphs) ‚ùå –ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph.id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue

            sorted_paragraphs.append(paragraph_data)
            logger.debug(f"(–º–µ—Ç–æ–¥ get_report_paragraphs –∫–ª–∞—Å—Å–∞ Report) –ü–∞—Ä–∞–≥—Ä–∞—Ñ {paragraph.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤.")

        logger.debug(f"(–º–µ—Ç–æ–¥ get_report_paragraphs –∫–ª–∞—Å—Å–∞ Report) ‚úÖ –ü–æ–ª—É—á–∏–ª –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞: report_id={report_id}. –í–æ–∑–≤—Ä–∞—â–∞—é –¥–∞–Ω–Ω—ã–µ")
        return sorted_paragraphs  


class ReportShare(db.Model):
    __tablename__ = "report_shares"

    id = db.Column(db.BigInteger, primary_key=True)
    report_id = db.Column(db.BigInteger, db.ForeignKey("reports.id", ondelete="CASCADE"), nullable=False)
    shared_by_user_id = db.Column(db.BigInteger, db.ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    shared_with_user_id = db.Column(db.BigInteger, db.ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    created_at = db.Column(db.DateTime, default=lambda: datetime.now(timezone.utc), nullable=False)

    report = db.relationship("Report", backref="shares")
    shared_by = db.relationship("User", foreign_keys=[shared_by_user_id])
    shared_with = db.relationship("User", foreign_keys=[shared_with_user_id])


    from flask_login import current_user

    @classmethod
    def create(cls, report_id, shared_with_user_id):
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç ReportShare ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å current_user –¥–µ–ª–∏—Ç—Å—è –æ—Ç—á–µ—Ç–æ–º —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

        Args:
            report_id (int): ID –æ—Ç—á–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–º –¥–µ–ª—è—Ç—Å—è.
            shared_with_user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º –¥–µ–ª—è—Ç—Å—è.

        Returns:
            ReportShare: –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —É—Å–ø–µ—Ö. None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        logger.info(f"[ReportShare.create] üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —à–∞—Ä–∏–Ω–≥–µ –æ—Ç—á–µ—Ç–∞ {report_id} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {shared_with_user_id}")
        try:
            new_share = cls(
                report_id=report_id,
                shared_by_user_id=current_user.id,
                shared_with_user_id=shared_with_user_id
            )
            db.session.add(new_share)
            db.session.commit()
            return new_share
        except Exception as e:
            logger.error(f"[ReportShare.create] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —à–∞—Ä–∏–Ω–≥–µ: {e}")
            db.session.rollback()
            return None


    
class Paragraph(BaseModel):
    __tablename__ = "report_paragraphs"
    id = db.Column(db.BigInteger, primary_key=True, autoincrement=True)
    report_id = db.Column(db.BigInteger, db.ForeignKey("reports.id"), nullable=False)
    paragraph_index = db.Column(db.Integer, nullable=False)
    paragraph = db.Column(db.String(255), nullable=False)
    
    paragraph_visible = db.Column(db.Boolean, default=False, nullable=False)
    title_paragraph = db.Column(db.Boolean, default=False, nullable=False)
    bold_paragraph = db.Column(db.Boolean, default=False, nullable=False)
    str_before = db.Column(db.Boolean, nullable=False)
    str_after = db.Column(db.Boolean, nullable=False)
    is_additional = db.Column(db.Boolean, nullable=False)
    is_active = db.Column(db.Boolean, default=True, nullable=False)
    is_impression = db.Column(db.Boolean, default=False, nullable=False)
    
    comment = db.Column(db.String(255), nullable=True)
    paragraph_weight = db.Column(db.SmallInteger, nullable=False) 
    tags = db.Column(db.String(255), nullable=True)
    head_sentence_group_id = db.Column(db.BigInteger, db.ForeignKey("head_sentence_groups.id", ondelete="SET NULL"))
    tail_sentence_group_id = db.Column(db.BigInteger, db.ForeignKey("tail_sentence_groups.id", ondelete="SET NULL"))

    head_sentence_group = db.relationship("HeadSentenceGroup", backref="paragraphs")
    tail_sentence_group = db.relationship("TailSentenceGroup", backref="paragraphs")
    
    
    
    @classmethod
    def create(cls, 
               report_id, 
               paragraph_index, 
               paragraph, 
               is_impression = False, 
               paragraph_visible=True, 
               title_paragraph=False, 
               bold_paragraph=False, 
               str_before=False,
               str_after=False,
               is_additional=False,
               paragraph_weight=1, 
               tags=None, 
               comment=None, 
               is_active=True,
               head_sentence_group_id = None, 
               tail_sentence_group_id = None
        ):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ.
        """
        logger.debug(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ Paragraph) üöÄ –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: report_id={report_id}")
        try:
            new_paragraph = cls(
                report_id=report_id,
                paragraph_index=paragraph_index,
                paragraph=paragraph,
                is_impression=is_impression,
                paragraph_visible=paragraph_visible,
                title_paragraph=title_paragraph,
                bold_paragraph=bold_paragraph,
                paragraph_weight=paragraph_weight,
                str_before=str_before,
                str_after=str_after,
                is_additional=is_additional,
                tags=tags,
                comment=comment,
                is_active=is_active,
                head_sentence_group_id=head_sentence_group_id,
                tail_sentence_group_id=tail_sentence_group_id
            )
            db.session.add(new_paragraph)
            db.session.commit()
            
            logger.debug(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ Paragraph) ‚úÖ –ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å–æ–∑–¥–∞–Ω: paragraph_id={new_paragraph.id}")
            return new_paragraph
        
        except Exception as e:
            logger.error(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ Paragraph) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {e}")
            
            db.session.rollback()
            return None
        
    
    @classmethod
    def get_paragraph_data(cls, paragraph_id):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞.
        Args:
            paragraph_id (int): ID –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞.
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        logger.debug(f"(–º–µ—Ç–æ–¥ get_paragraph_data –∫–ª–∞—Å—Å–∞ Paragraph) üöÄ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: paragraph_id={paragraph_id}")
        
        paragraph = cls.query.filter_by(id=paragraph_id).first()
        if not paragraph:
            logger.error(f"(–º–µ—Ç–æ–¥ get_paragraph_data –∫–ª–∞—Å—Å–∞ Paragraph) ‚ùå –ü–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –µ—â–µ —Å –∫–∞–∫–∏–º –ª–∏–±–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º –≥—Ä—É–ø–ø head –∏ tail
        has_linked_head = False
        has_linked_tail = False
        if paragraph.head_sentence_group_id:
            logger.debug(f"(–º–µ—Ç–æ–¥ get_paragraph_data –∫–ª–∞—Å—Å–∞ Paragraph) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø—ã head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ {paragraph_id}")
            if HeadSentenceGroup.is_linked(paragraph.head_sentence_group_id) > 1:
                logger.debug(f"(–º–µ—Ç–æ–¥ get_paragraph_data –∫–ª–∞—Å—Å–∞ Paragraph) üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞–ª–∏—á–∏–µ >1 —Å–≤—è–∑–µ–π –¥–ª—è head —É –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ç—Ç—Ä–∏–±—É—Ç—ã")
                has_linked_head = True
        if paragraph.tail_sentence_group_id:
            logger.debug(f"(–º–µ—Ç–æ–¥ get_paragraph_data –∫–ª–∞—Å—Å–∞ Paragraph) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø—ã tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ {paragraph_id}.")
            if TailSentenceGroup.is_linked(paragraph.tail_sentence_group_id) > 1:
                logger.debug(f"(–º–µ—Ç–æ–¥ get_paragraph_data –∫–ª–∞—Å—Å–∞ Paragraph) üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞–ª–∏—á–∏–µ >1 —Å–≤—è–∑–µ–π –¥–ª—è tail —É –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ç—Ç—Ä–∏–±—É—Ç—ã.")
                has_linked_tail = True


        paragraph_data = {
            "id": paragraph.id,
            "report_id": paragraph.report_id,
            "paragraph_index": paragraph.paragraph_index,
            "paragraph": paragraph.paragraph,
            "paragraph_visible": paragraph.paragraph_visible,
            "title_paragraph": paragraph.title_paragraph,
            "bold_paragraph": paragraph.bold_paragraph,
            "is_impression": paragraph.is_impression,
            "is_active": paragraph.is_active,
            "str_before": paragraph.str_before,
            "str_after": paragraph.str_after,
            "is_additional": paragraph.is_additional,
            "comment": paragraph.comment,
            "paragraph_weight": paragraph.paragraph_weight,
            "tags": paragraph.tags,
            "has_linked_head": has_linked_head,
            "has_linked_tail": has_linked_tail,
            "head_sentence_group_id": paragraph.head_sentence_group_id or None, 
            "tail_sentence_group_id": paragraph.tail_sentence_group_id or None,
            "head_sentences": HeadSentenceGroup.get_group_sentences(paragraph.head_sentence_group_id) if paragraph.head_sentence_group_id else [],
            "tail_sentences": TailSentenceGroup.get_group_sentences(paragraph.tail_sentence_group_id) if paragraph.tail_sentence_group_id else []
        }
        
        logger.debug(f"(–º–µ—Ç–æ–¥ get_paragraph_data –∫–ª–∞—Å—Å–∞ Paragraph) ‚úÖ –ü–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: paragraph_id={paragraph_id}. –í–æ–∑–≤—Ä–∞—â–∞—é –¥–∞–Ω–Ω—ã–µ")
        return paragraph_data
    
    
    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (head_group, tail_group)
    @classmethod
    def get_paragraph_groups(cls, paragraph_id):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞.
        Args:
            paragraph_id (int): ID –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞.
        Returns:
            tuple: (HeadSentenceGroup, TailSentenceGroup) - –ì—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞.
        """
        paragraph = cls.query.get(paragraph_id)
        return paragraph.head_sentence_group, paragraph.tail_sentence_group



class SentenceBase(BaseModel):
    __abstract__ = True  
    
    report_type_id = db.Column(db.SmallInteger, nullable=True)  
    user_id = db.Column(db.BigInteger, db.ForeignKey("users.id", ondelete="SET NULL"), nullable=True)
    sentence = db.Column(db.String(600), nullable=False)
    tags = db.Column(db.String(100), nullable=True)
    comment = db.Column(db.String(255), nullable=True) 


    # –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º —Å–≤—è–∑—å —Å –≥—Ä—É–ø–ø–∞–º–∏
    @classmethod
    def delete_sentence(cls, sentence_id, group_id=None):
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –æ—Ç –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –æ–Ω–æ —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏.
        Args:
            sentence_id (int): ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
            group_id (int, optional): ID –≥—Ä—É–ø–ø—ã, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–π –ø–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ None, —É–¥–∞–ª—è–µ—Ç—Å—è —Å–∞–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
        """
        logger.debug(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) üöÄ –ù–∞—á–∞—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id}. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥—Ä—É–ø–ø–µ {group_id}")
        sentence = cls.query.get(sentence_id)
        if not sentence:
            logger.error(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            raise ValueError(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        
        # –ï—Å–ª–∏ –≤–º–µ—Å—Ç–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ù–ï –ø–µ—Ä–µ–¥–∞–ª–∏ ID –≥—Ä—É–ø–ø—ã ‚Üí —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if group_id is None:
            logger.error(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ ID –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            raise ValueError("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ ID –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

        linked_count = cls.is_linked(sentence_id)
        logger.debug(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id}: {linked_count}")

        # –ï—Å–ª–∏ —É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ 1 –∏–ª–∏ 0 —Å–≤—è–∑–µ–π ‚Üí —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if linked_count <= 1: 
            if cls != HeadSentence:
                logger.debug(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id}, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ 0 –∏–ª–∏ 1 —Å–≤—è–∑—å.")
                sentence.delete()
                return 
            else:
                logger.debug(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥—Ä—É–ø–ø–µ head. –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ body –≥—Ä—É–ø–ø—ã.")
                related_body_group_id = sentence.body_sentence_group_id
                body_group_links_count = BodySentenceGroup.is_linked(related_body_group_id)
                if body_group_links_count > 1:
                    logger.debug(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) body –≥—Ä—É–ø–ø–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–≥–∏–º–∏ –≥–ª–∞–≤–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. –û—Ç–≤—è–∑—ã–≤–∞—é –≥—Ä—É–ø–ø—É –∏ —É–¥–∞–ª—è—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
                    BodySentenceGroup.unlink_group(related_body_group_id, sentence_id)
                    sentence.delete()
                    logger.info(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ head-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} —É–¥–∞–ª–µ–Ω–æ.")
                    return
                else:
                    logger.debug(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) body –≥—Ä—É–ø–ø–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º –≥–ª–∞–≤–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º. –£–¥–∞–ª—è—é –≥—Ä—É–ø–ø—É –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
                    try:
                        BodySentenceGroup.delete_group(related_body_group_id, sentence_id)
                    except Exception as e:
                        logger.error(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ body –≥—Ä—É–ø–ø—ã: {e}")
                    sentence.delete()
                    logger.info(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ head-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} —É–¥–∞–ª–µ–Ω–æ.")
                    return

        # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –ø–µ—Ä–µ–¥–∞–ª–∏ ID –≥—Ä—É–ø–ø—ã –∏ —É –Ω–µ–≥–æ –±–æ–ª—å—à–µ 1 —Å–≤—è–∑–∏ ‚Üí –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤—è–∑—ã–≤–∞–µ–º
        logger.info(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ö†Ô∏è –î–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏, —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤—è–∑—ã–≤–∞—é –µ–≥–æ –æ—Ç –≥—Ä—É–ø–ø—ã ID={group_id}")
        try:
            cls.unlink_from_group(sentence_id, group_id)
            logger.info(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω–æ –æ—Ç –≥—Ä—É–ø–ø—ã ID={group_id}")
            return
        except Exception as e:
            logger.error(f"(–º–µ—Ç–æ–¥ delete_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} –æ—Ç –≥—Ä—É–ø–ø—ã ID={group_id}: {e}")
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} –æ—Ç –≥—Ä—É–ø–ø—ã ID={group_id}: {e}")
        

    @classmethod
    def get_sentence_data(cls, sentence_id, group_id):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
        Args:
            sentence_id (int): ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
            related_id (int, optional): ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è head/body/tail).
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
        """
        logger.debug(f"(–º–µ—Ç–æ–¥ get_sentence_data –∫–ª–∞—Å—Å–∞ SentenceBase) üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id}")
        sentence = cls.query.get(sentence_id)
        if not sentence:
            logger.error(f"(–º–µ—Ç–æ–¥ get_sentence_data –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return None
        
        index_or_weight = cls.get_sentence_index_or_weight(sentence_id, group_id)
        sentence_data = {
            "id": sentence.id,
            "sentence": sentence.sentence,
            "tags": sentence.tags,
            "comment": sentence.comment,
            "is_linked": cls.is_linked(sentence_id) > 1,
            "group_id": group_id
        }
            
        if cls == HeadSentence:
            has_linked_body = False
            body_sentence_group_id = None
            body_sentences = []
            
            if sentence.body_sentence_group_id:
                body_sentence_group_id = sentence.body_sentence_group_id
                
                logger.debug(f"(–º–µ—Ç–æ–¥ get_sentence_data –∫–ª–∞—Å—Å–∞ SentenceBase) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø—ã body –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è head-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {sentence_id}.")
                if BodySentenceGroup.is_linked(sentence.body_sentence_group_id) > 1:
                    logger.debug(f"(–º–µ—Ç–æ–¥ get_sentence_data –∫–ª–∞—Å—Å–∞ SentenceBase) üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞–ª–∏—á–∏–µ >1 —Å–≤—è–∑–µ–π –¥–ª—è body —É –¥–∞–Ω–Ω–æ–≥–æ head-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ç—Ç—Ä–∏–±—É—Ç—ã.")
                    has_linked_body = True
                else:
                    logger.debug(f"(–º–µ—Ç–æ–¥ get_sentence_data –∫–ª–∞—Å—Å–∞ SentenceBase) üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ 1 —Å–≤—è–∑–∏ –¥–ª—è body —É –¥–∞–Ω–Ω–æ–≥–æ head-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ç—Ç—Ä–∏–±—É—Ç—ã.")
                    
                body_sentences = BodySentenceGroup.get_group_sentences(sentence.body_sentence_group_id)
                
            sentence_data["body_sentences"] = body_sentences
            sentence_data["body_sentence_group_id"] = body_sentence_group_id
            sentence_data["has_linked_body"] = has_linked_body
            sentence_data["sentence_index"] = index_or_weight
            
        elif cls == BodySentence or cls == TailSentence:
            sentence_data["sentence_weight"] = index_or_weight
        elif cls == TailSentence:
            sentence_data["sentence_weight"] = index_or_weight
            
        logger.debug(f"(–º–µ—Ç–æ–¥ get_sentence_data –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id}. –í–æ–∑–≤—Ä–∞—â–∞—é –¥–∞–Ω–Ω—ã–µ.")
        return sentence_data
   
   
    @classmethod
    def edit_sentence(cls, 
                      sentence_id, 
                      group_id, 
                      related_id, 
                      new_text=None, 
                      new_tags=None, 
                      new_comment=None, 
                      use_dublicate=True,
                      ):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (Head, Body, Tail).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            SentenceBase: –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –∏–ª–∏ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
        """
        logger.debug(f"(–º–µ—Ç–æ–¥ edit_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) üîß –ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {cls.__name__} ID={sentence_id}")
        if not related_id or not group_id:
            logger.error(f"(–º–µ—Ç–æ–¥ edit_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã related_id –∏–ª–∏ group_id.")
            raise ValueError(f"–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã related_id –∏–ª–∏ group_id.")
        
        sentence = cls.query.get(sentence_id)
        
        if not sentence:
            logger.error(f"(–º–µ—Ç–æ–¥ edit_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            raise ValueError(f"{cls.__name__}: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        if new_text is None and new_tags is None and new_comment is None:
            logger.debug(f"(–º–µ—Ç–æ–¥ edit_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            return sentence
    
        from sentence_processing import find_similar_exist_sentence 
        logger.info(f"(–º–µ—Ç–æ–¥ edit_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) üõ† –ù–∞—á–∏–Ω–∞—é '–º—è–≥–∫–æ–µ' —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id}")
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if cls == HeadSentence:
            sentence_type = "head"
        elif cls == BodySentence:
            sentence_type = "body"
        elif cls == TailSentence:
            sentence_type = "tail"
        else:
            logger.error(f"(–º–µ—Ç–æ–¥ edit_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–∂–µ –≤ –±–∞–∑–µ —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫–∏–º –¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        new_sentence_data = {
            "sentence_text": new_text if new_text is not None else sentence.sentence,
            "sentence_type": sentence_type,
            "report_type_id": sentence.report_type_id
            }
        similar_sentence = None
        if use_dublicate:
            similar_sentence = find_similar_exist_sentence(**new_sentence_data)
            
        if similar_sentence and similar_sentence.id != int(sentence_id):
            logger.debug(f"(–º–µ—Ç–æ–¥ edit_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) üß© –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏–≤—è–∑—ã–≤–∞—é –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
            index_or_weight = cls.get_sentence_index_or_weight(sentence_id, group_id)
            cls.link_to_group(similar_sentence.id, group_id, sentence_weight=index_or_weight, sentence_index=index_or_weight)
            cls.delete_sentence(sentence_id, group_id)
            logger.info(f"(–º–µ—Ç–æ–¥ edit_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ ('–ú—è–≥–∫–æ–µ' —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ).")
            return similar_sentence
        else:
            logger.debug(f"(–º–µ—Ç–æ–¥ edit_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) –ê–Ω–∞–ª–æ–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
            if new_text is not None:
                sentence.sentence = new_text
            if new_tags is not None:
                sentence.tags = new_tags
            if new_comment is not None:
                sentence.comment = new_comment
            logger.info(f"(–º–µ—Ç–æ–¥ edit_sentence –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ ('–ú—è–≥–∫–æ–µ' —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ).")
            db.session.commit()
            return sentence
        
        
    
    
    @classmethod
    def create(cls, 
               user_id, 
               report_type_id, 
               sentence, 
               related_id, 
               sentence_index=None, 
               tags=None, 
               comment=None, 
               sentence_weight=1,
               unique=False,
        ):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (head, body, tail).

        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            report_type_id (int): ID —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞.
            sentence (str): –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
            related_id (int): ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ (–ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –¥–ª—è head/tail, head-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è body).
            sentence_index (int, optional): –ò–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è head).
            tags (str, optional): –¢–µ–≥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
            comment (str, optional): –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
            sentence_weight (int, optional): –í–µ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è body/tail).

        Returns:
            tuple: (—Å–æ–∑–¥–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞)
        """
        from sentence_processing import find_similar_exist_sentence 
        
        if not sentence.strip():
            sentence = "–ü—É—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"

        logger.info(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase)(—Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {cls.__name__}) –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º: '{sentence}' (ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏: {related_id})")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        if cls == HeadSentence:
            if sentence_index is None:
                logger.error(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å")
                raise ValueError(f"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å")
            paragraph = Paragraph.get_by_id(related_id)
            if not paragraph:
                logger.error(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å ID {related_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise ValueError(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å ID {related_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            class_type = HeadSentence

            group = paragraph.head_sentence_group or HeadSentenceGroup.create()
            paragraph.head_sentence_group_id = group.id
            sentence_type = "head"

        elif cls == BodySentence:
            head_sentence = HeadSentence.get_by_id(related_id)
            if not head_sentence:
                logger.error(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å ID {related_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                raise ValueError(f"head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å ID {related_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            class_type = BodySentence

            group = head_sentence.body_sentence_group or BodySentenceGroup.create()
            head_sentence.body_sentence_group_id = group.id
            sentence_type = "body"

        elif cls == TailSentence:
            paragraph = Paragraph.get_by_id(related_id)
            if not paragraph:
                logger.error(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å ID {related_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise ValueError(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å ID {related_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            class_type = TailSentence 

            group = paragraph.tail_sentence_group or TailSentenceGroup.create()
            paragraph.tail_sentence_group_id = group.id
            sentence_type = "tail"

        else:
            logger.error(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
       

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–∂–µ –≤ –±–∞–∑–µ —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if not unique:
            logger.info(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase)üß© –ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            similar_sentence = find_similar_exist_sentence(
                sentence_text=sentence, 
                sentence_type=sentence_type, 
                report_type_id=report_type_id
            )
            if similar_sentence:
                logger.info(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) üß©üß©üß© –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å ID {similar_sentence.id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                db.session.add(similar_sentence)
                db.session.flush()
                logger.info(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) –ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É")
                
                similar_sentence_linked, similar_sentence_group = cls.link_to_group(sentence_id=similar_sentence.id, group_id=group.id, sentence_weight=sentence_weight, sentence_index=sentence_index)
                
                logger.info(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) –ù–∞–π–¥–µ–Ω–Ω–æ–µ –ø–æ—Ö–æ–∂–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –≥—Ä—É–ø–ø–µ {similar_sentence_group.id}.")
                
                return similar_sentence_linked, similar_sentence_group
            
            logger.info(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) –ü–æ—Ö–æ–∂–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
       
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å –æ–±—â–∏–º–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—è–º–∏
        sentence_data = {
            "sentence": sentence.strip(),
            "tags": tags,
            "comment": comment,
            "report_type_id": report_type_id,
            "user_id": user_id
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        new_sentence = cls(**sentence_data)

        db.session.add(new_sentence)
        db.session.commit()  
        
        logger.info(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase)(—Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è{cls.__name__}) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ.")

        logger.info(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) –ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É")
        try:
            new_sentence_linked, new_sentence_group = cls.link_to_group(new_sentence.id, group.id, sentence_weight, sentence_index)
            logger.info(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
            return new_sentence_linked, new_sentence_group
        except Exception as e:
            logger.error(f"(–º–µ—Ç–æ–¥ create –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
        
    
    @classmethod
    def link_to_group(cls, sentence_id, group_id, sentence_weight=None, sentence_index=None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É.

        Args:
            sentence (SentenceBase): –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.
            group (BaseModel): –ì—Ä—É–ø–ø–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.

        Returns:
            tuple: (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞)
        """
        logger.debug(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) üöÄ –ù–∞—á–∞—Ç–∞ –ø—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ {group_id}")
        sentence = cls.query.get(sentence_id)
        
        if not sentence:
            logger.error(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            raise ValueError(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω–æ –ª–∏ —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ
        if cls == HeadSentence:
            group = HeadSentenceGroup.query.get(group_id)
            if group and sentence in group.head_sentences:
                logger.debug(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence.id} —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ {group.id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return sentence, group
            elif group:
                logger.debug(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) üìå –ì—Ä—É–ø–ø–∞ {group.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence.id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –Ω–µ–π.")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if sentence_index is None:
                    logger.error(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è HeadSentence")
                    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω sentence_index –¥–ª—è HeadSentence")
                stmt = head_sentence_group_link.insert().values(
                head_sentence_id=sentence.id,
                group_id=group.id,
                sentence_index=sentence_index  
                )
                db.session.execute(stmt)
                
        elif cls == BodySentence:
            group = BodySentenceGroup.query.get(group_id)
            if group and sentence in group.body_sentences:
                logger.debug(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence.id} —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ {group.id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return sentence, group
            elif group:
                logger.debug(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) üìå –ì—Ä—É–ø–ø–∞ {group.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence.id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –Ω–µ–π.")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if sentence_weight is None:
                    logger.error(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –≤–µ—Å –¥–ª—è Body –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω sentence_weight –¥–ª—è Body –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                stmt = body_sentence_group_link.insert().values(
                body_sentence_id=sentence.id,
                group_id=group.id,
                sentence_weight=sentence_weight  
                )
                db.session.execute(stmt)
                
        elif cls == TailSentence:
            group = TailSentenceGroup.query.get(group_id)
            if group and sentence in group.tail_sentences:
                logger.debug(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence.id} —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ {group.id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return sentence, group
            elif group:
                logger.debug(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) üìå –ì—Ä—É–ø–ø–∞ {group.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence.id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –Ω–µ–π.")
                if sentence_weight is None:
                    logger.error(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –≤–µ—Å –¥–ª—è Tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω sentence_weight –¥–ª—è Tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                stmt = tail_sentence_group_link.insert().values(
                tail_sentence_id=sentence.id,
                group_id=group.id,
                sentence_weight=sentence_weight 
                )
                db.session.execute(stmt)
                
        else:
            logger.error(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        
        db.session.commit()
        logger.debug(f"(–º–µ—Ç–æ–¥ link_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {sentence.id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –≥—Ä—É–ø–ø–µ {group.id}")
        return sentence, group
    
    

    @classmethod
    def unlink_from_group(cls, sentence_id, group_id):
        """
        –£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π.

        Args:
            sentence (SentenceBase): –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤—è–∑–∫–∏.
            group (BaseModel): –ì—Ä—É–ø–ø–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.

        Returns:
            bool: True, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—ã–ª–æ –≤–Ω–µ—Å–µ–Ω–æ, –∏–Ω–∞—á–µ False.
        """
        logger.debug(f"(–º–µ—Ç–æ–¥ unlink_fro_group –∫–ª–∞—Å—Å–∞ SentenceBase) üöÄ –ù–∞—á–∞—Ç–∞ –æ—Ç–≤—è–∑–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {sentence_id} –æ—Ç –≥—Ä—É–ø–ø—ã {group_id}")

        sentence = cls.query.get(sentence_id)
        if not sentence:
            logger.error(f"(–º–µ—Ç–æ–¥ unlink_fro_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            raise ValueError(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        
        if isinstance(sentence, HeadSentence):
            group = HeadSentenceGroup.query.get(group_id)
            if group and sentence in group.head_sentences:
                group.head_sentences.remove(sentence)
                logger.debug(f"(–º–µ—Ç–æ–¥ unlink_fro_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {cls.__name__} —Å ID: {sentence.id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≥—Ä—É–ø–ø—ã {group.id}")
                db.session.commit()
                return True
        elif isinstance(sentence, BodySentence):
            group = BodySentenceGroup.query.get(group_id)
            if group and sentence in group.body_sentences:
                group.body_sentences.remove(sentence)
                logger.debug(f"(–º–µ—Ç–æ–¥ unlink_fro_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {cls.__name__} —Å ID: {sentence.id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≥—Ä—É–ø–ø—ã {group.id}")
                db.session.commit()
                return True
        elif isinstance(sentence, TailSentence):
            group = TailSentenceGroup.query.get(group_id)
            if group and sentence in group.tail_sentences:
                group.tail_sentences.remove(sentence)
                logger.debug(f"(–º–µ—Ç–æ–¥ unlink_fro_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {cls.__name__} —Å ID: {sentence.id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≥—Ä—É–ø–ø—ã {group.id}")
                db.session.commit()
                return True
        else:
            logger.error(f"(–º–µ—Ç–æ–¥ unlink_fro_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã")
            return False


    
    @classmethod
    def is_linked(cls, sentence_id):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å –∫–∞–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥—Ä—É–ø–ø —Å–≤—è–∑–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
        Args:
            sentence_id (int): ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–≤—è–∑–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
        """
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–µ–π –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id}")
        sentence = cls.query.get(sentence_id)
        if not sentence:
            return 0
        
        if isinstance(sentence, HeadSentence):
            return db.session.query(func.count(HeadSentenceGroup.id)).join(HeadSentence.groups).filter(HeadSentence.id == sentence_id).scalar()

        elif isinstance(sentence, BodySentence):
            return db.session.query(func.count(BodySentenceGroup.id)).join(BodySentence.groups).filter(BodySentence.id == sentence_id).scalar()

        elif isinstance(sentence, TailSentence):
            return db.session.query(func.count(TailSentenceGroup.id)).join(TailSentence.groups).filter(TailSentence.id == sentence_id).scalar()

        return 0
    
    
    @classmethod
    def get_sentence_index_or_weight(cls, sentence_id, group_id):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –≤–µ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–µ–π.
        
        Args:
            sentence_id (int): ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
            group_id (int): ID –≥—Ä—É–ø–ø—ã.
        
        Returns:
            int | None: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (–¥–ª—è HeadSentence) –∏–ª–∏ –≤–µ—Å–∞ (–¥–ª—è Body/Tail), –ª–∏–±–æ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        logger.debug(f"(get_sentence_index_or_weight)(—Ç–∏–ø –≥—Ä—É–ø–ø—ã: {cls.__name__}) üöÄ –ù–∞—á–∞—Ç –∑–∞–ø—Ä–æ—Å {'–∏–Ω–¥–µ–∫—Å–∞' if cls==HeadSentence else '–≤–µ—Å–∞'} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} –∏–∑ –≥—Ä—É–ø–ø—ã ID={group_id}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–≤—è–∑–∏ –∏ –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ
        if cls == HeadSentence:
            link_table = head_sentence_group_link
            sentence_field = link_table.c.head_sentence_id
            index_field = link_table.c.sentence_index

        elif cls == BodySentence:
            link_table = body_sentence_group_link
            sentence_field = link_table.c.body_sentence_id
            index_field = link_table.c.sentence_weight

        elif cls == TailSentence:
            link_table = tail_sentence_group_link
            sentence_field = link_table.c.tail_sentence_id
            index_field = link_table.c.sentence_weight

        else:
            logger.error(f"(get_sentence_index_or_weight) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {cls.__name__}")
            return None

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ
        result = (
            db.session.query(index_field)
            .filter(sentence_field == sentence_id, link_table.c.group_id == group_id)
            .scalar()
        )

        logger.debug(f"(get_sentence_index_or_weight) ‚úÖ {'–∏–Ω–¥–µ–∫—Å' if cls==HeadSentence else '–≤–µ—Å'} –Ω–∞–π–¥–µ–Ω: {result}")
        return result
    
    
    @classmethod
    def set_sentence_index_or_weight(cls, sentence_id, group_id, new_weight=None, new_index=None):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
        
        - –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ `HeadSentence`, –æ–±–Ω–æ–≤–ª—è–µ—Ç `sentence_index`.
        - –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ `BodySentence`, –æ–±–Ω–æ–≤–ª—è–µ—Ç `sentence_weight` (—Å–≤–æ—é –ª–æ–≥–∏–∫—É).
        - –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ `TailSentence`, –æ–±–Ω–æ–≤–ª—è–µ—Ç `sentence_weight` (—Å–≤–æ—é –ª–æ–≥–∏–∫—É).

        Args:
            sentence_id (int): ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
            group_id (int): ID –≥—Ä—É–ø–ø—ã.
            new_weight (int, optional): –ù–æ–≤—ã–π –≤–µ—Å (–¥–ª—è `BodySentence` –∏ `TailSentence`).
            new_index (int, optional): –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å (–¥–ª—è `HeadSentence`).
        """
        logger.debug(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ - set_sentence_index_or_weight) (—Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {cls.__name__}) üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} –≤ –≥—Ä—É–ø–ø–µ ID={group_id} –Ω–∞—á–∞—Ç–æ")
        if cls == HeadSentence:
            if new_index is None:
                logger.error(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ - set_sentence_index_or_weight) ‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ª–∏—á–∏—è new_index")
                raise ValueError("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ª–∏—á–∏—è new_index")

            try:
                db.session.execute(
                    head_sentence_group_link.update()
                    .where(
                        (head_sentence_group_link.c.head_sentence_id == sentence_id) &
                        (head_sentence_group_link.c.group_id == group_id)
                    )
                    .values({"sentence_index": new_index})
                )
                logger.debug(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ - set_sentence_index_or_weight)(—Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è 'HeadSentence') ‚úÖ  –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å ID={sentence_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è -> {new_index}")
            except Exception as e:
                logger.error(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ - set_sentence_index_or_weight) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
                raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

        elif cls == BodySentence:
            if new_weight is None:
                logger.error(f"‚ùå BodySentence —Ç—Ä–µ–±—É–µ—Ç new_weight")
                raise ValueError("BodySentence —Ç—Ä–µ–±—É–µ—Ç new_weight")

            db.session.execute(
                body_sentence_group_link.update()
                .where(
                    (body_sentence_group_link.c.body_sentence_id == sentence_id) &
                    (body_sentence_group_link.c.group_id == group_id)
                )
                .values({"sentence_weight": new_weight})
            )
            logger.debug(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ - set_sentence_index_or_weight)(—Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è 'BodySentence') ‚úÖ  –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å ID={sentence_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –Ω–æ–≤—ã–π –≤–µ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è -> {new_weight}")

        elif cls == TailSentence:
            if new_weight is None:
                logger.error(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ - set_sentence_index_or_weight) ‚ùå TailSentence —Ç—Ä–µ–±—É–µ—Ç new_weight")
                raise ValueError("TailSentence —Ç—Ä–µ–±—É–µ—Ç new_weight")

            db.session.execute(
                tail_sentence_group_link.update()
                .where(
                    (tail_sentence_group_link.c.tail_sentence_id == sentence_id) &
                    (tail_sentence_group_link.c.group_id == group_id)
                )
                .values({"sentence_weight": new_weight})
            )
            logger.debug(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ - set_sentence_index_or_weight)(—Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è 'TailSentence') ‚úÖ  –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å ID={sentence_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –Ω–æ–≤—ã–π –≤–µ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è -> {new_weight}")

        else:
            logger.error(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ - set_sentence_index_or_weight) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {cls.__name__}")
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {cls.__name__}")

        db.session.commit()
        logger.debug(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ - set_sentence_index_or_weight)(—Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {cls.__name__}) ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")




class HeadSentence(SentenceBase):
    __tablename__ = "head_sentences"
    body_sentence_group_id = db.Column(db.BigInteger, db.ForeignKey("body_sentence_groups.id", ondelete="SET NULL"))
    
    body_sentence_group = db.relationship(
        "BodySentenceGroup", 
        backref="head_sentences"
    )
    
    groups = db.relationship(
        "HeadSentenceGroup",
        secondary="head_sentence_group_link",
        back_populates="head_sentences"
    )
    
    
class BodySentence(SentenceBase):
    __tablename__ = "body_sentences"
    
    groups = db.relationship(
        "BodySentenceGroup",
        secondary="body_sentence_group_link",
        back_populates="body_sentences"
    )
    
    
    @staticmethod
    def increase_weight(sentence_id, group_id):
        logger.debug(f"(increase_weight) üöÄ –ù–∞—á–∞—Ç–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} –≤ –≥—Ä—É–ø–ø–µ ID={group_id}")
        link_table = body_sentence_group_link
        try:
            stmt = (
                link_table.update()
                .where(link_table.c.group_id == group_id)
                .where(link_table.c.body_sentence_id == sentence_id)
                .values(sentence_weight=link_table.c.sentence_weight + 1)
            )

            db.session.execute(stmt)
            db.session.commit()
            logger.debug(f"(increase_weight) ‚úÖ –í–µ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 1 –≤ –≥—Ä—É–ø–ø–µ ID={group_id}")
        except Exception as e:
            logger.error(f"(increase_weight) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –≤–µ—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} –≤ –≥—Ä—É–ø–ø–µ ID={group_id}: {e}")
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –≤–µ—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} –≤ –≥—Ä—É–ø–ø–µ ID={group_id}: {e}")
    
    

class TailSentence(SentenceBase):
    __tablename__ = "tail_sentences"

    groups = db.relationship(
        "TailSentenceGroup",
        secondary="tail_sentence_group_link",
        back_populates="tail_sentences"
    )
    
    
    @staticmethod
    def increase_weight(sentence_id, group_id):
        logger.debug(f"(increase_weight) üöÄ –ù–∞—á–∞—Ç–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} –≤ –≥—Ä—É–ø–ø–µ ID={group_id}")
        link_table = tail_sentence_group_link
        try:
            stmt = (
                link_table.update()
                .where(link_table.c.group_id == group_id)
                .where(link_table.c.tail_sentence_id == sentence_id)
                .values(sentence_weight=link_table.c.sentence_weight + 1)
            )

            db.session.execute(stmt)
            db.session.commit()
            logger.debug(f"(increase_weight) ‚úÖ –í–µ—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 1 –≤ –≥—Ä—É–ø–ø–µ ID={group_id}")
        except Exception as e:
            logger.error(f"(increase_weight) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –≤–µ—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} –≤ –≥—Ä—É–ø–ø–µ ID={group_id}: {e}")
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –≤–µ—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ID={sentence_id} –≤ –≥—Ä—É–ø–ø–µ ID={group_id}: {e}")
    
    
  
  
        
class SentenceGroupBase(BaseModel):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≥—Ä—É–ø–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (HeadSentenceGroup, BodySentenceGroup, TailSentenceGroup).
    """
    __abstract__ = True  


    @classmethod
    def delete_group(cls, group_id, entity_id = None):
        """
        –£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
        –ï—Å–ª–∏ —É –≥—Ä—É–ø–ø—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–µ–π, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç—å—é.
        Args:
            group_id (int): ID –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
            entity_id (int): ID —Å—É—â–Ω–æ—Å—Ç–∏ (–ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –æ—Ç–∫—É–¥–∞ –ø–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å.
        Raises:
            ValueError: –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—ë –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å.
        """
        logger.info(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase) üöÄ –ù–∞—á–∞—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã ID={group_id} –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ ID={entity_id}")
        group = cls.query.get(group_id)
        if not group:
            logger.info(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase) ‚ùå –ì—Ä—É–ø–ø–∞ ID={group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            raise ValueError(f"–ì—Ä—É–ø–ø–∞ ID={group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


        # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É—â–Ω–æ—Å—Ç–∏ ‚Üí —É–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if entity_id is None:
            logger.info(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase) ‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏. –û—à–∏–±–∫–∞.")
            raise ValueError("–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å –∫–∞–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—É—â–Ω–æ—Å—Ç–µ–π —Å–≤—è–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞
        linked_count = cls.is_linked(group_id)
        logger.info(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase) –ì—Ä—É–ø–ø–∞ ID={group_id} —Å–≤—è–∑–∞–Ω–∞ —Å {linked_count} —Å—É—â–Ω–æ—Å—Ç—è–º–∏.")

        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å–≤—è–∑–∞–Ω–∞ –±–æ–ª—å—à–µ —á–µ–º —Å –æ–¥–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç—å—é ‚Üí –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤—è–∑—ã–≤–∞–µ–º entity_id
        if linked_count > 1:
            logger.info(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase) ‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É.")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∑–∞ —Å—É—â–Ω–æ—Å—Ç—å (–ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) –∏ –æ—Ç–≤—è–∑—ã–≤–∞–µ–º
            if cls == HeadSentenceGroup:
                cls.unlink_group(group_id, entity_id)
            elif cls == BodySentenceGroup:
                cls.unlink_group(group_id, entity_id)
            elif cls == TailSentenceGroup:
                cls.unlink_group(group_id, entity_id)
            else:    
                logger.error(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã: {type(group).__name__}")
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã: {type(group).__name__}")

            db.session.commit()
            logger.info(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase)({cls.__name__}) ‚úÖ –ì—Ä—É–ø–ø–∞ ID={group_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω–∞ –æ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ ID={entity_id}. –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return  

        # –ï—Å–ª–∏ —É –≥—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ 1 —Å–≤—è–∑—å ‚Üí —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –Ω–µ—ë
        logger.info(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase) üöÄ –ì—Ä—É–ø–ø–∞ —Å–≤—è–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç—å—é. –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã.")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω—ã —Å –≥—Ä—É–ø–ø–æ–π
        sentence_map = {
            HeadSentenceGroup: ("head_sentences", HeadSentence),
            BodySentenceGroup: ("body_sentences", BodySentence),
            TailSentenceGroup: ("tail_sentences", TailSentence),
        }

        sentence_attr, sentence_cls = sentence_map.get(type(group), (None, None))
        
        if not sentence_attr or not sentence_cls:
            logger.error(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã: {type(group).__name__}")
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã: {type(group).__name__}")

        sentences = getattr(group, sentence_attr, [])
        logger.debug(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase) –ù–∞–π–¥–µ–Ω–æ {len(sentences)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ ID={group_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        
        for sentence in sentences:
            logger.info(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase) –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ID={sentence.id} –∏–∑ –≥—Ä—É–ø–ø—ã ID={group_id}")
            try:
                sentence_cls.delete_sentence(sentence.id, group_id)
            except Exception as e:
                logger.error(f"(–º–µ—Ç–æ–¥ delete_group –∫–ª–∞—Å—Å–∞ SentenceGroupBase) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
                raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –≥—Ä—É–ø–ø—É
        db.session.delete(group)
        db.session.commit()
        logger.info(f"–ì—Ä—É–ø–ø–∞ ID={group_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")


    @classmethod
    def is_linked(cls, group_id):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –¥–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –±–æ–ª–µ–µ —á–µ–º —Å –æ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º.
        
        Args:
            group_id (int): ID –≥—Ä—É–ø–ø—ã.

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–≤—è–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞.
        """
        logger.debug(f"(–º–µ—Ç–æ–¥ is_linked –∫–ª–∞—Å—Å–∞ SentenceGroupBase) üöÄ –ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã ID={group_id}")
        if not group_id:
            return 0
        
        if cls == HeadSentenceGroup:
            return Paragraph.query.filter_by(head_sentence_group_id=group_id).count()

        elif cls == TailSentenceGroup:
            return Paragraph.query.filter_by(tail_sentence_group_id=group_id).count()

        elif cls == BodySentenceGroup:
            return HeadSentence.query.filter_by(body_sentence_group_id=group_id).count()
        
        logger.error(f"(–º–µ—Ç–æ–¥ is_linked –∫–ª–∞—Å—Å–∞ SentenceGroupBase) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã: {cls.__name__}, –≤–æ–∑–≤—Ä–∞—â–∞—é 0")
        return 0  
   
   
    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–≤—è–∑—ã–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ (–ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    @classmethod
    def unlink_group(cls, group_id, related_id):
        """
        –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ (–ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
        Args:
            group_id (int): ID –≥—Ä—É–ø–ø—ã.
            related_id (int): ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ (–ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
        Returns:
            bool: True, –µ—Å–ª–∏ –æ—Ç–≤—è–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
        """
        logger.info(f"–û—Ç–≤—è–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É ID={group_id} –æ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ ID={related_id}")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∑–∞ —Å—É—â–Ω–æ—Å—Ç—å (–ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) –∏ –æ—Ç–≤—è–∑—ã–≤–∞–µ–º
        if cls == HeadSentenceGroup:
            Paragraph.query.filter_by(id=related_id).update({"head_sentence_group_id": None})
        elif cls == TailSentenceGroup:
            Paragraph.query.filter_by(id=related_id).update({"tail_sentence_group_id": None})
        elif cls == BodySentenceGroup:
            HeadSentence.query.filter_by(id=related_id).update({"body_sentence_group_id": None})
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã: {cls.__name__}")
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã: {cls.__name__}")

        db.session.commit()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ –≥—Ä—É–ø–ø—É ID={group_id} –æ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ ID={related_id}.")
        return 


    # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç—å—é (–ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º)
    @classmethod
    def link_group(cls, group_id, related_id):
        """
        –°–≤—è–∑—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç—å—é (–ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º).
        Args:
            group_id (int): ID –≥—Ä—É–ø–ø—ã.
            related_id (int): ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ (–ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
        Returns:
            bool: True, –µ—Å–ª–∏ —Å–≤—è–∑—å –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
        """
        logger.info(f"–°–≤—è–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É ID={group_id} —Å —Å—É—â–Ω–æ—Å—Ç—å—é ID={related_id}")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∑–∞ —Å—É—â–Ω–æ—Å—Ç—å (–ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) –∏ —Å–≤—è–∑—ã–≤–∞–µ–º
        if cls == HeadSentenceGroup:
            Paragraph.query.filter_by(id=related_id).update({"head_sentence_group_id": group_id})
        elif cls == TailSentenceGroup:
            Paragraph.query.filter_by(id=related_id).update({"tail_sentence_group_id": group_id})
        elif cls == BodySentenceGroup:
            HeadSentence.query.filter_by(id=related_id).update({"body_sentence_group_id": group_id})
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã: {cls.__name__}")
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã: {cls.__name__}")

        db.session.commit()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–ª–∏ –≥—Ä—É–ø–ø—É ID={group_id} —Å —Å—É—â–Ω–æ—Å—Ç—å—é ID={related_id}.")
        return


    @classmethod
    def copy_group(cls, group_id, new_group_id=None):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Ç—É–¥–∞ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.

        Args:
            group (BaseModel): –ì—Ä—É–ø–ø–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º.
            new_group (BaseModel): –ì—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º.
        """
        logger.info(f"(–º–µ—Ç–æ–¥ relink_all_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) üöÄ –ù–∞—á–∞—Ç–∞ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã {group_id} –≤ –≥—Ä—É–ø–ø—É {new_group_id}")
        group = cls.query.get(group_id)
        if new_group_id:
            new_group = cls.query.get(new_group_id)
        else:
            new_group = cls.create()
            new_group_id = new_group.id
        
        if not group or not new_group:
            logger.error(f"(–º–µ—Ç–æ–¥ relink_all_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ì—Ä—É–ø–ø–∞ {group_id} –∏–ª–∏ {new_group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            raise ValueError(f"–ì—Ä—É–ø–ø–∞ {group_id} –∏–ª–∏ {new_group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        if isinstance(group, HeadSentenceGroup):
            sentences = group.head_sentences
            for sentence in sentences:
                sentence_index = HeadSentence.get_sentence_index_or_weight(sentence.id, group_id)
                db.session.execute(
                    head_sentence_group_link.insert().values(
                    head_sentence_id=sentence.id,
                    group_id=new_group_id,
                    sentence_index=sentence_index)
                )
        elif isinstance(group, BodySentenceGroup):
            sentences = group.body_sentences
            for sentence in sentences:
                sentence_weight = BodySentence.get_sentence_index_or_weight(sentence.id, group_id)
                db.session.execute(
                    body_sentence_group_link.insert().values(
                    body_sentence_id=sentence.id,
                    group_id=new_group_id,
                    sentence_weight=sentence_weight)
                )
        elif isinstance(group, TailSentenceGroup):
            sentences = group.tail_sentences
            for sentence in sentences:
                sentence_weight = TailSentence.get_sentence_index_or_weight(sentence.id, group_id)
                db.session.execute(
                    tail_sentence_group_link.insert().values(
                    tail_sentence_id=sentence.id,
                    group_id=new_group_id,
                    sentence_weight=sentence_weight)
                )
        else:
            logger.error(f"(–º–µ—Ç–æ–¥ relink_all_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –≥—Ä—É–ø–ø–∞")
            raise ValueError(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –≥—Ä—É–ø–ø–∞")
        
        db.session.commit()
        logger.info(f"(–º–µ—Ç–æ–¥ relink_all_to_group –∫–ª–∞—Å—Å–∞ SentenceBase) ‚úÖ –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã {group_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–Ω—ã –≤ –≥—Ä—É–ø–ø—É {new_group_id}")
        return new_group_id
    

    @classmethod
    def create(cls):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.

        Returns:
            SentenceGroupBase: –°–æ–∑–¥–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞.
        """
        new_group = cls()
        db.session.add(new_group)
        db.session.commit()
        return new_group

    
    @classmethod
    def get_group_sentences(cls, group_id):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–µ–π.
        
        Args:
            group_id (int): ID –≥—Ä—É–ø–ø—ã.
        
        Returns:
            list[dict]: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ + –∏–Ω–¥–µ–∫—Å.
        """
        logger.debug(f"(get_group_sentences)  üöÄ (—Ç–∏–ø –≥—Ä—É–ø–ø—ã: {cls.__name__}) –ù–∞—á–∞—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã ID={group_id}.")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        if cls == HeadSentenceGroup:
            sentence_model = HeadSentence
            index_name = "sentence_index"
        elif cls == BodySentenceGroup:
            sentence_model = BodySentence
            index_name = "sentence_weight"
        elif cls == TailSentenceGroup:
            sentence_model = TailSentence
            index_name = "sentence_weight"
        else:
            logger.error(f"(get_group_sentences) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä—É–ø–ø—ã: {cls.__name__}")
            return []

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        sentences = sentence_model.query.join(sentence_model.groups).filter(cls.id == group_id).all()

        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞/–≤–µ—Å–∞ –∏–∑ —Å–≤—è–∑–∏
        sentence_data = []
        for s in sentences:
            s_data = sentence_model.get_sentence_data(s.id, group_id)
            sentence_data.append(s_data)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ `index_or_weight`
        if index_name == "sentence_index":
            sentence_data.sort(key=lambda x: x[f"{index_name}"] or 0)
        else:
            # –î–ª—è Body –∏ Tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Å—É –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            sentence_data.sort(key=lambda x: x[f"{index_name}"] or 0, reverse=True)

        logger.debug(f"(get_group_sentences) ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(sentence_data)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã ID={group_id}")
        return sentence_data   
        
        
        
        
class HeadSentenceGroup(SentenceGroupBase):
    __tablename__ = "head_sentence_groups"

    head_sentences = db.relationship(
        "HeadSentence",
        secondary="head_sentence_group_link",
        back_populates="groups"
    )
    
class BodySentenceGroup(SentenceGroupBase):
    __tablename__ = "body_sentence_groups"

    body_sentences = db.relationship(
        "BodySentence",
        secondary="body_sentence_group_link",
        back_populates="groups"
    )
    
        
class TailSentenceGroup(SentenceGroupBase):
    __tablename__ = "tail_sentence_groups"

    tail_sentences = db.relationship(
        "TailSentence",
        secondary="tail_sentence_group_link",
        back_populates="groups"
    )
       
       
       
       
       
       
        
class KeyWord(BaseModel):
    __tablename__ = 'key_words_group'
    profile_id = db.Column(db.BigInteger, db.ForeignKey('user_profiles.id'), nullable=False)
    group_index = db.Column(db.Integer, nullable=False)
    index = db.Column(db.Integer, nullable=False)
    key_word = db.Column(db.String(50), nullable=False)
    key_word_comment = db.Column(db.String(100), nullable=True)
    public = db.Column(db.Boolean, default=False, nullable=False)
    
    # –°–≤—è–∑—å –º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º —Å —Ç–∞–±–ª–∏—Ü–µ–π reports
    key_word_reports = db.relationship('Report', lazy=True, secondary='key_word_report_link', backref='key_words')

    @classmethod
    def create(cls, group_index, index, key_word, profile_id, key_word_comment=None, public=False, reports=None):
        """Creates a new keyword group entry."""
        new_key_word_group = cls(
            group_index=group_index,
            index=index,
            key_word=key_word,
            key_word_comment=key_word_comment,
            public=public,
            profile_id=profile_id
        )
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –æ—Ç—á–µ—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å –Ω–∏–º–∏
        if reports:
            reports = Report.query.filter(Report.id.in_(reports), Report.profile_id == profile_id).all()
            for report in reports:
                new_key_word_group.key_word_reports.append(report)

        db.session.add(new_key_word_group)
        db.session.commit()
        return new_key_word_group

    @classmethod
    def find_by_profile(cls, profile_id):
        """Finds all keyword groups for a specific profile."""
        return cls.query.filter_by(profile_id=profile_id).order_by(cls.group_index, cls.index).all()
    
    @classmethod
    def find_without_reports(cls, profile_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–æ—Ñ–∏–ª—è, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ç—á–µ—Ç–∞–º–∏."""
        return cls.query.outerjoin(cls.key_word_reports).filter(
            cls.key_word_reports == None,  # –ù–µ—Ç —Å–≤—è–∑–µ–π —Å –æ—Ç—á–µ—Ç–∞–º–∏
            cls.profile_id == profile_id  # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        ).all()
        
    @classmethod
    def find_by_report(cls, report_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–æ–º."""
        return cls.query.join(cls.key_word_reports).filter(
            Report.id == report_id
        ).all()
        
    @classmethod
    def get_keywords_for_report(cls, profile_id, report_id):
        """ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö 
        –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞, –≤–∫–ª—é—á–∞–µ—Ç –∫–∞–∫ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ç—á–µ—Ç–æ–º 
        –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–∞–∫ –∏ –æ–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è """
        
        keywords_linked_to_report = cls.find_by_report(report_id)
        keywords_without_reports = cls.find_without_reports(profile_id)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
        all_keywords = keywords_linked_to_report + keywords_without_reports
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ –∏ —Ç–∞–º, –∏ —Ç–∞–º)
        all_keywords = list({keyword.id: keyword for keyword in all_keywords}.values())

        return all_keywords
    
    @classmethod
    def find_by_group_index(cls, group_index, profile_id):
        """
        –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é group_index –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            group_index (int): –ò–Ω–¥–µ–∫—Å –≥—Ä—É–ø–ø—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
            profile_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            list[KeyWord]: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å–ª–æ–≤ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞ –ø–æ–ª—è—Ö group_index –∏ user_id –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        # –ó–∞–ø—Ä–æ—Å –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º group_index
        return cls.query.filter_by(group_index=group_index, profile_id=profile_id).all()

        
    @classmethod
    def find_public(cls):
        """Finds all public keyword groups."""
        return cls.query.filter_by(public=True).all()

    @classmethod
    def add_reports_to_keywords(cls, keywords, reports):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã –∫ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
        # –ï—Å–ª–∏ keywords –Ω–µ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
        keywords = ensure_list(keywords)
        reports = ensure_list(reports)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –∫ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        for keyword in keywords:
            for report in reports:
                if report not in keyword.key_word_reports:
                    keyword.key_word_reports.append(report)

        db.session.commit()

    @classmethod
    def remove_reports_from_keywords(cls, keywords, reports):
        """–£–¥–∞–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã —É –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        # –ï—Å–ª–∏ keywords –Ω–µ —Å–ø–∏—Å–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
        keywords = ensure_list(keywords)
        reports = ensure_list(reports)

        # –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç—ã —É –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        for keyword in keywords:
            for report in reports:
                if report in keyword.key_word_reports:
                    keyword.key_word_reports.remove(report)

        db.session.commit()
        
    @classmethod
    def remove_all_reports_from_keywords(cls, keywords):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–≤—è–∑–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = ensure_list(keywords)

        for keyword in keywords:
            keyword.key_word_reports = []  

        db.session.commit()


class FileMetadata(BaseModel):
    __tablename__ = "file_metadata"
    
    profile_id = db.Column(db.BigInteger, db.ForeignKey("user_profiles.id"), nullable=False)  # –°–≤—è–∑—å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    file_name = db.Column(db.String(255), nullable=False)  # –ò–º—è —Ñ–∞–π–ª–∞
    file_path = db.Column(db.String(500), nullable=False)  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_type = db.Column(db.String(50), nullable=False)  # –¢–∏–ø —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "docx", "jpg")
    uploaded_at = db.Column(db.DateTime, default=db.func.now(), nullable=False)  # –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    file_description = db.Column(db.String(500), nullable=False)
    ai_file_id = db.Column(db.String(100), nullable=True)
    

    @classmethod
    def create(cls, profile_id, file_name, file_path, file_type, file_description, ai_file_id=None):
        new_file = cls(
            profile_id=profile_id,
            file_name=file_name,
            file_path=file_path,
            file_type=file_type,
            file_description=file_description,
            ai_file_id=ai_file_id
        )
        db.session.add(new_file)
        db.session.commit()
        return new_file
    
    @classmethod
    def get_file_by_description(cls, profile_id, file_description):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é, –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.
        
        Args:
            profile_id (int): ID –ø—Ä–æ—Ñ–∏–ª—è.
            file_description (str): –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.
        
        Returns:
            str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ None.
        """
        file = cls.query.filter_by(profile_id=profile_id, file_description=file_description).first()
        if file:
            return file
        else:
            return None


class ReportTextSnapshot(BaseModel):
    __tablename__ = "report_text_snapshots"

    report_id = db.Column(db.BigInteger, db.ForeignKey("reports.id", ondelete="SET NULL"), nullable=True)
    report_type = db.Column(db.SmallInteger, nullable=False)
    user_id = db.Column(db.BigInteger, db.ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    text = db.Column(db.Text, nullable=False)  
    created_at = db.Column(db.DateTime, default=lambda: datetime.now(timezone.utc), nullable=False)

    report = db.relationship("Report", backref=db.backref("snapshots", lazy=True))
    user = db.relationship("User", backref=db.backref("text_snapshots", lazy=True))

    def __repr__(self):
        return f"<ReportTextSnapshot id={self.id} report_id={self.report_id} created_at={self.created_at}>"


    @classmethod
    def create(cls, report_id, user_id, text):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–Ω–∞–ø—à–æ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞.

        Args:
            report_id (int): ID –æ—Ç—á–µ—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å–Ω–∞–ø—à–æ—Ç.
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω–∏–≤—à–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç.
            text (str): –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞.

        Returns:
            ReportTextSnapshot: —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–Ω–∞–ø—à–æ—Ç–∞.
        """
        try:
            from models import Report  # –∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            logger.info(f"(ReportTextSnapshot.create) üöÄ –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞ ID={report_id}")
            report = Report.query.get(report_id)
            if not report:
                logger.error(f"(ReportTextSnapshot.create) ‚ùå Report —Å id={report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise ValueError(f"Report —Å id={report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

            report_type = report.report_to_subtype.subtype_to_type.id

            snapshot = cls(
                report_id=report_id,
                report_type=report_type,
                user_id=user_id,
                text=text
            )
            db.session.add(snapshot)
            db.session.commit()
            logger.info(f"(ReportTextSnapshot.create) ‚úÖ –°–æ–∑–¥–∞–Ω —Å–Ω–∞–ø—à–æ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞ ID={report_id}")
            return snapshot
        except Exception as e:
            db.session.rollback()
            logger.error(f"(ReportTextSnapshot.create) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∞–ø—à–æ—Ç–∞: {e}")
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∞–ø—à–æ—Ç–∞: {e}")



    @classmethod
    def find_by_date_and_type(cls, user_id, date, report_type):
        """
        –ò—â–µ—Ç —Å–Ω–∞–ø—à–æ—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –¥–∞—Ç–µ –∏ —Ç–∏–ø—É –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            date (datetime.date): –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–∞.
            report_type (int): –¢–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.
        Returns:
            list[ReportTextSnapshot]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–Ω–∞–ø—à–æ—Ç–æ–≤.
        """
        

        return (
            cls.query
            .filter(
                cls.user_id == user_id,
                cast(cls.created_at, Date) == date,
                cls.report_type == report_type
            )
            .order_by(cls.created_at.desc())
            .all()
        )




# –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
db.Index("ix_tail_sentence_group_id", TailSentenceGroup.id)
db.Index("ix_body_sentence_group_id", BodySentenceGroup.id)

# –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–≤—è–∑–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –≥—Ä—É–ø–ø
db.Index("ix_tail_sentence_group_link_group", tail_sentence_group_link.c.group_id)
db.Index("ix_body_sentence_group_link_group", body_sentence_group_link.c.group_id)

# –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö –∏ head_sentences
db.Index("ix_paragraph_tail_sentence_group", Paragraph.tail_sentence_group_id)
db.Index("ix_head_sentence_body_sentence_group", HeadSentence.body_sentence_group_id)

# –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–≤—è–∑–µ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏ –≥—Ä—É–ø–ø
db.Index("ix_paragraph_head_sentence_group", Paragraph.head_sentence_group_id)
db.Index("ix_head_sentence_group_link_group", head_sentence_group_link.c.group_id)