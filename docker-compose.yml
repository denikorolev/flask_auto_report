# docker-compose.yml
version: "3.8"
services:
  web:
    build: .
    env_file: 
      - .env
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DB_HOST=db  # Переопределяем переменную DB_HOST для Docker, чтобы подключаться к контейнеру базы данных
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - SECRET_KEY=${SECRET_KEY}
    command: gunicorn app:app -b 0.0.0.0:5000 --timeout 120
    depends_on:
      - db

  web_test:
    build: .
    env_file: 
      - .env
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=testing
      - DB_HOST=db_test  # Переопределяем переменную DB_HOST для Docker, чтобы подключаться к контейнеру базы данных
      - DATABASE_URL=postgresql://${DB_USER_TEST}:${DB_PASS_TEST}@${DB_HOST_TEST}:${DB_PORT_TEST}/${DB_NAME_TEST}
      - SECRET_KEY=${SECRET_KEY}
    command: gunicorn app:app -b 0.0.0.0:5001 --timeout 120
    depends_on:
      - db_test

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/conf:/etc/letsencrypt  # Добавляем том для сертификатов
      - ./certbot/www:/var/www/certbot    # Том для временных файлов Certbot
    depends_on:
      - web

  nginx_test:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx_test.conf:/etc/nginx/nginx.conf
    depends_on:
    - web_test
    
  db:
    image: postgres:13
    env_file: 
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - /home/deniskorolev/backups:/backups

  db_test:
    image: postgres:13
    env_file: 
      - .env
    environment:
      POSTGRES_USER: ${DB_USER_TEST}
      POSTGRES_PASSWORD: ${DB_PASS_TEST}
      POSTGRES_DB: ${DB_NAME_TEST}
    ports:
      - "${DB_PORT_TEST}:5432"
    volumes:
      - pgdata_test:/var/lib/postgresql/data
      - /home/deniskorolev/backups:/backups

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 12h & wait $!; certbot renew; done;'" # Certbot будет автоматически обновлять сертификаты каждые 12 часов
    

volumes:
  pgdata:
  pgdata_test:
