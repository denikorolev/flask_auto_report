# –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏ –∑–∞–∫–∏–Ω—É—Ç—å –≤ tasks/

import base64
from tasks.extensions import celery
from app.utils.file_processing import prepare_impression_snippets
from app.utils.ai_processing import clean_raw_text, run_first_look_assistant, structure_report_text, ai_template_generator, ai_report_check, ai_impression_generation
from tasks.celery_task_processing import cancel_stale_polled_tasks, cancel_stuck_tasks
from app.utils.logger import logger
from app.utils.ocr_processing import get_ocr_provider
from app.utils.pdf_processing import has_text_layer, extract_text_from_pdf_textlayer
from celery import shared_task

# –¢–∞—Å–∫ –¥–ª—è –≤–æ—á–¥–æ–≥–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–ª–∏–Ω–≥–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ –æ—Ç–º–µ–Ω—è–µ—Ç 
# –∏—Ö –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
@celery.task
def celery_cancel_stale_polled_tasks():
    return cancel_stale_polled_tasks()

# –¢–∞—Å–∫ –¥–ª—è –≤–æ—á–¥–æ–≥–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å—à–∏—Ö –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∏—Ö
@celery.task
def celery_cancel_stuck_tasks():
    return cancel_stuck_tasks()

# –¢–∞—Å–∫ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Ö –≤ OpenAI
# –≠—Ç–æ—Ç —Ç–∞—Å–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏)
@celery.task(name='async_prepare_impression_snippets', time_limit=120, soft_time_limit=110)
def async_prepare_impression_snippets(profile_id, user_id, user_email, exept_words):
    prepare_impression_snippets(profile_id, user_id, user_email, exept_words)
    return None
    
    
# –¢–∞—Å–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—ã—Ä—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
@celery.task(name='async_clean_raw_text', time_limit=120, soft_time_limit=110)
def async_clean_raw_text(raw_text, user_id, assistant_id):
    logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—ã—Ä—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} –≤ Celery –∑–∞–¥–∞—á–µ")
    cleaned_text = clean_raw_text(raw_text, user_id, assistant_id)
    return cleaned_text


# –¢–∞—Å–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–¥–∏–Ω–∞–º–∏–∫–∞ –∏–∑ working_with_reports)
@celery.task(name='async_analyze_dynamics', time_limit=160, soft_time_limit=160)
def async_analyze_dynamics(origin_text, template_text, user_id, skeleton, report_id, first_look_assistant_id, structure_assistant_id):
    logger.info(f"–ó–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} –≤ Celery –∑–∞–¥–∞—á–µ")
    
    # 1. –ü–µ—Ä–≤—ã–π –≤–∑–≥–ª—è–¥
    rough_result = run_first_look_assistant(origin_text, template_text, user_id, assistant_id=first_look_assistant_id)

    # 2. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    final_structured_result = structure_report_text(template_text, rough_result, user_id, assistant_id=structure_assistant_id)

    return {
        "result": final_structured_result,
        "skeleton": skeleton,
        "report_id": report_id
    }
    
    
# –¢–∞—Å–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ impression –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
@celery.task(name="async_impression_generating", time_limit=160, soft_time_limit=160)
def async_impression_generating(assistant_id, user_id, report_text, file_id):
    return ai_impression_generation(assistant_id, user_id, report_text, file_id)

    
# –¢–∞—Å–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
@celery.task(name="async_report_checking", time_limit=160, soft_time_limit=160)
def async_report_checking(assistant_id, user_id, report_text, today_date):
    return ai_report_check(assistant_id, user_id, report_text, today_date)
    
    
# –¢–∞—Å–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@celery.task(name="template_generating", time_limit=160, soft_time_limit=160)
def template_generating(template_text, assistant_id, user_id):
    return ai_template_generator(template_text, assistant_id, user_id)


@shared_task(bind=True, name="async_ocr_extract_text", max_retries=0)
def async_ocr_extract_text(self, file_bytes_to_b64: str, filename: str, auto_prepare: bool, prepare_assistant_id: str, user_id: int) -> dict:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π OCR: –µ—Å–ª–∏ PDF —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–ª–æ–µ–º ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ä–∞–∑—É.
    –ò–Ω–∞—á–µ ‚Äî –æ—Ç–¥–∞—ë–º –Ω–∞ –æ–±–ª–∞—á–Ω—ã–π OCR –ø—Ä–æ–≤–∞–π–¥–µ—Ä.
    """
    logger.info(f"[async_ocr_extract_text] üöÄ {filename}, size={len(file_bytes_to_b64)}")
    try:
        file_bytes = base64.b64decode(file_bytes_to_b64.encode("ascii"))
        logger.info(f"[async_ocr_extract_text] ‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ {filename} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º={len(file_bytes)} bytes")
        provider = get_ocr_provider()
        text, method = provider.extract_text(content=file_bytes, filename=filename)
        logger.info(f"[async_ocr_extract_text] ‚úÖ provider={method}, len={len(text)}")
        if auto_prepare:
            try:
                logger.info(f"[async_ocr_extract_text] ü§ñ –ê–≤—Ç–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI")
                text = clean_raw_text(text, user_id=user_id, assistant_id=prepare_assistant_id)
                logger.info(f"[async_ocr_extract_text] ‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ–≤–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞={len(text)}")
            except Exception as e:
                logger.exception(f"[async_ocr_extract_text] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}. –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–µ–æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.")
        return {"text": text, "method": method}
    except Exception as e:
        logger.exception(f"[async_ocr_extract_text] ‚ùå {e}")
        raise
    
    
    
    