# new_report_creation.py

from flask import Blueprint, render_template, request, session, jsonify
from flask_login import current_user
from app.models.models import db, Report, ReportType, ReportSubtype, Paragraph, HeadSentence, BodySentence, TailSentence, ReportShare, HeadSentenceGroup, BodySentenceGroup, TailSentenceGroup
from app.utils.sentence_processing import extract_paragraphs_and_sentences
from app.utils.file_processing import allowed_file
from app.utils.common import ensure_list
from werkzeug.utils import secure_filename
from app.utils.logger import logger
import os
import shutil 
from flask_security.decorators import auth_required
from tasks.celery_tasks import template_generating

new_report_creation_bp = Blueprint('new_report_creation', __name__)


# –§—É–Ω–∫—Ü–∏–∏

def create_report_from_existing(report_name, report_subtype, comment, report_side, selected_reports):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    
    user_id = current_user.id
    profile_id = session.get("profile_id")
    
    new_report = Report.create(
        profile_id=profile_id,
        report_subtype=report_subtype,
        report_name=report_name,
        user_id=user_id,
        comment=comment,
        public=False,
        report_side=report_side
    )

    paragraph_index = 0
    impression_exist = []

    for report_id in selected_reports:
        existing_report = Report.query.get(report_id)
        if not existing_report:
            raise ValueError(f"–ü—Ä–æ—Ç–æ–∫–æ–ª —Å ID {report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        sorted_paragraphs = sorted(existing_report.report_to_paragraphs, key=lambda p: p.paragraph_index)

        for paragraph in sorted_paragraphs:
            if paragraph.is_impression:
                if not impression_exist:
                    impression_exist.append(paragraph)
                continue

            Paragraph.create(
                report_id=new_report.id,
                paragraph_index=paragraph_index,
                paragraph=paragraph.paragraph,
                paragraph_visible=paragraph.paragraph_visible,
                title_paragraph=paragraph.title_paragraph,
                bold_paragraph=paragraph.bold_paragraph,
                head_sentence_group_id=paragraph.head_sentence_group_id or None,
                tail_sentence_group_id=paragraph.tail_sentence_group_id or None,
                is_impression=False,
                is_additional=paragraph.is_additional,
                str_after=paragraph.str_after,
                str_before=paragraph.str_before,
                is_active=paragraph.is_active,
                
            )
            paragraph_index += 1

    for paragraph in impression_exist:
        Paragraph.create(
            report_id=new_report.id,
            paragraph_index=paragraph_index,
            paragraph=paragraph.paragraph,
            is_impression=True,
            paragraph_visible=paragraph.paragraph_visible,
            title_paragraph=paragraph.title_paragraph,
            bold_paragraph=paragraph.bold_paragraph,
            head_sentence_group_id=paragraph.head_sentence_group_id or None,
            tail_sentence_group_id=paragraph.tail_sentence_group_id or None,
            is_additional=False,
            is_active=paragraph.is_active,
            str_after=paragraph.str_after,
            str_before=paragraph.str_before,
        )

    return new_report



# Routes

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
@new_report_creation_bp.route('/create_report', methods=['GET', 'POST'])
@auth_required()
def create_report():
    profile_id = session.get("profile_id")
    report_types_and_subtypes = ReportType.get_types_with_subtypes(profile_id)
    
    return render_template("create_report.html",
                           title="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞",
                           report_types_and_subtypes=report_types_and_subtypes
                           )
    
    
@new_report_creation_bp.route("/get_existing_reports", methods=["GET"])
@auth_required()
def get_existing_reports():
    logger.info("[get_existing_reports]------------------------")
    logger.info("[get_existing_reports] üöÄ –ù–∞—á–∞—Ç –∑–∞–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    try:
        type_id = request.args.get("type_id", type=int)
        profile_id = session.get("profile_id")
        query = Report.query.filter_by(user_id=current_user.id, profile_id=profile_id)
        if type_id:
            # –ü–æ–¥—Ç—è–Ω–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —Ç–∏–ø
            query = query.join(ReportSubtype).filter(ReportSubtype.type_id == type_id)
        user_reports = query.all()

        if not user_reports:
            return jsonify({"status": "success", "reports": []})

        reports_data = []
        for report in user_reports:
            reports_data.append({
                "id": report.id,
                "report_name": report.report_name,
                "report_type": report.report_to_subtype.subtype_to_type.type_text,
                
            })
        print(reports_data)
        return jsonify({"status": "success", "reports": reports_data})

    except Exception as e:
        logger.error(f"[get_existing_reports] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."}), 500
    
    
# –ü–æ–ª—É—á–µ–Ω–∏–µ shared –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
@new_report_creation_bp.route("/get_shared_reports", methods=["GET"])
@auth_required()
def get_shared_reports():
    logger.info("[get_shared_reports]------------------------")
    logger.info("[get_shared_reports] üöÄ –ù–∞—á–∞—Ç –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤")

    try:
        type_text = request.args.get("type_text", type=str)
        shared_records = ReportShare.query.filter_by(shared_with_user_id=current_user.id).all()

        if not shared_records:
            logger.info("[get_shared_reports] ‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –∫—Ç–æ-–ª–∏–±–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return jsonify({"status": "warning", "message": "–ù–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –∫—Ç–æ-–ª–∏–±–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", "reports": []})

        shared_reports = []
        for record in shared_records:
            report = record.report
            if not report:
                continue  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É–¥–∞–ª—ë–Ω
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if type_text and report.report_to_subtype.subtype_to_type.type_text != type_text:
                continue

            shared_reports.append({
                "id": report.id,
                "report_name": report.report_name,
                "report_type": report.report_to_subtype.subtype_to_type.type_text,
                "shared_by_email": record.shared_by.email
            })
        if not shared_reports:
            logger.info("[get_shared_reports] ‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏.")
            return jsonify({"status": "warning", "message": "–ù–µ—Ç —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏.", "reports": []})

        logger.info(f"[get_shared_reports] ‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(shared_reports)} —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤")
        logger.info(f"[get_shared_reports] ------------------------")
        return jsonify({"status": "success", "reports": shared_reports})

    except Exception as e:
        logger.error(f"[get_shared_reports] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
        return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"}), 500
    
    
# –ü–æ–ª—É—á–µ–Ω–∏–µ public –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
@new_report_creation_bp.route("/get_public_reports", methods=["GET"])
@auth_required()
def get_public_reports():
    logger.info("(–ú–∞—Ä—à—Ä—É—Ç: get_public_reports)------------------------")
    logger.info("(–ú–∞—Ä—à—Ä—É—Ç: get_public_reports) üöÄ –ó–∞–ø—Ä–æ—Å –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤")
    try:
        type_text = request.args.get("type_text", type=str)
        query = Report.query.filter(Report.public == True)
        if type_text:
            query = query.join(ReportSubtype).join(ReportType).filter(ReportType.type_text == type_text)
        public_reports = query.all()
        
        if not public_reports:
            return jsonify({
                "status": "warning",
                "message": "–ù–µ—Ç –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤",
                "reports": []
            })
        public_reports_data = []
        for report in public_reports:
            public_reports_data.append({
                "id": report.id,
                "report_name": report.report_name,
                "report_type": report.report_to_subtype.subtype_to_type.type_text
            })

        logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç: get_public_reports) ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(public_reports)} –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤")
        return jsonify({
            "status": "success",
            "reports": public_reports_data
        })

    except Exception as e:
        logger.error(f"(–ú–∞—Ä—à—Ä—É—Ç: get_public_reports) ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã: {str(e)}"
        }), 500
    
    
# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é
@new_report_creation_bp.route('/create_manual_report', methods=['POST'])
@auth_required()
def create_manual_report():
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"}), 400
        
        report_name = data.get('report_name')
        report_subtype = data.get('report_subtype')
        comment = data.get('comment', "")
        report_side = data.get('report_side', False)
        
        profile_id = session.get("profile_id")
        
        # Create new report
        new_report = Report.create(
            profile_id=profile_id,
            report_subtype=report_subtype,
            report_name=report_name,
            user_id=current_user.id,
            comment=comment,
            public=False,
            report_side=report_side
        )
        logger.info(f"Report created successfully. Report ID: {new_report.id}")
        return jsonify({"status": "success", 
                        "message": "–ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ", 
                        "report_id": new_report.id}), 200

    except Exception as e:
        logger.error(f"Failed to create report. Error: {str(e)}")
        return jsonify({"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª. –û—à–∏–±–∫–∞: {str(e)}"}), 500    

    
    
# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@new_report_creation_bp.route('/create_report_from_file', methods=['POST'])
@auth_required()
def create_report_from_file():
    
    try:
        report_name = request.form.get('report_name')
        report_subtype = int(request.form.get('report_subtype'))
        comment = request.form.get('comment', "")
        report_side = request.form.get('report_side') == 'true'

        profile_id = session.get("profile_id")
        user_id = current_user.id
        

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        user_temp_folder = f"{current_user.id}_temp"
        if 'report_file' not in request.files:
            return jsonify({"status": "error", 
                            "message": "–í –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ñ–∞–π–ª–∞"}), 400

        file = request.files['report_file']
        if file.filename == '':
            return jsonify({"status": "error", 
                            "message": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"}), 400

        if file and allowed_file(file.filename, file_type='doc'):
            filename = secure_filename(file.filename)
            filepath = os.path.join(user_temp_folder, filename)
            if not os.path.exists(user_temp_folder):
                os.makedirs(user_temp_folder)
            file.save(filepath)

            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                paragraphs_from_file = extract_paragraphs_and_sentences(filepath)
                public = False
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
                new_report = Report.create(
                        profile_id=profile_id,
                        report_subtype=report_subtype,
                        report_name=report_name,
                        user_id=current_user.id,
                        comment=comment,
                        public=public,
                        report_side=report_side
                    )

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                report_type_id = Report.get_report_type_id(new_report.id)
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç
                for idx, paragraph in enumerate(paragraphs_from_file, start=1):

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
                    new_paragraph = Paragraph.create(
                        report_id=new_report.id,
                        paragraph_index=idx,
                        paragraph=paragraph['title']
                    )

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    for sentence_index, sentence_data in enumerate(paragraph['sentences'], start=1):
                        if isinstance(sentence_data, list):
                            for weight, split_sentence in enumerate(sentence_data, start=1):
                                if weight == 1:
                                    new_head_sentence, _ = HeadSentence.create(
                                        user_id=user_id,
                                        report_type_id=report_type_id,
                                        sentence=split_sentence.strip(),
                                        related_id=new_paragraph.id,
                                        sentence_index=sentence_index
                                    )
                                
                                else:
                                    BodySentence.create(
                                        user_id=user_id,
                                        report_type_id=report_type_id,
                                        sentence=split_sentence.strip(),
                                        related_id=new_head_sentence.id,
                                        sentence_index=sentence_index
                                    )
                        else:
                            HeadSentence.create(
                                user_id=user_id,
                                report_type_id=report_type_id,
                                sentence=sentence_data.strip(),
                                related_id=new_paragraph.id,
                                sentence_index=sentence_index
                            )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if os.path.exists(user_temp_folder):
                    shutil.rmtree(user_temp_folder)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∑–∞–º–µ–Ω–µ
                return jsonify({"status": "success", 
                                "report_id": new_report.id, 
                                "message": "–ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
                                }), 200

            except Exception as e:
                if os.path.exists(user_temp_folder):
                    shutil.rmtree(user_temp_folder)
                return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}"}), 500

        else:
            return jsonify({"status": "error", 
                            "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"}), 400

    except Exception as e:
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}"}), 500

    
    
# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
@new_report_creation_bp.route('/create_report_from_existing_few', methods=['POST'])
@auth_required()
def create_report_from_existing_few():
    logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)------------------------")
    logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö) üöÄ –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
    try:
        data = request.get_json()
        logger.debug(f"(–ú–∞—Ä—à—Ä—É—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö) –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        report_name = data.get("report_name")
        report_subtype = int(data.get("report_subtype"))
        comment = data.get("comment", "")
        report_side = data.get("report_side", False)
        selected_reports = ensure_list(data.get("selected_reports", []))

        if not selected_reports:
            return jsonify({
                "status": "error", 
                "message": "–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
            }), 400

        new_report = create_report_from_existing(
            report_name=report_name,
            report_subtype=report_subtype,
            comment=comment,
            report_side=report_side,
            selected_reports=selected_reports
        )
        logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö) ‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ. ID: {new_report.id}")
        return jsonify({
            "status": "success",
            "message": "–ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            "report_id": new_report.id
        }), 200

    except Exception as e:
        return jsonify({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}"
        }), 500



# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏–ª–∏ —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω–æ–≥–æ
@new_report_creation_bp.route('/create_report_from_public', methods=['POST'])
@auth_required()
def create_report_from_public_route():
    logger.info("(–ú–∞—Ä—à—Ä—É—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ) üöÄ –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ public")

    try:
        data = request.get_json()
        report_name = data.get("report_name")
        report_subtype = int(data.get("report_subtype"))
        comment = data.get("comment", "")
        report_side = data.get("report_side", False)
        public_report_id = int(data.get("selected_report_id"))
        profile_id = session.get("profile_id")

        public_report = Report.get_by_id(public_report_id)
        if not public_report or not public_report.public:
            logger.error("(–ú–∞—Ä—à—Ä—É—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ) ‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º")
            return jsonify({"status": "error", "message": "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º"}), 400

        report_type_id = ReportSubtype.get_by_id(report_subtype).subtype_to_type.id
        new_report = Report.create(
            profile_id=profile_id,
            report_subtype=report_subtype,
            report_name=report_name,
            user_id=current_user.id,
            comment=comment,
            public=False,
            report_side=report_side
        )

        for paragraph in public_report.report_to_paragraphs:
            sentences = HeadSentenceGroup.get_group_sentences(paragraph.head_sentence_group_id)
            new_paragraph = Paragraph.create(
                report_id=new_report.id,
                paragraph_index=paragraph.paragraph_index,
                paragraph=paragraph.paragraph,
                paragraph_visible=paragraph.paragraph_visible,
                title_paragraph=paragraph.title_paragraph,
                bold_paragraph=paragraph.bold_paragraph,
                head_sentence_group_id=None,
                tail_sentence_group_id=None,
                is_impression=paragraph.is_impression,
                is_additional=paragraph.is_additional,
                str_after=paragraph.str_after,
                str_before=paragraph.str_before,
                is_active=paragraph.is_active
            )
            for s in sentences:
                HeadSentence.create(
                    user_id=current_user.id,
                    report_type_id=report_type_id,
                    sentence=s["sentence"],
                    related_id=new_paragraph.id,
                    sentence_index=s["sentence_index"],
                    tags=s["tags"],
                    comment=s["comment"]
                )
        logger.info("(–ú–∞—Ä—à—Ä—É—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ) ‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        return jsonify({"status": "success", "message": "–ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", "report_id": new_report.id}), 200

    except Exception as e:
        logger.error(f"(create_report_from_public_route) ‚ùå –û—à–∏–±–∫–∞: {e}")
        return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª"}), 500

   
        
@new_report_creation_bp.route('/create_report_from_shared', methods=['POST'])
@auth_required()
def create_report_from_shared_route():
    logger.info("(–ú–∞—Ä—à—Ä—É—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ shared) üöÄ –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ shared")

    try:
        data = request.get_json()
        report_name = data.get("report_name")
        report_subtype = int(data.get("report_subtype"))
        comment = data.get("comment", "")
        report_side = data.get("report_side", False)
        shared_report_id = int(data.get("selected_report_id"))
        profile_id = session.get("profile_id")
        
        # –°—Ç–∞–≤–ª—é –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å—å –≥–ª—É–±–∏–Ω—ã –∫–æ–ø–∏—Ä–æ–≤–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å—é–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ–≥–æ –º–µ–Ω—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        deep_limit = 10

        shared_record = ReportShare.query.filter_by(report_id=shared_report_id, shared_with_user_id=current_user.id).first()
        if not shared_record:
            return jsonify({"status": "error", "message": "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 400

        shared_report = shared_record.report
        report_type_id = ReportSubtype.get_by_id(report_subtype).subtype_to_type.id
        new_report = Report.create(
            profile_id=profile_id,
            report_subtype=report_subtype,
            report_name=report_name,
            user_id=current_user.id,
            comment=comment,
            public=False,
            report_side=report_side
        )

        for paragraph in shared_report.report_to_paragraphs:
            head_sentences = HeadSentenceGroup.get_group_sentences(paragraph.head_sentence_group_id)
            new_paragraph = Paragraph.create(
                report_id=new_report.id,
                paragraph_index=paragraph.paragraph_index,
                paragraph=paragraph.paragraph,
                paragraph_visible=paragraph.paragraph_visible,
                title_paragraph=paragraph.title_paragraph,
                bold_paragraph=paragraph.bold_paragraph,
                head_sentence_group_id=None,
                tail_sentence_group_id=None,
                is_impression=paragraph.is_impression,
                is_additional=paragraph.is_additional,
                str_after=paragraph.str_after,
                str_before=paragraph.str_before,
                is_active=paragraph.is_active
            )
            for hs in head_sentences:
                new_hs, _ = HeadSentence.create(
                    user_id=current_user.id,
                    report_type_id=report_type_id,
                    sentence=hs["sentence"],
                    related_id=new_paragraph.id,
                    sentence_index=hs["sentence_index"],
                    tags=hs["tags"],
                    comment=hs["comment"]
                )
                if hs["body_sentence_group_id"]:
                    logger.info(f"(!!!!!!!!!!!!!!!!!!!!!) –£ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ body –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. ID –≥—Ä—É–ø–ø—ã: {hs['body_sentence_group_id']}")
                    body_sentences = BodySentenceGroup.get_group_sentences(hs["body_sentence_group_id"])
                    logger.info(f"(!!!!!!!!!!!!!!!!!!!!!) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ: {len(body_sentences)} –∏ –Ω–∏–∂–µ –æ–Ω–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã: {body_sentences[:deep_limit]}")
                    for bs in body_sentences[:deep_limit]: 
                        logger.info(f"(!!!!!!!!!!!!!!!!!!!!!!) —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–º–µ–µ—Ç ID: {hs['id']}")
                        BodySentence.create(
                            user_id=current_user.id,
                            report_type_id=report_type_id,
                            sentence=bs["sentence"],
                            related_id=new_hs.id,
                            sentence_weight=bs["sentence_weight"],
                            tags=bs["tags"],
                            comment=bs["comment"]
                        )
            if paragraph.tail_sentence_group_id:
                tail_sentences = TailSentenceGroup.get_group_sentences(paragraph.tail_sentence_group_id)
                for ts in tail_sentences[:deep_limit]:
                    TailSentence.create(
                        user_id=current_user.id,
                        report_type_id=report_type_id,
                        sentence=ts["sentence"],
                        related_id=new_paragraph.id,
                        sentence_weight=ts["sentence_weight"],
                        tags=ts["tags"],
                        comment=ts["comment"]
                    )
                    logger.info(f"(!!!!!!!!!!!!!!!!!!!!!) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ: {len(tail_sentences)} –∏ –Ω–∏–∂–µ –æ–Ω–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã: {tail_sentences[:deep_limit]}")

        logger.info("(–ú–∞—Ä—à—Ä—É—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ —Ä–∞—Å—à–∞—Ä–µ–Ω–Ω–æ–≥–æ) ‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        shared_record.delete()  
        return jsonify({"status": "success", "message": "–ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", "report_id": new_report.id}), 200

    except Exception as e:
        logger.error(f"(create_report_from_shared_route) ‚ùå –û—à–∏–±–∫–∞: {e}")
        return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª"}), 500
    


@new_report_creation_bp.route('/ai_generate_template', methods=['POST'])
@auth_required()
def ai_generate_template():
    logger.info("(–ú–∞—Ä—à—Ä—É—Ç: ai_generate_template) üöÄ –ù–∞—á–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é AI")
    data = request.get_json()
    if not data:
        return jsonify({"status": "error", "message": "–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞"}), 400
    template_text = data.get('origin_text', '')
    template_name = data.get('template_name', '').strip()
    template_type = data.get('template_type', '')
    template_subtype = data.get('template_subtype', '')
    
    user_id = current_user.id if current_user.is_authenticated else None
    

    if not all([template_name, template_type, template_subtype]):
        return jsonify({"status": "error", "message": "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"}), 400

    assistant_id = os.getenv("OPENAI_ASSISTANT_TEMPLATE_MAKER")
    text = f"""

    The text of the radiology report: {template_text}
    The imaging modality: {template_type}
    The anatomical area: {template_subtype}
    The report title: {template_name}
    """
    try:
        task = template_generating.delay(template_data=text, user_id=user_id, assistant_id=assistant_id)
        logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç: ai_generate_template) ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞.")
        return jsonify({"status": "success", "message": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞.", "task_id": task.id}), 200
    except Exception as e:
        logger.error(f"(–ú–∞—Ä—à—Ä—É—Ç: ai_generate_template) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞."}), 500
