# openai_api.py

from flask import request, jsonify, current_app, Blueprint, render_template, g
from flask_security.decorators import auth_required, roles_required
from sentence_processing import convert_template_json_to_text
from logger import logger
from flask_security import current_user
from app.utils.redis_client import redis_get, redis_set, redis_delete
from tasks.celery_tasks import async_clean_raw_text
from app.utils.ai_processing import _process_openai_request, reset_ai_session, count_tokens

openai_api_bp = Blueprint("openai_api", __name__)


# Routs

@openai_api_bp.route("/start_openai_api", methods=["POST", "GET"])
@auth_required()
def start_openai_api():
    return render_template(
        "openai_api.html",
        title="GPT",
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–µ–¥–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ GENERAL
@openai_api_bp.route("/generate_general", methods=['POST'])
@auth_required()
def generate_general():
    logger.info("(–ú–∞—Ä—à—Ä—É—Ç generate_general) --------------------------------------")
    logger.info("üöÄ –ù–∞—á–∞—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI API.")
    
    data = request.get_json()
    text = data.get("text")
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
    new_conversation = data.get("new_conversation", True)
    ai_assistant = current_app.config.get("OPENAI_ASSISTANT_GENERAL")
    ai_model = "gpt-4o"
    tokens = count_tokens(text, ai_model)
    if not text:
        return jsonify({"status": "error", "message": "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π."}), 400
    if not ai_assistant:
        return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É."}), 500
    if tokens > 4000:
        return jsonify({"status": "error", "message": f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π - { tokens } —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –µ–≥–æ."}), 400
    
    if new_conversation:
        reset_ai_session(ai_assistant, user_id=current_user.id)
    message = _process_openai_request(text, ai_assistant, user_id=current_user.id)
    if message:
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.debug(f"–û—Ç–≤–µ—Ç: {message}")
        logger.info("---------------------------------------------------")
        return jsonify({"status": "success", "data": message}), 200
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
        logger.info("---------------------------------------------------")
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."}), 500


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É REDACTOR
@openai_api_bp.route("/generate_redactor", methods=['POST'])
@auth_required()
def generate_redactor():
    logger.info("(–ú–∞—Ä—à—Ä—É—Ç generate_redactor) --------------------------------------")
    logger.info("üöÄ –ù–∞—á–∞—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI API.")
    data = request.get_json()
    text = data.get("text")
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
    ai_assistant = current_app.config.get("OPENAI_ASSISTANT_REDACTOR")
    if not text:
        return jsonify({"status": "error", "message": "Your request is empty"}), 400
    if not ai_assistant:
        return jsonify({"status": "error", "message": "Assistant ID is not configured."}), 500
    try:
        reset_ai_session(ai_assistant, user_id=current_user.id)
        message = _process_openai_request(text, ai_assistant, user_id=current_user.id)
        if not message:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
            logger.info("---------------------------------------------------")
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."}), 500
        logger.info("‚úÖ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"–û—Ç–≤–µ—Ç: {message}")
        logger.info("---------------------------------------------------")
        return jsonify({"status": "success", "data": message}), 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {str(e)}")
        logger.info("---------------------------------------------------")
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."}), 500
     
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è (–æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ä–∞–∑–Ω—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏)
@openai_api_bp.route("/generate_impression", methods=['POST'])
@auth_required()
def generate_impression():
    logger.info("(–ú–∞—Ä—à—Ä—É—Ç generate_impression) --------------------------------------")
    logger.info("üöÄ –ù–∞—á–∞—Ç–∞ –ø–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI API.")

    user_id = current_user.id if current_user.is_authenticated else None
    
    try:
        data = request.get_json()
        text = data.get("text")
        modality = data.get("modality")
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        if not text:
            return jsonify({"status": "error", "message": "Your request is empty"}), 400
        if not modality:
            return jsonify({"status": "error", "message": "Modality is missing"}), 400

        file_key = f"user:{user_id}:impression_file_id:{modality}"
        file_id = redis_get(file_key)
        if not file_id:
            logger.error({f"No impression file ID found in Redis for modality: {modality}"}), 400

        # –ü–æ–ª—É—á–µ–Ω–∏–µ assistant_id –ø–æ modality
        if modality == "MRI":
            assistant_id = current_app.config.get("OPENAI_ASSISTANT_MRI")
        elif modality == "CT":
            assistant_id = current_app.config.get("OPENAI_ASSISTANT_CT")
        elif modality == "XRAY":
            assistant_id = current_app.config.get("OPENAI_ASSISTANT_XRAY")
        else:
            return jsonify({"status": "error", "message": f"Unknown modality: {modality}"}), 400

        if not assistant_id:
            return jsonify({"status": "error", "message": "Assistant ID is not configured."}), 500

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        reset_ai_session(assistant_id, user_id=user_id)
        assistant_reply = _process_openai_request(text, assistant_id, user_id=user_id, file_id=file_id)

        logger.info("‚úÖ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.debug(f"–û—Ç–≤–µ—Ç: {assistant_reply}")
        logger.info("---------------------------------------------------")
        return jsonify({"status": "success", "data": assistant_reply}), 200

    except Exception as e:
        logger.exception(f"‚ùå Unexpected error: {str(e)}")
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: error {e}" }), 500


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–ª—å–∑—É—é –≤ new_report_creation –∏ –≤ analyze_dinamics 
@openai_api_bp.route("/clean_raw_text", methods=['POST'])
@auth_required()
def clean_raw_text_route():
    logger.info("(–ú–∞—Ä—à—Ä—É—Ç clean_raw_text_route) --------------------------------------")
    logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç clean_raw_text_route) üöÄ –ù–∞—á–∞—Ç–∞ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI API.")
    data = request.get_json()
    raw_text = data.get("raw_text", "")
    user_id = current_user.id
    if not raw_text.strip():
        logger.error(f"(–ú–∞—Ä—à—Ä—É—Ç clean_raw_text_route) ‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        return jsonify({"status": "error", "message": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–∫—Å—Ç"}), 400
    try:
        assistant_id=current_app.config.get("OPENAI_ASSISTANT_TEXT_CLEANER")
        print(f"Assistant ID: {assistant_id}")
        task = async_clean_raw_text.delay(raw_text, user_id, assistant_id)
        logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç clean_raw_text_route) ‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –≤ Celery –∑–∞–¥–∞—á—É")
        logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç clean_raw_text_route) ------------------------------------------")
        return jsonify({"status": "success", "message": "–ó–∞–ø—É—â–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞", "data": task.id}), 200
    except Exception as e:
        logger.error(f"(–ú–∞—Ä—à—Ä—É—Ç clean_raw_text_route) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        logger.info("---------------------------------------------------")
        return jsonify({"status": "error", "message": str(e)}), 500



@openai_api_bp.route("/ocr_extract_text", methods=["POST"])
@auth_required()
def ocr_extract_text():
    logger.info(f"(–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞) ------------------------------------")
    logger.info(f"(–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞) üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    try:
        file = request.files.get("file")
        if not file:
            logger.error(f"(–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞) ‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return jsonify({"status": "error", "message": "No file uploaded"}), 400
        from file_processing import extract_text_from_uploaded_file
        text, error = extract_text_from_uploaded_file(file)
        if error:
            # –ï—Å–ª–∏ pdf ‚Äî –æ—Ç–¥–∞—Ç—å –∫–æ–¥ 200, –Ω–æ —Å–æ–æ–±—â–∏—Ç—å —á—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            if "PDF files are not supported" in error:
                logger.info(f"(–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞) üìÑ PDF —Ñ–∞–π–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                return jsonify({"status": "success", "text": "", "message": error}), 200
            logger.error(f"(–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {error}")
            return jsonify({"status": "error", "message": error}), 400
        logger.info(f"(–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞) ‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω")
        return jsonify({"status": "success", "text": text}), 200
    except Exception as e:
        logger.error(f"(–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500
    
    

