# profile_settings.py

from flask import Blueprint, render_template, request, redirect, url_for, current_app, session, jsonify
import json
from flask_login import current_user
from app.models.models import User, UserProfile, db, AppConfig, ReportShare, ReportCategory, Report
from flask_security.decorators import auth_required
from app.utils.file_processing import sync_profile_files
from app.utils.db_processing import sync_modalities_from_db
from app.utils.logger import logger
from app.utils.redis_client import invalidate_user_settings_cache, invalidate_profiles_cache
from app.utils.profile_constructor import ProfileSettingsManager

profile_settings_bp = Blueprint('profile_settings', __name__)

# Functions

def set_profile_settings(profile_id, settings):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    for key, value in settings.items():
        if not AppConfig.set_setting(profile_id, key, value):
            return False  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥
    return True


def set_profile_as_default(profile_id):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.info(f"set_profile_as_default started and profile_id = {profile_id}")
    user_profiles = UserProfile.get_user_profiles(current_user.id)
    if not user_profiles:
        return False
    try:
        for profile in user_profiles:
            if profile.id == int(profile_id):
                profile.default_profile = True
                logger.info(f"set profile {profile.id} as default")
            else:
                logger.info(f"set profile {profile.id} as NOT default")
                profile.default_profile = False
            profile.save()
    except Exception as e:
        logger.error(f"set_profile_as_default error {e}")
        return False
    logger.info(f"set_profile_as_default end work successfull")
    return True
    
    

# Routes

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è 
@profile_settings_bp.route("/profile_settings", methods=["GET"])
@auth_required()
def profile_settings():
    logger.info(f"(route 'profile_settings') --------------------------------------")
    logger.info(f"(route 'profile_settings') üöÄ Profile settings started")
    profile_id = session.get("profile_id")

    profile = UserProfile.query.filter_by(id=profile_id, user_id=current_user.id).first()
    if not profile:
        logger.error(f"(route 'profile_settings') ‚ùå Profile not found for user {current_user.id}")
        return redirect(url_for('main.index'))
    profile_data = profile.get_profile_data()
    logger.debug(f"(route 'profile_settings') Profile data: {profile_data}")
    
    if not profile_data:
        logger.error(f"(route 'profile_settings') ‚ùå Profile not found")
        return redirect(url_for('main.index'))

    categories = ProfileSettingsManager.load_profile_settings(profile_id).get("CATEGORIES_SETUP", [])
    try:
        global_categories = ReportCategory.get_categories_tree(is_global=True)
        if categories and global_categories:
            logger.info(f"(route 'profile_settings') ‚úÖ Categories loaded: {categories}")
        else:
            logger.warning(f"(route 'profile_settings') ‚ö†Ô∏è No categories or global categories found")
    except Exception as e:
        logger.error(f"(route 'profile_settings') ‚ùå Error parsing categories JSON: {e}")
        categories = []
    
    logger.info(f"(route 'profile_settings') ‚úÖ Profile settings loaded")
    logger.info(f"(route 'profile_settings') -----------------------------")
    return render_template('profile_settings.html', 
                            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", 
                            profile=profile_data,
                            categories=categories,
                            global_categories=global_categories,
                            )
    
        


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
@profile_settings_bp.route("/choosing_profile", methods=["GET"])
@auth_required()
def choosing_profile():
   
    profile_id = request.args.get("profile_id") or None
    logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç 'choosing_profile') –ü–æ–ª—É—á–µ–Ω id –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ url: {profile_id}")
    if profile_id:
        logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç 'choosing_profile') –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ id –∏–∑ url")
        profile = UserProfile.find_by_id_and_user(profile_id, current_user.id)
        print(f"Profile = {profile}")
        if profile:
            session["profile_id"] = profile.id
            session["profile_name"] = profile.profile_name
            session["lang"] = AppConfig.get_setting(profile.id, "APP_LANGUAGE", "default_language")
            user_id = current_user.id
            user_email = current_user.email
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—é –∑–¥–µ—Å—å, –Ω–æ –µ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏
            sync_profile_files(profile.id, user_id, user_email)
            logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç 'choosing_profile') –ü—Ä–æ—Ñ–∏–ª—å {profile.id} –≤—ã–±—Ä–∞–Ω")
            logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç 'choosing_profile') ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return redirect(url_for("working_with_reports.choosing_report"))
        else:
            logger.error(f"(–ú–∞—Ä—à—Ä—É—Ç 'choosing_profile') ‚ùå –ü—Ä–æ—Ñ–∏–ª—å {profile_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É")
            return render_template(url_for("error"),
                           title="–î–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã"
                           )
    

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (—ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, 
# –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç) –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ before_request_handlers.py –∏ –∏–∑ –ø–æ–ø–∞–ø–∞ –≤ header
@profile_settings_bp.route("/new_profile_creation", methods=["GET"])
@auth_required()
def new_profile_creation():
    logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç 'new_profile_creation') --------------------------------------")
    logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç 'new_profile_creation') üöÄ –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
    existing_user_profile_id = request.args.get("profile_id") or None
    existing_user_profile = UserProfile.find_by_id_and_user(existing_user_profile_id, current_user.id) if existing_user_profile_id else None
    title = "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"
    if existing_user_profile:
        title = f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {existing_user_profile.profile_name}"
        logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç 'new_profile_creation') –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å {existing_user_profile.profile_name} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
    user_profile_ids = [p.id for p in UserProfile.get_user_profiles(current_user.id)]
    modalities = []
    if len(user_profile_ids) == 0:
        logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç 'new_profile_creation') –≠—Ç–æ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}, –æ–Ω –±—É–¥–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        is_default = True  # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤—Å–µ–≥–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    else:
        is_default = False
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (is_global=True)
    modalities += ReportCategory.get_categories_tree(is_global=True)
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ  –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–ø–æ –≤—Å–µ–º –ø—Ä–æ—Ñ–∏–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    for pid in user_profile_ids:
        user_modalities = ReportCategory.get_categories_tree(profile_id=pid, is_global=False)
        for user_modality in user_modalities:
            if user_modality.get("name") not in [m.get("name") for m in modalities]:
                logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç 'new_profile_creation') –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å {user_modality.get('name')} –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è {pid}")
                modalities.append(user_modality)
    print(f"modalities = {modalities}")
    return render_template("new_profile_creation.html",
                           title=title,
                           modalities=modalities,
                           user_profile=existing_user_profile,
                            is_default=is_default
                           )


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (—ç—Ç–æ —É–∂–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã)
@profile_settings_bp.route("/create_profile", methods=["POST"])
@auth_required()
def create_profile():
    logger.info(f"(–ú–∞—Ä—à—Ä—É—Ç 'create_profile') üöÄ –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
    data = request.get_json()
    if not data:
        logger.error(f"(–ú–∞—Ä—à—Ä—É—Ç 'create_profile') ‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
        return jsonify({"status": "error", "message": "–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"}), 400

    profile_name = data.get('profile_name')
    description = data.get('description')
    is_default = data.get('is_default')
    modalities = data.get('modalities', [])
    areas = data.get('areas', {})
    existing_profile_id = data.get('existing_profile_id', None)

    if not profile_name:
        logger.error(f"(route 'create_profile') ‚ùå Profile name is required.")
        return jsonify({"status": "error", "message": "Profile name is required."}), 400

    logger.info(f"(route 'create_profile') Profile name: {profile_name}")
    profile = None
    other_profiles = UserProfile.get_user_profiles(current_user.id)
    if any(p.profile_name == profile_name for p in other_profiles):
        logger.error(f"(route 'create_profile') ‚ùå Profile name '{profile_name}' already exists for this user.")
        return jsonify({"status": "error", "message": f"Profile name '{profile_name}' already exists for this user."}), 400
    if not other_profiles:
        is_default = True  # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤—Å–µ–≥–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.info(f"(route 'create_profile') This is the first profile for user {current_user.id}, setting as default.")
    if existing_profile_id:
        try:
            logger.info(f"(route 'create_profile') –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±–∞–∑—ã –ø–æ id: {existing_profile_id}")
            profile = UserProfile.find_by_id_and_user(existing_profile_id, current_user.id)
        except Exception as e:
            logger.error(f"(route 'create_profile') ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±–∞–∑—ã: {str(e)}")
            return jsonify({"status": "error", "message": str(e)}), 400
    else:
        logger.info(f"(route 'create_profile') –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user.id}")
        try:
            profile = UserProfile.create(
                current_user.id,
                profile_name,
                description,
                default_profile=is_default
            )
        except Exception as e:
            logger.error(f"(route 'create_profile') ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
            return jsonify({"status": "error", "message": str(e)}), 400

    try:
        # --- –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è ---
        logger.info(f"(route 'create_profile') –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –æ–±–ª–∞—Å—Ç–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å {profile.profile_name}")
        for modality_id in modalities:
            selected_modality = ReportCategory.query.get(int(modality_id))
            if not selected_modality:
                logger.warning(f"(route 'create_profile') –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å —Å id={modality_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                continue
            global_modality = None
            if selected_modality.is_global:
                global_modality = selected_modality
                logger.info(f"(route 'create_profile') –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å {selected_modality.name} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
            else:
                global_modality = ReportCategory.query.get(int(selected_modality.global_id)) if selected_modality.global_id else None
                logger.info(f"(route 'create_profile') –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å {global_modality.name} –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–∞—è, –∏—â–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ –µ–µ global_id: {global_modality.global_id}")
            
            modality_cat = ReportCategory.add_category(
                name=selected_modality.name,
                parent_id=None,
                profile_id=profile.id,
                is_global=False,
                level=1,
                global_id=global_modality.id 
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏
            area_ids = areas.get(str(modality_id), [])
            for area_id in area_ids:
                # child-–æ–±–ª–∞—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –¥–µ—Ç–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏
                child_area = next((child for child in selected_modality.children if str(child.id) == str(area_id)), None)
                if not child_area:
                    logger.warning(f"(route 'create_profile') –û–±–ª–∞—Å—Ç—å id={area_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ id={modality_id}.")
                    continue
                global_area = None
                if child_area.is_global:
                    global_area = child_area
                    logger.info(f"(route 'create_profile') –û–±–ª–∞—Å—Ç—å {child_area.name} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                else:
                    global_area = ReportCategory.query.get(int(child_area.global_id)) if child_area.global_id else None
                    logger.info(f"(route 'create_profile') –û–±–ª–∞—Å—Ç—å {child_area.name} –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–∞—è, –∏—â–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –ø–æ –µ–µ global_id: {child_area.global_id}")
                area_cat = ReportCategory.add_category(
                    name=child_area.name,
                    parent_id=modality_cat.id,
                    profile_id=profile.id,
                    is_global=False,
                    level=2,
                    global_id=global_area.id 
                )

        logger.info(f"(route 'create_profile') Profile {profile.id} created and {len(modalities)} modalities with their areas added successfully")
        try:
            default_settings = dict(current_app.config.get("DEFAULT_PROFILE_SETTINGS", {}))
            save_settings = set_profile_settings(profile.id, default_settings)
            if not save_settings:
                logger.error(f"(route 'create_profile') ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è {profile.id}")
                return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"}), 400
            success = sync_modalities_from_db(profile.id)
            if not success:
                logger.error(f"(route 'create_profile') ‚ùå Error syncing modalities for profile {profile.id}")
            session["profile_id"] = profile.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–µ—Å—Å–∏–∏
            session["profile_name"] = profile.profile_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–µ—Å—Å–∏–∏
        except Exception as e:
            logger.error(f"(route 'create_profile') ‚ùå Error adding settings for this profile: {str(e)}")
            return jsonify({"status": "error", "message": str(e)}), 400

        invalidate_profiles_cache(current_user.id)  # —Å—Ç–∏—Ä–∞—é –∫—ç—à –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ redis
        logger.info(f"(route 'create_profile') ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile.profile_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        return jsonify({"status": "success", "message": f"–ü—Ä–æ—Ñ–∏–ª—å {profile.profile_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", "data": profile.id}), 200

    except Exception as e:
        logger.error(f"(route 'create_profile') ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –æ–±–ª–∞—Å—Ç–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 400
        
    
    
# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@profile_settings_bp.route('/update_profile_settings', methods=['POST'])
@auth_required()
def update_profile_settings():
    logger.info(f"(route 'update_profile_settings') --------------------------------------")
    logger.info(f"(route 'update_profile_settings') üöÄ Profile settings update started")
    
    data = request.get_json()
    profile_id = data.get("profile_id")
    new_name = data.get("profile_name")
    new_description = data.get("description")
    is_default = data.get("is_default")
    username = data.get("username")
    
    profile = UserProfile.find_by_id_and_user(profile_id, current_user.id)
    
    if profile:
        current_user.username = username
        current_user.save()
        profile.profile_name = new_name
        profile.description = new_description
        profile.save()
        if is_default:
            set_default = set_profile_as_default(profile_id)
            if not set_default:
                logger.error(f"(route 'update_profile_settings') ‚ùå Error setting profile {profile_id} as default")
                notification_message = ["–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"]
                return jsonify({"status": "succuss","notifications": notification_message, "message": "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ"}), 400
        
        invalidate_profiles_cache(current_user.id)  # —Å—Ç–∏—Ä–∞—é –∫—ç—à –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ redis
        return jsonify({"status": "success", "message": "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"}), 200
    else:
        return jsonify({"status": "error", "message": "Profile not found or you do not have permission to update it."}), 400



# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@profile_settings_bp.route('/delete_profile/<int:profile_id>', methods=["DELETE"])
@auth_required()
def delete_profile(profile_id):
    print("deleting profile started--------")
    print(f"you are deleting profile and profile_id = {profile_id}")
    profile = UserProfile.find_by_id_and_user(profile_id, current_user.id)
    if profile:
        try:
            profile.delete()
            print(f"profile {profile_id} deleted")
        except Exception as e:
            return jsonify({"status": "error", "message": str(e)}), 400
        
        session.pop("profile_id", None)
        session.pop("profiles", None)
        invalidate_profiles_cache(current_user.id)  # —Å—Ç–∏—Ä–∞—é –∫—ç—à –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ redis
        return jsonify({"status": "success", "message": "Profile deleted successfully!"}), 200
    else:
        return jsonify({"status": "error", "message": "Profile not found or you do not have permission to delete it."}), 400


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@profile_settings_bp.route("/update_settings", methods=["POST"])
@auth_required()
def save_settings():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ AppConfig.
    """
    settings = request.json  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    profile_id = session.get("profile_id")

    if not profile_id:
        return jsonify({"status": "error", "message": "Profile not selected"}), 400

    save_settings = set_profile_settings(profile_id, settings)
    if not save_settings:
        return jsonify({"status": "error", "message": "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"}), 400
    invalidate_user_settings_cache(current_user.id)  # —Å—Ç–∏—Ä–∞—é –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ redis
    return jsonify({"status": "success", "message": "Settings saved successfully!"})


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@profile_settings_bp.route("/set_default_profile/<int:profile_id>", methods=["POST"])
@auth_required()
def set_default_profile(profile_id):
    if not profile_id:
        return jsonify({"status": "error", "message": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω"}), 400
    set_default = set_profile_as_default(profile_id)
    if not set_default:
        return jsonify({"status": "error", "message": "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"}), 400
    invalidate_profiles_cache(current_user.id)  # —Å—Ç–∏—Ä–∞—é –∫—ç—à –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑
    return jsonify({"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π"}), 200



# –ú–∞—Ä—à—Ä—É—Ç —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Å–µ–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
@profile_settings_bp.route("/share_profile", methods=["POST"])
@auth_required()
def share_profile():
    """
    –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    logger.info(f"(route 'share_profile') --------------------------------------")
    logger.info(f"(route 'share_profile') üöÄ Sharing all reports of this profile started")
    data = request.get_json()
    
    email = data.get("email")
    logger.info(f"(route 'share_profile') Recipient email: {email}")
    
    recipient = User.find_by_email(email)
    if not recipient:
        logger.error(f"(route 'share_profile') ‚ùå User with this email not found")
        return jsonify({"status": "error", "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º email –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 400
    logger.info(f"(route 'share_profile') Recipient found: {recipient.email}")
    
    try:
        user_id = current_user.id
        profile_id = session.get("profile_id")
        all_reports = Report.find_by_profile(profile_id, user_id)
    except Exception as e:
        logger.error(f"(route 'share_profile') ‚ùå Error getting current user or current profile: {e}")
        return jsonify({"status": "error", "message": "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫–æ—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"}), 400
    
    logger.info(f"(route 'share_profile') ‚úÖ Got all necessary data. Starting sharing...")
    
    try:
        for report in all_reports:
            try:
                ReportShare.create(report.id, user_id, recipient.id)
            except Exception as e:
                logger.error(f"(route 'share_profile') ‚ùå Error sharing report {report.report_name}: {e}. Skipping...")
                continue
        logger.info(f"(route 'share_profile') ‚úÖ All reports shared successfully")
        return jsonify({"status": "success", "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–µ–ª–µ–Ω"}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 400



# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@profile_settings_bp.route("/category_update", methods=["POST"])
@auth_required()
def category_update():
    logger.info(f"(route 'category_update') --------------------------------------")
    logger.info(f"(route 'category_update') üöÄ Category update started")
    data = request.get_json()
    category_id = data.get("id")
    new_name = data.get("name")
    global_id = data.get("global_id")
    profile_id = session.get("profile_id")

    category = ReportCategory.query.filter_by(id=category_id).first()
    if not category:
        logger.error(f"Category {category_id} not found or you do not have permission to update it.")
        return jsonify({"status": "error", "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."}), 400

    try:
        category.name = new_name
        category.global_id = global_id if global_id else None
        db.session.add(category)
        db.session.commit()
        logger.info(f"Category {category_id} updated successfully with new name: {new_name} and global_id: {global_id}")
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ AppConfig c ReportCategory
        success = sync_modalities_from_db(profile_id)
        invalidate_user_settings_cache(current_user.id)  # —Å—Ç–∏—Ä–∞—é –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ redis
        if not success:
            logger.error(f"Error syncing modalities from DB after updating category {category_id}")
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}), 500
        return jsonify({"status": "success", "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"}), 200
    except Exception as e:
        logger.error(f"Error updating category {category_id}: {e}")
        return jsonify({"status": "error", "message": str(e)}), 400
    
    
# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@profile_settings_bp.route("/category_delete", methods=["POST"])
@auth_required()
def category_delete():
    logger.info(f"(route 'category_delete') --------------------------------------")
    logger.info(f"(route 'category_delete') üöÄ Category deletion started")
    data = request.get_json()
    category_id = data.get("id")
    profile_id = session.get("profile_id")

    category = ReportCategory.query.filter_by(id=category_id).first()
    if not category:
        logger.error(f"Category {category_id} not found or you do not have permission to delete it.")
        return jsonify({"status": "error", "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –µ–µ —É–¥–∞–ª–µ–Ω–∏–µ."}), 400

    try:
        db.session.delete(category)
        db.session.commit()
        logger.info(f"Category {category_id} deleted successfully")
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ AppConfig c ReportCategory
        success = sync_modalities_from_db(profile_id)
        invalidate_user_settings_cache(current_user.id)  # —Å—Ç–∏—Ä–∞—é –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ redis
        if not success:
            logger.error(f"Error syncing modalities from DB after updating category {category_id}")
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}), 500
        return jsonify({"status": "success", "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"}), 200
    except Exception as e:
        logger.error(f"Error deleting category {category_id}: {e}")
        return jsonify({"status": "error", "message": str(e)}), 400


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@profile_settings_bp.route('/category_create', methods=['POST'])
@auth_required()
def category_create():
    logger.info(f"(route 'category_create') --------------------------------------")
    logger.info(f"(route 'category_create') üöÄ Category creation started")
    data = request.get_json()
    name = data.get('name')
    global_id = data.get('global_id', None)  # global_id –º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    level = data.get('level')
    parent_id = data.get('parent_id', None)  # parent_id –º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏
    profile_id = session.get("profile_id")

    if not name or level not in [1, 2]:
        logger.error(f"(route 'category_create') ‚ùå Invalid data: name='{name}', level='{level}'")
        return jsonify({"status": "error", "message": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–Ω —É—Ä–æ–≤–µ–Ω—å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}), 400
    try:
        # –î–ª—è –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ parent_id=None, –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        cat = ReportCategory.add_category(
            name=name,
            parent_id=parent_id,
            profile_id=profile_id,
            is_global=False,
            level=level,
            global_id=global_id
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–¥–∞—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –≤ –¥–µ—Ä–µ–≤–µ
        resp = {
            "id": cat.id,
            "name": cat.name,
            "global_id": cat.global_id,
            "global_name": cat.global_category.name if cat.global_category else None,
            "children": []
        }
        if cat:
            logger.info(f"(route 'category_create') ‚úÖ Category {cat.id} created successfully with name: {name} and global_id: {global_id}")
            invalidate_user_settings_cache(current_user.id)  # —Å—Ç–∏—Ä–∞—é –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ redis
            success = sync_modalities_from_db(profile_id)
            if not success:
                logger.error(f"(route 'category_create') ‚ùå Error syncing modalities from DB after creating category {cat.id}")
                return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}), 500
        return jsonify(status="success", message="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞", category=resp)
    except Exception as e:
        logger.error(f"(route 'category_create') ‚ùå Error creating category: {e}")
        return jsonify(status="error", message=str(e)), 400


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î
@profile_settings_bp.route("/rebuild_modalities_from_db", methods=["POST"])
@auth_required()
def rebuild_modalities_from_db():
    """
    –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    logger.info(f"(route 'rebuild_modalities_from_db') üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏–∑ –ë–î")

    profile_id = session.get("profile_id")
    if not profile_id:
        logger.error(f"(route 'rebuild_modalities_from_db') ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return jsonify({"status": "error", "message": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω"}), 400
    
    success = sync_modalities_from_db(profile_id)
    invalidate_user_settings_cache(current_user.id)  # —Å—Ç–∏—Ä–∞—é –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ redis
    if not success:
        logger.error(f"(route 'rebuild_modalities_from_db') ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–µ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏–∑ –ë–î")
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–µ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏–∑ –ë–î"}), 500

    return jsonify({"status": "success", "message": "–ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã"}), 200
