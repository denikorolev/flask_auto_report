// working_with_report.js


// –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—é–¥–∞ –∏ –ª–æ–≥–∏–∫—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ —Ä–∞–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
document.addEventListener("DOMContentLoaded", function() {

    let activeSentence = null;  // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const popupList = document.getElementById("popupList");  // –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ PopUp
    const exportButton = document.getElementById("exportButton"); // –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–Ω–æ–ø–∫–µ "–≠–∫—Å–ø–æ—Ä—Ç –≤ Word"
    const copyButton = document.getElementById("copyButton"); // –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–Ω–æ–ø–∫–µ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"
    const nextReportButton = document.getElementById("nextPatientButton"); // –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–Ω–æ–ø–∫–µ "–°–ª–µ–¥—É—é—â–∏–π –ø–∞—Ü–∏–µ–Ω—Ç"
    const editButton = document.getElementById("editFormButton"); // –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–Ω–æ–ø–∫–µ Edit Form
    const addReportButton = document.getElementById("addReportButton"); // –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–Ω–æ–ø–∫–µ Add Report
    const generateButton = document.getElementById("generateImpression"); // –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–Ω–æ–ø–∫–µ Generate Impression
    const boxForAiResponse = document.getElementById("aiResponse");     // –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–ª–æ–∫—É —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç AI
    const addImpressionButton = document.getElementById("addImpressionToReportButton"); // –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∫–Ω–æ–ø–∫–µ "–í—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ"
    
    linkSentences(); // –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
    
    updateCoreAndImpessionParagraphText(); // –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    sentenceDoubleClickHandle () // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏–∫—É –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ

    addSentenceButtonLogic(); // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏–∫—É –∫–Ω–æ–ø–∫–∏ "+"


    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç –≤ Word –∏ –ø—Ä–∏ –µ–µ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –¥–∞–Ω–Ω—ã–º —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    if (exportButton) {
        wordButtonLogic(exportButton);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç" –∏ –ø—Ä–∏ –µ–µ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
    if (copyButton) {
        copyButtonLogic(copyButton);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –ø–∞—Ü–∏–µ–Ω—Ç –∏ –ø—Ä–∏ –µ–µ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –Ω–æ–º–µ—Ä–∞ –æ—Ç—á–µ—Ç–∞"
    if (nextReportButton) {
        nextButtonLogic(nextReportButton);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "Edit Form" –∏ –ø—Ä–∏ –µ–µ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ä–º—ã
    if (editButton) {
        editButtonLogic(editButton);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "Add Report" –∏ –ø—Ä–∏ –µ–µ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if (addReportButton) {
        addReportButtonLogic(addReportButton);
    }

    if (generateButton) {
        generateImpressionLogic(generateButton, boxForAiResponse);
    }

    if (addImpressionButton) {
        addImpressionButtonLogic(addImpressionButton);
    }

    addFocusListeners(); // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
});





/**
 * Extracts the maximum number from the protocol number and increments it by 1 used in working with report.
 * 
 * @param {string} reportNumber - The report number in format "XXXX-XXXX".
 * @returns {number} - The incremented report number.
 */
function getMaxReportNumber(reportNumber) {
    // Split the string by the "-" character
    const parts = reportNumber.split('-');

    if (parts.length < 2) {
        // If there's no "-", simply convert the string to a number and return
        return parseInt(reportNumber, 10) + 1;
    }

    // Get the right part (the last number)
    const rightPart = parts[parts.length - 1];

    // Get the left part (everything except the last part)
    let leftPart = parts.slice(0, parts.length - 1).join('-');

    // Determine the number of digits in the right part
    const numDigitsInRightPart = rightPart.length;

    // Replace the last characters of the left part with the right part
    const newLeftPart = leftPart.slice(0, -numDigitsInRightPart) + rightPart;

    // Convert the result to a number and add 1
    return parseInt(newLeftPart, 10) + 1;
}


/**
 * Handles the focus event for a sentence element.
 * Saves the original text in a data attribute.
 */
function handleSentenceFocus() {
    if (!this.hasAttribute("data-original-text")) {
        this.setAttribute("data-original-text", this.textContent.trim());
    }
}



/**
 * Handles the blur event for a sentence element.
 * Checks for changes and marks the sentence as modified if needed.
 */
function handleSentenceBlur() {
    const originalText = this.getAttribute("data-original-text");
    const currentText = this.textContent.trim();
    const linkedSentences = this.linkedSentences || [];
    // const paragraphId = this.dataset.paragraphId;

    // –ë–ª–æ–∫ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
    if (!currentText) {return;}
    if (normalizeSentence(originalText, keyWordsGroups) === normalizeSentence(currentText, keyWordsGroups)) {return;}
    const isDuplicate = linkedSentences.some(sentence =>
        normalizeSentence(sentence.sentence, keyWordsGroups) === normalizeSentence(currentText, keyWordsGroups)
    );
    if (isDuplicate) {return;}

    
    this.textContent = firstGrammaSentence(currentText);
    highlightKeyWords(this);
    this.setAttribute("data-modified", "true");
    this.classList.add("was-changed-highlighted-sentence");
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±–µ—Ä–Ω—É—Ç—ã–π –≤ <span>.
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π `focus` –∏ `blur`.
 * 
 * üîπ –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.  
 * üîπ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–±–∑–∞—Ü—É —á–µ—Ä–µ–∑ `data-paragraph-id`.  
 * üîπ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (`data-index`) –≤ `0` –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.  
 * üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è `focus` –∏ `blur`.  
 * 
 * @param {string} sentenceText - –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —ç–ª–µ–º–µ–Ω—Ç.
 * @param {string} paragraphId - ID –∞–±–∑–∞—Ü–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
 * @returns {HTMLElement} - –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç <span>, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
 */
function createEditableSentenceElement(sentenceText, paragraphId) {
    const newSentenceElement = document.createElement("span");
    newSentenceElement.classList.add("report__sentence"); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    newSentenceElement.dataset.paragraphId = paragraphId; // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–±–∑–∞—Ü—É
    newSentenceElement.dataset.index = "0"; // –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å 0
    newSentenceElement.textContent = sentenceText; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

    // –î–µ–ª–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
    newSentenceElement.contentEditable = "true";

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    newSentenceElement.addEventListener("focus", handleSentenceFocus); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
    newSentenceElement.addEventListener("blur", handleSentenceBlur);   // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞

    return newSentenceElement;
}



/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∏–¥–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
 * 
 * @param {HTMLElement} element - HTML-—ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.
 * @returns {boolean} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `true`, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–µ–Ω, –∏ `false` –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
 */
function isElementVisible(element) {
    const style = window.getComputedStyle(element);
    return style.display !== "none" && style.visibility !== "hidden";
}


/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞, —É–¥–∞–ª—è—è –∫–Ω–æ–ø–∫–∏ –∏ HTML-—Ç–µ–≥–∏.
 * 
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ HTML-—ç–ª–µ–º–µ–Ω—Ç–∞. –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ HTML-—Ç–µ–≥–∏, 
 * –∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–≥–∏ <select> –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã.
 * 
 * @param {HTMLElement} element - HTML-—ç–ª–µ–º–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.
 * @returns {string} - –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
 * 
 * –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
 * - –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞.
 * - –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è HTML-—Ç–µ–≥–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.
 * - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç HTML-—Å—É—â–Ω–æ—Å—Ç–∏ –≤ –æ–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, &amp; ‚Üí &).
 * - –£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏.
 */
function cleanSelectText(element) {
    let text = element.innerHTML;

    // Remove all buttons from the text
    element.querySelectorAll("button").forEach(button => {
        button.remove();  // Remove buttons from DOM to avoid interference with text collection
    });

    // Replace all <select> elements with their selected text
    // element.querySelectorAll("select").forEach(select => {
    //     const selectedOption = select.options[select.selectedIndex].textContent;
    //     text = text.replace(select.outerHTML, selectedOption);
    // });

    // Remove all HTML tags except text
    text = text.replace(/<[^>]*>/gm, '').trim();

    // Use a DOM parser to replace entities
    const tempElement = document.createElement("textarea");
    tempElement.innerHTML = text;
    text = tempElement.value;

    // –£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.replace(/\s\s+/g, ' ');

    return text;
}


/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
 * 
 * –£–°–¢–ê–†–ï–í–®–ê–Ø –§–£–ù–ö–¶–ò–Ø! –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨!
 * 
 * –§—É–Ω–∫—Ü–∏—è –æ—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è 
 * –∫–∞–∂–¥–æ–≥–æ –∞–±–∑–∞—Ü–∞ –∏ –µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—Å–µ—Ö —Å—Ä–∞–∑—É.
 * 
 * @param {Array} paragraphs - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∞–±–∑–∞—Ü–µ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç `paragraph_id`, `paragraph_text`, 
 *                             –∏ –º–∞—Å—Å–∏–≤ `sentences` –∏–ª–∏ —Å—Ç—Ä–æ–∫—É `sentence`.
 * 
 * –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
 * - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 * - –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 * - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å".
 * - –ï—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ", 
 *   –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.
 * 
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - `sendSentences(dataToSend)` ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
 * - `createSentenceElement(paragraphId, sentence)` ‚Äî —Å–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å".
 * 
 */
function displayProcessedParagraphs(paragraphs) {
    const container = document.getElementById('sentenceAddingRequestContainer');
    container.innerHTML = ''; // Clear the container before adding new data

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (!paragraphs || !Array.isArray(paragraphs)) {
        console.error("Invalid paragraphs data:", paragraphs);
        return;
    }

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    function sendSentences(dataToSend) {
        sendRequest({
            url: "/working_with_reports/add_sentence_to_paragraph",
            method: "POST",
            data: dataToSend,
            csrfToken: csrfToken
        })
        .then(response => {
            if (response) {
                toastr.success(response.message || 'Operation completed successfully!', 'Success');
            }
        })
        .catch(error => {
            console.error("Failed to send sentences:", error);
            alert("Failed to send sentences.");
        });
    }

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
    function createSentenceElement(paragraphId, sentence) {
        const sentenceDiv = document.createElement('div');
        sentenceDiv.classList.add('sentence-container');
        
        sentenceDiv.textContent = sentence;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"
        const addButton = document.createElement('button');
        addButton.textContent = '–î–æ–±–∞–≤–∏—Ç—å';
        addButton.classList.add('add-sentence-btn');
        addButton.addEventListener('click', function() {
            const dataToSend = {
                sentence_for_adding: [
                    {
                        paragraph_id: paragraphId,
                        sentences: [sentence]
                    }
                ]
            };

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            sendSentences(dataToSend);
        });

        sentenceDiv.appendChild(addButton);
        return sentenceDiv;
    }

    // Collect total number of sentences to be added
    let totalSentences = 0;
    paragraphs.forEach(paragraph => {
        const sentences = Array.isArray(paragraph.sentences) ? paragraph.sentences : [paragraph.sentence];
        totalSentences += sentences.length;
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ"
    if (totalSentences >= 2) {
        // Create "Send All" button
        const sendAllButton = document.createElement('button');
        sendAllButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ';
        sendAllButton.classList.add('send-all-btn');
        sendAllButton.addEventListener('click', function() {
            const allSentences = [];

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            paragraphs.forEach(paragraph => {
                const sentences = Array.isArray(paragraph.sentences) ? paragraph.sentences : [paragraph.sentence];
                if (sentences) {
                    allSentences.push({
                        paragraph_id: paragraph.paragraph_id,
                        sentences: sentences
                    });
                }
            });

            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const dataToSend = {
                sentence_for_adding: allSentences
            };

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            sendSentences(dataToSend);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ" –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.appendChild(sendAllButton);
    }

    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    paragraphs.forEach(paragraph => {
        const paragraphDiv = document.createElement('div');
        paragraphDiv.classList.add('paragraph-container');

        const paragraphText = paragraph.paragraph_text || `Paragraph: ${paragraph.paragraph_id}`;
        paragraphDiv.textContent = `Paragraph: ${paragraphText}`;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        if (Array.isArray(paragraph.sentences)) {
            paragraph.sentences.forEach(sentence => {
                const sentenceElement = createSentenceElement(paragraph.paragraph_id, sentence);
                paragraphDiv.appendChild(sentenceElement);
            });
        } else if (typeof paragraph.sentence === 'string') {
            // –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ (–µ–¥–∏–Ω–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
            const sentenceElement = createSentenceElement(paragraph.paragraph_id, paragraph.sentence);
            paragraphDiv.appendChild(sentenceElement);
        } else {
            console.error('No valid sentences found for paragraph:', paragraph);
        }

        container.appendChild(paragraphDiv);
    });
}


/**
 * –í—ã–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ.
 * 
 * üîπ –û–±–Ω–æ–≤–ª—è–µ—Ç `innerHTML` —ç–ª–µ–º–µ–Ω—Ç–∞, –∑–∞–º–µ–Ω—è—è –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ <span>.
 * üîπ –ù–µ –∏–∑–º–µ–Ω—è–µ—Ç —É–∂–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.
 * üîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Ü–µ–ª—ã—Ö –±–ª–æ–∫–æ–≤.
 * 
 * @param {HTMLElement} element - HTML-—ç–ª–µ–º–µ–Ω—Ç, —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
 */
function highlightKeyWords(element) {
    if (!element || !(element instanceof HTMLElement)) return;

    // const currentIndex = element.getAttribute("data-index");
    // if (!currentIndex) return;

    let text = element.innerText; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞

    keyWordsGroups.forEach(group => {
        group.forEach(keyword => {
            const word = keyword.word;

            // –£–ª—É—á—à–µ–Ω–Ω—ã–π regex: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç <span>, –Ω–æ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML-—Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ –∏ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞
            const regex = new RegExp(`(?<!<(?!span)[^>]*>|[a-zA-Z–∞-—è–ê-–Ø—ë–Å])(${word})(?![^<]*>|[a-zA-Z–∞-—è–ê-–Ø—ë–Å])`, "gi");
            text = text.replace(regex, (matchedWord) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
            const isCapitalized = matchedWord.charAt(0) === matchedWord.charAt(0).toUpperCase();
            // –ï—Å–ª–∏ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞, –¥–µ–ª–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–∂–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π
            const transformedGroup = isCapitalized
            ? group.map(item => item.word.charAt(0).toUpperCase() + item.word.slice(1))
            : group.map(item => item.word.toLowerCase());

                return `<span class="keyword-highlighted" 
                        data-keywords="${transformedGroup.join(",")}" 
                        onclick="handleKeywordClick(event)">${matchedWord}</span>`;
            });
        });
    });

    element.innerHTML = text;
    // element.setAttribute("data-index", currentIndex);
}


/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç popup —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
 * 
 * üîπ –ë–µ—Ä–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ `data-keywords`.
 * üîπ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç popup –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–∏–∫–∞.
 * üîπ –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ –∏ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–µ.
 * 
 * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞.
 */
function handleKeywordClick(event) {
    const span = event.target;
    

    if (!span.classList.contains("keyword-highlighted")) return;

    const keywordList = span.dataset.keywords.split(","); // –ë–µ—Ä–µ–º –∏–∑ `data-keywords`

    if (keywordList.length === 0) {
        console.warn("–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:", span.textContent);
        return;
    }

    showPopupSentences(event.pageX, event.pageY, keywordList.map(word => ({ sentence: word })), (selectedWord) => {
        span.textContent = selectedWord.sentence;
    });
}



/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–µ–≤ —Å –∫–ª–∞—Å—Å–æ–º `paragraph__list--core` –∏ "paragraph__list--impression" –∏ –≤—ã–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.
 * 
 */
function updateCoreAndImpessionParagraphText() {
    const coreAndImpessionParagraphLists = document.querySelectorAll(".paragraph__list--core, .paragraph__list--impression");
    coreAndImpessionParagraphLists.forEach(paragraphList => {
        paragraphList.querySelectorAll("p, span").forEach(paragraph => {
            highlightKeyWords(paragraph);
        });
    });
}


/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–±–∑–∞—Ü–µ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
 * 
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –∞–±–∑–∞—Ü–∞–º —Å –∫–ª–∞—Å—Å–æ–º `paragraph__list--core`, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–µ–≤, 
 * –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, –∞ —Ç–∞–∫–∂–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤.
 * –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:
 * - `paragraph_id` ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–±–∑–∞—Ü–∞;
 * - `paragraph_text` ‚Äî —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–∞;
 * - `sentences` ‚Äî –º–∞—Å—Å–∏–≤ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –¥–∞–Ω–Ω–æ–º—É –∞–±–∑–∞—Ü—É.
 * 
 * @returns {Array<Object>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–±–∑–∞—Ü–µ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
 * –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
 * {
 *   paragraph_id: {string},
 *   paragraph_text: {string},
 *   sentences: {Array<string>}
 * }
 * @requires isElementVisible - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∏–¥–∏–º –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
 * @requires cleanSelectText - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç HTML-—Ç–µ–≥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
 */
function collectParagraphsData() {
    const coreParagraphLists = document.querySelectorAll(".paragraph__list--core"); // –ò—â–µ–º —Å–ø–∏—Å–∫–∏ —Å –∫–ª–∞—Å—Å–æ–º paragraph__list--core
    const paragraphsData = [];

    coreParagraphLists.forEach(paragraphList => {
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∞–±–∑–∞—Ü–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ (paragraph__list--core)
        const paragraphElement = paragraphList.querySelector(".report__paragraph > p");
        

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∞–±–∑–∞—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!paragraphElement) {
            console.error("Paragraph element not found in paragraph__list--core.");
            return;
        }

        const paragraphId = paragraphElement.getAttribute("data-paragraph-id");
        const paragraphText = paragraphElement.innerText.trim();
        const sentences = [];

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ –∞–±–∑–∞—Ü–∞
        paragraphList.querySelectorAll(".report__sentence").forEach(sentenceElement => {
            const sentenceText = cleanSelectText(sentenceElement);
            if (sentenceText) {
                sentences.push(sentenceText);
            }
        });

        if (sentences.length > 0) {
            paragraphsData.push({
                paragraph_id: paragraphId,
                paragraph_text: paragraphText,
                sentences: sentences,
            });
        }
    });
    

    return paragraphsData;
}


/**
 * –°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∞–±–∑–∞—Ü–µ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
 * 
 * –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∞–±–∑–∞—Ü—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–æ–º, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏—Ö —Ç–µ–∫—Å—Ç, –∞ —Ç–∞–∫–∂–µ —Ç–µ–∫—Å—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π,
 * –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏. –¢–µ–∫—Å—Ç –æ—á–∏—â–∞–µ—Ç—Å—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç—Å—è 
 * —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–±–∑–∞—Ü–µ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
 * 
 * @param {string} paragraphClass - –ö–ª–∞—Å—Å –∞–±–∑–∞—Ü–µ–≤, —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å.
 * @returns {string} - –°–æ–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–µ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
 * 
 * @requires isElementVisible - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∏–¥–∏–º –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
 * @requires cleanSelectText - –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç HTML-—Ç–µ–≥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
 */
function collectTextFromParagraphs(paragraphClass) {
    const paragraphLists = document.querySelectorAll(`.${paragraphClass}`); // –ò—â–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–ª–∞—Å—Å—É
    let collectedText = "";

    paragraphLists.forEach(paragraphList => {
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∞–±–∑–∞—Ü–∞
        const paragraphElement = paragraphList.querySelector(".report__paragraph > p");
        
        if (!paragraphElement) {
            console.error("Paragraph element not found in", paragraphClass);
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–∞, –µ—Å–ª–∏ –æ–Ω –≤–∏–¥–µ–Ω
        if (isElementVisible(paragraphElement)) {
            const paragraphText = paragraphElement.innerText.trim();
            collectedText += paragraphText;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–±–∑–∞—Ü –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            const isTitleParagraph = paragraphElement.getAttribute("data-title-paragraph") === "True";
            if (isTitleParagraph) {
                collectedText += "\n";  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            } else {
                collectedText += " "; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –æ–±—ã—á–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤
            }
        }

        let hasSentences = false;  // –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –≤–Ω—É—Ç—Ä–∏ –∞–±–∑–∞—Ü–∞
        paragraphList.querySelectorAll(".report__sentence").forEach(sentenceElement => {
            if (isElementVisible(sentenceElement)) {
                const sentenceText = cleanSelectText(sentenceElement);
                if (sentenceText) {
                    collectedText += sentenceText + " ";
                    hasSentences = true;
                }
            }
        });

        // –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        if (hasSentences) {
            collectedText += "\n";
        }
    });

    return collectedText.trim();  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
}

/**
 * –°–≤—è–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ `reportData` –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –Ω–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
 * 
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º `report__sentence`), 
 * –∏ —Å–≤—è–∑–∞—Ç—å –∏—Ö —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö `reportData`. 
 * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω—É –∏–ª–∏ –≤—ã–±–æ—Ä –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
 * 
 * –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
 * 1. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º `report__sentence` –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
 * 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:
 *    - –ü–æ–ª—É—á–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ (`data-paragraph-id`), –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (`data-index`) –∏ ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (`data-id`).
 *    - –ò—â–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤ –¥–∞–Ω–Ω—ã—Ö `reportData` –ø–æ `paragraphId`.
 *    - –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–ø–æ –µ–≥–æ ID). 
 *    - –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Å–≤–æ–π—Å—Ç–≤–æ `linkedSentences` —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
 * 
 * @global
 * @param {Object} reportData - –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏ –∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ working_with_report.html!!! 
 *                              –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
 *                              {
 *                                  paragraphs: [
 *                                      {
 *                                          id: Number,
 *                                          sentences: {
 *                                              [index]: Array<{ id: Number, sentence: String }>
 *                                          }
 *                                      }
 *                                  ]
 *                              }
 */
function linkSentences() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const sentencesOnPage = document.querySelectorAll(".report__sentence");

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    sentencesOnPage.forEach(sentenceElement => {
        const paragraphId = sentenceElement.getAttribute("data-paragraph-id");
        const index = sentenceElement.getAttribute("data-index");
        const sentenceId = sentenceElement.getAttribute("data-id");

        // –ò—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º ID –∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º index –≤ reportData
        const paragraphData = reportData.paragraphs.find(p => p.id === parseInt(paragraphId));

        if (paragraphData && paragraphData.sentences[index]) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–∏–º–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –µ–≥–æ ID
            const filteredSentences = paragraphData.sentences[index].filter(sentence => {
                return sentence.id.toString() !== sentenceId; // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ ID
            });

            // –°–≤—è–∑—ã–≤–∞–µ–º –≤–∏–¥–∏–º–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–∑ reportData
            sentenceElement.linkedSentences = filteredSentences;

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            if (sentenceElement.linkedSentences.length > 0) {
                sentenceElement.classList.add("has-linked-sentences-highlighted-sentence");
            }
        }
    });
}


/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –∏ –≤–≤–æ–¥–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –ü—Ä–∏ –¥–≤–æ–π–Ω–æ–º –∫–ª–∏–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.
 * - –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –∏–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞.
 * - –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–µ–≤ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
 * - –°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞.
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –≠–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∫–ª–∞—Å—Å "report__sentence".
 * - –£ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤ `linkedSentences`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
 * - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è `popup` –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
 * - –î–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏:
 *   - `showPopupSentences(x, y, sentenceList, onSelect)` –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞ (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ utils.js).
 *   - `hidePopupSentences()` –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞ (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ utils.js).
 *   - `updateCoreAndImpessionParagraphText()` –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∞–±–∑–∞—Ü–µ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - –í—ã–∑–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
 */
function sentenceDoubleClickHandle (){
    const sentencesOnPage = document.querySelectorAll(".report__sentence");
    sentencesOnPage.forEach(sentenceElement => {
        // –î–æ–±–∞–≤–ª—è—é —Å–ª—É—à–∞—Ç–µ–ª—å –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        sentenceElement.addEventListener("dblclick", function(event){
            activeSentence = sentenceElement;
            if (sentenceElement.linkedSentences && sentenceElement.linkedSentences.length > 0) {
                // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                showPopupSentences(event.pageX, event.pageY, sentenceElement.linkedSentences, (selectedSentence) => {
                    activeSentence.textContent = selectedSentence.sentence; // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    highlightKeyWords(activeSentence) // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                });
            } else {
                console.error("No linked sentences or linked sentences is not an array");
            }
        });
        // –î–æ–±–∞–≤–ª—è—é —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        sentenceElement.addEventListener("input", function(event) {
            hidePopupSentences();
        });
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –∫–Ω–æ–ø–∫–∏ "Next".
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "Next" –≤—ã—á–∏—Å–ª—è–µ—Ç –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞, —É–≤–µ–ª–∏—á–∏–≤–∞—è —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É.
 * - –§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.
 * - –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
 * - –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏—Ç —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞.
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –≠–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä `nextReportButton`, –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
 * - –ü–æ–ª–µ —Å ID "report-number" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.
 * - –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è `getMaxReportNumber(reportNumber)` –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.
 * - –ü–æ–ª–µ —Å ID "patient-surname" –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —á—Ç–æ–±—ã —Ñ–æ–∫—É—Å –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - –í—ã–∑–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –ø–µ—Ä–µ–¥–∞–≤ —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ "Next", –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM.
 * 
 * –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
 * - –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–µ–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
 */
function nextButtonLogic(nextReportButton) {
    nextReportButton.addEventListener("click", function() {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä
        const reportNumberField = document.getElementById("report-number");
        if (!reportNumberField) {
            console.error("–ü–æ–ª–µ 'report-number' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }
        const reportNumber = reportNumberField.value.trim();
        const maxReportNumber = getMaxReportNumber(reportNumber);
        const newReportNumber = maxReportNumber.toString();

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É choosing_report —Å –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        const url = `choosing_report?report_number=${encodeURIComponent(newReportNumber)}`;

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É choosing_report –∏ —Å—Ç–∞–≤–∏–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ —Ñ–∞–º–∏–ª–∏–∏
        window.location.href = url;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        setTimeout(() => {
            const surnameField = document.getElementById("patient-surname");
            if (surnameField) {
                surnameField.focus();
            }
        }, 600); // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    });
}



/**
 * –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Add Report".
 * 
 * –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "Add Report" –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
 * 
 * –®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
 * 1. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª–µ–π:
 *    - `patient-name`: –ò–º—è, —Ñ–∞–º–∏–ª–∏—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (—Å—Ç—Ä–æ–∫–∞, —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–∏).
 *    - `patient-birthdate`: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞.
 *    - `report-number`: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞.
 * 2. –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞, —É–≤–µ–ª–∏—á–∏–≤–∞—è —Ç–µ–∫—É—â–∏–π –Ω–∞ 1 —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ `getMaxReportNumber`.
 * 3. –§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É `choosing_report`, –≤–∫–ª—é—á–∞—è —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 *    - –§–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞.
 *    - –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞.
 *    - –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞.
 * 4. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É `choosing_report` —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –ü–æ–ª—è –≤–≤–æ–¥–∞ —Å ID `patient-name`, `patient-birthdate`, `report-number`.
 * - –ö–Ω–æ–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏.
 * - –§—É–Ω–∫—Ü–∏—è `getMaxReportNumber` –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –æ—Ç—á–µ—Ç–∞.
 * 
 * @param {HTMLElement} addReportButton - –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
 */
function addReportButtonLogic(addReportButton) {
    addReportButton.addEventListener("click", function() {
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—è "surname" –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
        const surnameInput = document.getElementById("patient-name")?.value.trim() || "";
        const [surname = "", name = "", patronymic = ""] = surnameInput.split(" ");

        const birthdate = document.getElementById("patient-birthdate")?.value || "";
        const reportNumberField = document.getElementById("report-number");

        if (!reportNumberField) {
            console.error("–ü–æ–ª–µ 'report-number' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
            return;
        }

        const reportNumber = reportNumberField.value.trim();
        const maxReportNumber = getMaxReportNumber(reportNumber);
        const newReportNumber = maxReportNumber.toString();

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ URL
        const url = `choosing_report?patient_surname=${encodeURIComponent(surname)}
        &patient_name=${encodeURIComponent(name)}
        &patient_patronymicname=${encodeURIComponent(patronymic)}
        &patient_birthdate=${encodeURIComponent(birthdate)}
        &report_number=${encodeURIComponent(newReportNumber)}`;

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É choosing_report
        window.location.href = url;
    });
}



/**
 * –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Edit Form".
 * 
 * –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "Edit Form" –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã.
 * 
 * –®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Å ID `exportForm` —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è.
 * 2. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ):
 *    - –£–¥–∞–ª—è–µ—Ç –∞—Ç—Ä–∏–±—É—Ç `readonly` –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 *    - –î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ç—Ä–∏–±—É—Ç `readonly` –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è.
 * 3. –ò–∑–º–µ–Ω—è–µ—Ç –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ (`title`) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è:
 *    - –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∫–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ "Save Changes".
 *    - –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∫–æ–Ω–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ "Edit Form".
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –≠–ª–µ–º–µ–Ω—Ç —Å ID `exportForm`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–æ–ª—è –≤–≤–æ–¥–∞ (input).
 * - –≠–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
 * 
 * @param {HTMLElement} editButton - –ö–Ω–æ–ø–∫–∞, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –ª–æ–≥–∏–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã.
 */
function editButtonLogic(editButton) {
    const formInputs = document.querySelectorAll("#exportForm input");

    editButton.addEventListener("click", function() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        const isReadOnly = formInputs[0]?.hasAttribute("readonly");

        formInputs.forEach(input => {
            if (isReadOnly) {
                input.removeAttribute("readonly"); // –î–µ–ª–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏
            } else {
                input.setAttribute("readonly", true); // –î–µ–ª–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            }
        });

        // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if (isReadOnly) {
            editButton.style.background = "url('/static/pic/save_button.svg') no-repeat center center";
            editButton.title = "Save Changes";
        } else {
            editButton.style.background = "url('/static/pic/edit_button.svg') no-repeat center center";
            editButton.title = "Edit Form";
        }
    });
}


/**
 * –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "+". –û—Ç–∫—Ä—ã–≤–∞–µ—Ç popup —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Å –∫–ª–∞—Å—Å–æ–º "icon-btn--add-sentence".
 * - –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ DOM –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π.
 * - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–Ω–æ–ø–∫–∞.
 * - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç popup —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, –ø–æ–∑–≤–æ–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö.
 * - –í—ã–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
 * - –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
 * - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ popup —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º.
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –≠–ª–µ–º–µ–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ —Å –∫–ª–∞—Å—Å–æ–º "icon-btn--add-sentence" –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
 * - –°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç "/working_with_reports/get_sentences_with_index_zero" –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –º–∞—Å—Å–∏–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
 * - –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ `createEditableSentenceElement`, `showPopupSentences`(–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ utils.js), `updateCoreAndImpessionParagraphText`, –∏ `hidePopupSentences`(–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ utils.js).
 * - –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω CSRF-—Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - –í—ã–∑–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM.
 * 
 * –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
 * - –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
 * - –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞, –æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è.
 */
function addSentenceButtonLogic() {
    document.querySelectorAll(".icon-btn--add-sentence").forEach(button => {
        button.addEventListener("click", function(event) {
            const paragraphId = this.getAttribute("data-paragraph-id");
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π
            const newSentenceElement = createEditableSentenceElement("",paragraphId);
            button.parentNode.insertBefore(newSentenceElement, button);
            newSentenceElement.focus(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω–¥–µ–∫—Å–æ–º 0 –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
            sendRequest({
                url: "/working_with_reports/get_sentences_with_index_zero",
                method: "POST",
                data: { paragraph_id: paragraphId },
                csrfToken: csrfToken
            }).then(data => {
                if (data.sentences && data.sentences.length > 0) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º popup –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    showPopupSentences(event.pageX, event.pageY, data.sentences, function(selectedSentence) {
                        // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ popup
                        const newSentenceElement = createEditableSentenceElement(selectedSentence.sentence, paragraphId);
                        button.parentNode.insertBefore(newSentenceElement, button);
                        highlightKeyWords(newSentenceElement); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                        newSentenceElement.focus(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    });
                } else {
                    console.warn("No sentences available for this paragraph.");
                }
            }).catch(error => {
                console.error("Error fetching sentences:", error);
            });

            // –õ–æ–≥–∏–∫–∞ —Å–∫—Ä—ã—Ç–∏—è popup –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            newSentenceElement.addEventListener("input", function() {
                hidePopupSentences(); // –°–∫—Ä—ã–≤–∞–µ–º popup –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–≤–æ–¥–∞
            });

            newSentenceElement.addEventListener("blur", function() {
                if (newSentenceElement.textContent.trim() === "") {
                    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω–æ —Ñ–æ–∫—É—Å –±–µ–∑ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
                    newSentenceElement.remove();
                }
            });
        });
    });
}


/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –∫–Ω–æ–ø–∫–∏ "Copy to Clipboard".
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ —Å –∫–ª–∞—Å—Å–∞–º–∏ "paragraph__list--initial", "paragraph__list--core", –∏ "paragraph__list--impression".
 * - –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—â–∏–π —Ç–µ–∫—Å—Ç, –æ–±—ä–µ–¥–∏–Ω—è—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤.
 * - –ö–æ–ø–∏—Ä—É–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
 * - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–±–∑–∞—Ü–µ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
 * - –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–±–∑–∞—Ü–µ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è `collectTextFromParagraphs` –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤.
 * - –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è `collectParagraphsData` –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤.
 * - –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ `sendRequest` –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ `displayProcessedParagraphs` –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 * - –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ `toastr` –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 * - –°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç "/working_with_reports/new_sentence_adding" –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–±–∑–∞—Ü–µ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
 * - –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω CSRF-—Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - –í—ã–∑–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ "Copy to Clipboard" –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.
 * - –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ.
 * 
 * –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
 * - –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é `toastr.success`.
 * - –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
 * 
 * –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
 * @param {HTMLElement} copyButton - –≠–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ "Copy to Clipboard".
 */
function copyButtonLogic(copyButton) {
    copyButton.addEventListener("click", async function () {

        // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        const initialText = collectTextFromParagraphs("paragraph__list--initial");
        const coreText = collectTextFromParagraphs("paragraph__list--core");
        const impressionText = collectTextFromParagraphs("paragraph__list--impression");

        // –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –º–µ–∂–¥—É –Ω–∏–º–∏
        const textToCopy = `${initialText}\n\n${coreText}\n\n${impressionText}`.trim();
        console.log(textToCopy);
        try {
            // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            await navigator.clipboard.writeText(textToCopy);
            toastr.success("Text copied to clipboard successfully", "Success");

            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
            const paragraphsData = collectParagraphsData();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
            // await sendParagraphsData(paragraphsData);
            await sendModifiedSentencesToServer();
            
        } catch (error) {
            alert(error.message || "Failed to process paragraphs.");
        }
    });
}


/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
 * –≠—Ç–æ —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —è –µ–µ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è—é, –Ω–æ –ø–æ—Ç–æ–º –µ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å.
 * 
 * @param {Array} paragraphsData - The data of paragraphs to send.
 */
async function sendParagraphsData(paragraphsData) {
    try {
        const response = await sendRequest({
            url: "/working_with_reports/new_sentence_adding",
            method: "POST",
            data: { paragraphs: paragraphsData },
            csrfToken: csrfToken
        });

        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã
        displayProcessedParagraphs(response.processed_paragraphs);
    } catch (error) {
        console.error("sendParagraphsData: Failed to send paragraphs data.", error);
        alert(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–±–∑–∞—Ü—ã.");
    }
}


/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –∫–Ω–æ–ø–∫–∏ "Export to Word".
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∞–±–∑–∞—Ü–µ–≤ —Å –∫–ª–∞—Å—Å–∞–º–∏ "paragraph__list--initial", "paragraph__list--core", –∏ "paragraph__list--impression".
 * - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–±–∑–∞—Ü–µ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
 * - –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Word.
 * - –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞, —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞, –ø–æ–¥—Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –∏ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.
 * - –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∫–∞—á–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª Word.
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è `collectTextFromParagraphs` –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤.
 * - –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è `collectParagraphsData` –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤.
 * - –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ `sendRequest` –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ `displayProcessedParagraphs` –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 * - –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω CSRF-—Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.
 * - –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:
 *   - "/working_with_reports/new_sentence_adding" –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤.
 *   - "/working_with_reports/export_to_word" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ Word.
 * - –ü–æ–ª—è –≤–≤–æ–¥–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ "patient-name", "patient-birthdate", "report-number" –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - –í—ã–∑–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ "Export to Word" –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.
 * - –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ.
 * 
 * –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
 * - –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ.
 * - –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –≤ Word –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 * - –§–∞–π–ª Word —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
 * 
 * –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
 * @param {HTMLElement} exportButton - –≠–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ "Export to Word".
 */
function wordButtonLogic(exportButton) {
    
    exportButton.addEventListener("click", async function() {
        // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –∞–±–∑–∞—Ü–µ–≤
        const initialText = collectTextFromParagraphs("paragraph__list--initial");
        const coreText = collectTextFromParagraphs("paragraph__list--core");
        const impressionText = collectTextFromParagraphs("paragraph__list--impression");

        const textToExport = `${coreText}\n\n${impressionText}`.trim();
        const scanParam = initialText.trim();

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–±–∑–∞—Ü–µ–≤
        const paragraphsData = collectParagraphsData();

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–±–∑–∞—Ü–µ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await sendRequest({
                url: "/working_with_reports/new_sentence_adding",
                method: "POST",
                data: { paragraphs: paragraphsData },
                csrfToken: csrfToken
            });

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
            displayProcessedParagraphs(response.processed_paragraphs);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–±–∑–∞—Ü–µ–≤:", error);
            alert(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–±–∑–∞—Ü—ã.");
            return;
        }

        // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–±–∑–∞—Ü–µ–≤ —É—Å–ø–µ—à–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ Word
        try {
            const name = document.getElementById("patient-name").value;
            const birthdate = document.getElementById("patient-birthdate").value;
            const reportnumber = document.getElementById("report-number").value;

            const exportForm = document.getElementById("exportForm");
            const subtype = exportForm.getAttribute("data-subtype");
            const reportType = exportForm.getAttribute("data-report-type");

            const reportSideElement = document.getElementById("report-side");
            const reportSide = reportSideElement ? reportSideElement.value : "";

            const blob = await sendRequest({
                url: "/working_with_reports/export_to_word",
                method: "POST",
                data: {
                    text: textToExport,
                    name: name,
                    birthdate: birthdate,
                    subtype: subtype,
                    report_type: reportType,
                    reportnumber: reportnumber,
                    scanParam: scanParam,
                    side: reportSide
                },
                responseType: "blob",
                csrfToken: csrfToken
            });

            // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            const currentDate = new Date();
            const day = currentDate.getDate();
            const month = currentDate.getMonth() + 1;
            const year = currentDate.getFullYear();
            const formattedDate = `${day.toString().padStart(2, '0')}${month.toString().padStart(2, '0')}${year}`;

            let fileReportSide = "";
            if (reportSide === "right") {
                fileReportSide = " –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞";
            } else if (reportSide === "left") {
                fileReportSide = " –ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞";
            }

            a.style.display = "none";
            a.href = url;
            a.download = `${name} ${reportType} ${subtype}${fileReportSide} ${formattedDate}.docx`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Word:", error);
            alert(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ Word.");
        }
    });
}


/**
 * –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Generate Impression".
 * 
 * –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "Generate Impression". –û–Ω–∞:
 * 1. –°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∞–±–∑–∞—Ü–µ–≤ —Å –∫–ª–∞—Å—Å–æ–º "paragraph__list--core".
 * 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
 * 3. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–æ–ª–µ `aiResponse`.
 * 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–µ—Ç—Å—è.
 */
function generateImpressionLogic(generateButton, boxForAiResponse) {
    generateButton.addEventListener("click", async function () {
        const textToCopy = collectTextFromParagraphs("paragraph__list--core");
        const assistantNames = ["airadiologist"];
        boxForAiResponse.textContent = "–û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç–∞ –ò–ò...";

        try {
            const aiResponse = await generateImpressionRequest(textToCopy, assistantNames);
            boxForAiResponse.textContent = aiResponse || "No response received.";
        } catch (error) {
            console.error(error);
            boxForAiResponse.textContent = "An error occurred. Please try again.";
        }
    });
}

/**
 * –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "Add Impression to Report".
 * 
 * –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "Add Impression to Report" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ò–ò –∑–∞–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç.
 * 
 * –®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
 * 1. –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å ID `aiResponse`.
 * 2. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ.
 * 3. –ò—â–µ—Ç –ø–µ—Ä–≤—ã–π –≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∞–±–∑–∞—Ü–∞—Ö —Å –∫–ª–∞—Å—Å–æ–º `paragraph__list--impression`.
 * 4. –ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç –∏–∑ `aiResponse`.
 * 
 * –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∏–¥–∏–º–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:
 * - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–∏–º—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - –≠–ª–µ–º–µ–Ω—Ç —Å ID `addImpressionToReportButton` (–∫–Ω–æ–ø–∫–∞).
 * - –≠–ª–µ–º–µ–Ω—Ç —Å ID `aiResponse` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è.
 * - –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º `paragraph__list--impression .report__sentence` –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞.
 * - –§—É–Ω–∫—Ü–∏—è `isElementVisible` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
 */
function addImpressionButtonLogic(addImpressionButton) {
    addImpressionButton.addEventListener("click", function() {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ò–ò
        const aiResponseText = document.getElementById("aiResponse")?.innerText.trim();

        if (!aiResponseText) {
            alert("–û—Ç–≤–µ—Ç –ò–ò –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ.");
            return;
        }

        // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ paragraph__list--impression
        const impressionParagraphs = document.querySelectorAll(".paragraph__list--impression .report__sentence");
        let foundVisibleSentence = false;

        impressionParagraphs.forEach(sentenceElement => {
            if (isElementVisible(sentenceElement) && !foundVisibleSentence) {
                // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Ç–≤–µ—Ç –ò–ò
                sentenceElement.textContent = aiResponseText;
                foundVisibleSentence = true;  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
            }
        });

        if (!foundVisibleSentence) {
            alert("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–∏–º—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π.");
        }
    });
}

/** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.*/
function normalizeSentence(sentence, keyWordsGroups) {
    // –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    sentence = sentence.toLowerCase();

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    sentence = sentence.replace(/\s+/g, " ").trim();

    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    sentence = sentence.replace(/[.,!?;:()"]/g, "");

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    keyWordsGroups.forEach((group, groupIndex) => {
        group.forEach(keyword => {
            const regex = new RegExp(`(^|[^\\p{L}\\d])${keyword.word}([^\\p{L}\\d]|$)`, "gui");
            sentence = sentence.replace(regex, `{${groupIndex}}`);
        });
    });

    // –ó–∞–º–µ–Ω—è–µ–º —á–∏—Å–ª–∞ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    sentence = sentence.replace(/\b\d+(\.\d+)?\b/g, "{—á–∏—Å–ª–æ}");

    // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
    sentence = sentence.replace(/\b(\w+)\b\s+\1\b/g, "$1");

    return sentence;
}


/**
 * Adds focus and blur listeners to all sentence elements on the page.
 * Utilizes external handlers for focus and blur events.
 */
function addFocusListeners() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const sentenceElements = document.querySelectorAll(".report__sentence");

    sentenceElements.forEach(sentenceElement => {
        // Attach focus and blur event listeners
        sentenceElement.addEventListener("focus", handleSentenceFocus);
        sentenceElement.addEventListener("blur", handleSentenceBlur);
    });

}


/**
 * Collects data of modified sentences and sends it to the server.
 * - Gathers all sentences with `data-modified="true"`.
 * - Formats the data as a JSON object for sending to the server.
 * - Uses `sendRequest` to make the API call.
 */
async function sendModifiedSentencesToServer() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ
    const modifiedSentences = document.querySelectorAll("[data-modified='true']");
    const reportId = document.getElementById("csrf_token").dataset.reportId;
    if (modifiedSentences.length === 0) {
        toastr.info("No changes detected to save.");
        return;
    }

    const dataToSend = [];

    modifiedSentences.forEach(sentenceElement => {
        const paragraphId = sentenceElement.getAttribute("data-paragraph-id");
        const sentenceIndex = sentenceElement.getAttribute("data-index") || 0;

        const currentText = cleanSelectText(sentenceElement).trim();

        if(!currentText) {
            return;
        } 
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        dataToSend.push({
            paragraph_id: paragraphId,
            sentence_index: sentenceIndex,
            text: currentText
        });

    });

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if (dataToSend.length === 0) {
        toastr.info("No valid modified sentences to send.");
        return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const requestData = {
        sentences: dataToSend,
        report_id: reportId
    };

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await sendRequest({
            url: "/working_with_reports/save_modified_sentences",
            method: "POST",
            data: requestData,
            csrfToken: csrfToken // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ CSRF-—Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
        });
        
        if (response.status === "success") {
            const bottomContainer = document.getElementById("bottomContainer");
            const reportContainer = document.getElementById("sentenceAddingReportContainer");

            // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            reportContainer.innerHTML = response.html;
            bottomContainer.style.display = "flex";
            // –£–±–∏—Ä–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç `data-modified` –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            modifiedSentences.forEach(sentenceElement => {
                sentenceElement.removeAttribute("data-modified");
                sentenceElement.classList.remove("was-changed-highlighted-sentence");
            });
        }

        
        
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        console.error("Error saving modified sentences:", error);
    }
}


/**
 * –û—á–∏—â–∞–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º.
 * 
 * üîπ –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –≤ –Ω–∞—á–∞–ª–µ.
 * üîπ –£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.
 * üîπ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–∫–æ–±–∫–∞—Ö.
 * üîπ –ú–µ–Ω—è–µ—Ç `C` –∏ `–°` –ø–æ—Å–ª–µ —Ü–∏—Ñ—Ä—ã –Ω–∞ `¬∞C`.
 * üîπ –ó–∞–º–µ–Ω—è–µ—Ç `1.` ‚Üí `1)`, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –Ω–µ—Ç —Ü–∏—Ñ—Ä—ã.
 * üîπ –£–±–∏—Ä–∞–µ—Ç –¥–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ.
 * 
 * @param {string} sentence - –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
 * @returns {string} - –û—á–∏—â–µ–Ω–Ω–æ–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
 */
function firstGrammaSentence(sentence) {
    if (!sentence.trim()) return sentence; // –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    //  –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
    sentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã (–º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏, –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è)
    sentence = sentence.replace(/\s+/g, " ")  // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –æ–¥–∏–Ω
                       .replace(/\s([,.!?:;])/g, "$1")  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                       .replace(/\.{2,}$/g, ".") // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
                       .replace(/([,.!?:;])([^\s])/g, "$1 $2"); // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö
    sentence = sentence.replace(/\(([^)]+)\)/g, (match, insideText) => {
        if (!/^(–ö–¢|–ú–†–¢|–ü–≠–¢|–£–ó–ò|–ú–†|–≠–ö–ì)$/i.test(insideText)) {
            insideText = insideText.charAt(0).toLowerCase() + insideText.slice(1); // –ü–µ—Ä–≤—É—é –±—É–∫–≤—É –≤ —Å—Ç—Ä–æ—á–Ω—É—é
        }
        return `(${insideText.replace(/\.$/, "")})`; // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –ø–µ—Ä–µ–¥ `)`
    });

    //  –ú–µ–Ω—è–µ–º `C` –∏ `–°` –Ω–∞ `¬∞C`, –µ—Å–ª–∏ –æ–Ω–∏ –∏–¥—É—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ü–∏—Ñ—Ä—ã
    sentence = sentence.replace(/(\d)([–°C])/g, "$1¬∞C");

    // –ú–µ–Ω—è–µ–º `1.` ‚Üí `1)`, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –Ω–µ—Ç —Ü–∏—Ñ—Ä—ã
    sentence = sentence.replace(/(\d+)\.(?!\d)/g, "$1)");

    // `C` –∏ `–°` –ø–æ—Å–ª–µ —Ü–∏—Ñ—Ä—ã ‚Üí –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ `¬∞C`
    sentence = sentence.replace(/(\d)([–°C])(?=[^\w]|$)/g, "$1¬∞C");

    // ‚úÖ –ü–µ—Ä–µ–¥ `)` –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª–∞
    // ‚úÖ –ü–æ—Å–ª–µ `)` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª ‚Äî –Ω–µ –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    sentence = sentence.replace(/(\S+)\s*\.\s*\)(?=\S)/g, "$1)"); // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –ø–µ—Ä–µ–¥ `)`
    sentence = sentence.replace(/\)([^\s.,!?])/g, ") $1"); // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ `)`, –µ—Å–ª–∏ –¥–∞–ª—å—à–µ –Ω–µ –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è


    // –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–∫–æ–±–∫–∞—Ö —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã (–µ—Å–ª–∏ –Ω–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞)
    const exceptions = ["–ö–¢", "–ú–†–¢", "–ü–≠–¢", "–£–ó–ò", "–ú–†", "–≠–ö–ì"];
    sentence = sentence.replace(/\(\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)\s*\)/g, (match, word) =>
        exceptions.includes(word.toUpperCase()) ? match : `(${word.toLowerCase()})`
    );

    return sentence.trim();
}


/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫ —Ç–µ–∫—Å—Ç—É.
 * 
 * üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏–∫–æ–º, –∏—Å–ø—Ä–∞–≤–ª—è—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é.
 * üîπ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
 * 
 * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
 * @returns {string} - –û—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
 */
function secondGrammaSentence(text) {
    if (!text) return "";

    // –ü–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ ".!?" –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∏–º –Ω–µ—Ç "(")
    text = text.replace(/([.!?])\s+(\(?)([–∞-—è—ëa-z])/g, (match, punct, bracket, letter) => 
        punct + " " + bracket + letter.toUpperCase()
    );

    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏)
    text = text.replace(/\s+/g, " ");

    // –ü–æ—Å–ª–µ ":" —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
    const exceptions = ["–ö–¢", "–ú–†–¢", "–ü–≠–¢", "–£–ó–ò", "–ú–†", "–≠–ö–ì"];
    text = text.replace(/:\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)/g, (match, word) =>
        exceptions.includes(word.toUpperCase()) ? match : `: ${word.toLowerCase()}`
    );

    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "," ‚Üí –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ ".."
    text = text.replace(/,(\s*)$/, ".$1");


    // –ß–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π (`1. –ø—É–Ω–∫—Ç`) ‚Üí –º–µ–Ω—è–µ–º —Ç–æ—á–∫—É –Ω–∞ `)`
    text = text.replace(/(\d)\.([^\d])/g, "$1) $2");

    // –ú–µ–Ω—è–µ–º `1.` ‚Üí `1)`, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –Ω–µ—Ç —Ü–∏—Ñ—Ä—ã
    text = text.replace(/(\d+)\.(?!\d)/g, "$1)");

    return text.trim();
}