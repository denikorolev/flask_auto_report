// edit_paragraph.js

document.addEventListener("DOMContentLoaded", function () {

    initSortableHeadSentences(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sortable –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º)

    initSentencePopupCloseHandlers(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞

    document.getElementById("sentenceSearch").addEventListener("input", filterSentencesByText); // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É


    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ø–∞–ø–∞
    document.querySelectorAll(".edit-sentence__text").forEach(sentence => {
        sentence.addEventListener("dblclick", function (event) {
            event.stopPropagation();
            showSentencePopup(this, event);
        });
    });


    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫—É üóíÔ∏è
    document.querySelectorAll(".control-btn--copy-to-buffer").forEach(btn => {btn.addEventListener("click", function() {
            addSentenceToBuffer(this);
        });
    });


    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úÇÔ∏è"
    document.querySelectorAll(".control-btn--unlink").forEach(btn => {
        btn.addEventListener("click", function() {
            deleteSubsidiaries(this);
        });
    });


    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫—É üîí (–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ø–∞–ø –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑—å—é –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
    document.querySelectorAll(".edit-sentence__title-span").forEach(item => {
        item.addEventListener("click", function (event) {
            event.stopPropagation();
            const itemWrapper = this.closest(".edit-sentence__title-wrapper");
            showLockPopup(itemWrapper, event);
        });
    });



    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø –±—É—Ñ–µ—Ä–∞
    document.getElementById("openBufferPopupButton").addEventListener("click", function() {
        showBufferPopup(this);
    });


    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"
    document.getElementById("backToReportButton").addEventListener("click", function () {
        console.log("Back to report button clicked");
        window.history.back();
    });
    


    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
    document.querySelectorAll(".edit-sentence__text").forEach(sentence => {
        sentence.addEventListener("click", function (event) {
            event.stopPropagation(); // –û—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Å–ø–ª—ã—Ç–∏–µ
            makeSentenceEditable(this, event); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        });
    });
    

    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    document.querySelectorAll(".control-btn--edit").forEach(button => {
        button.addEventListener("click", function () {
            editSentence(this);
        });
    });


    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    document.getElementById("addTailSentenceButton").addEventListener("click", function () {
        const itemFromBuffer = null;
        addTailSentence(itemFromBuffer);
    });


    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    document.getElementById("addHeadSentenceButton").addEventListener("click", function () {
        const itemFromBuffer = null;
        addHeadSentence(itemFromBuffer);
    });


    // –°–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    document.querySelectorAll(".control-btn--delete").forEach(button => {
        button.addEventListener("click", function () {
            const sentenceType = this.closest(".control-buttons").getAttribute("data-sentence-type");
            if (sentenceType === "tail") {
                deleteTailSentence(this);
            }
            else if (sentenceType === "head") {
                deleteHeadSentence(this);
            }
        });
    });

});


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sortable –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function initSortableHeadSentences() {
    const headSentencesList = document.querySelector(".edit-sentence__list");

    if (!headSentencesList) {
        console.warn("–°–ø–∏—Å–æ–∫ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    new Sortable(headSentencesList, {
        handle: ".drag-handle", // –ó–∞—Ö–≤–∞—Ç —Ç–æ–ª—å–∫–æ –∑–∞ "—Ö–≤–∞—Ç–∞–ª–∫—É"
        animation: 150,
        onEnd: function () {
            saveHeadSentencesOrder();
        }
    });
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function makeSentenceEditable(sentenceElement) {
    console.log("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", sentenceElement);
    const sentenceItem = sentenceElement.closest(".edit-sentence__item");
    const sentenceType = sentenceItem.getAttribute("data-sentence-type");
    let sentenceGroupTitle = null;
    console.log("–¢–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", sentenceType);
    if (sentenceType === "tail") {
        sentenceGroupTitle = document.getElementById("editSentenceTitleTail");
    } else {
        sentenceGroupTitle = document.getElementById("editSentenceTitleHead");
    }
    const sentenceGroupIsLinked = sentenceGroupTitle.getAttribute("data-group-is-linked") === "True";

    const isLinked = sentenceItem.getAttribute("data-sentence-is-linked") === "True";
    const groupIsLinkedIcon = sentenceGroupTitle.querySelector(".edit-sentence__title-span");
    const sentenceIsLinkedIcon = sentenceItem.querySelector(".edit-sentence__links-icon--is-linked");    
    const audioKnock = new Audio("/static/audio/dzzz.mp3");

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∏ —Å body 
    if (sentenceGroupIsLinked && groupIsLinkedIcon) {
        createRippleAtElement(groupIsLinkedIcon);
        toastr.warning("–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: —Å–≤—è–∑–∞–Ω–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏");
        audioKnock.play();
        return;
    }

    // –ï—Å–ª–∏ —Å–≤—è–∑–∞–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏
    if (isLinked) {
        createRippleAtElement(sentenceIsLinkedIcon);
        toastr.warning("–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: —Å–≤—è–∑–∞–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏. ");
        audioKnock.play();
        return;
    }

    // –ï—Å–ª–∏ —É–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if (sentenceElement.getAttribute("contenteditable") === "true") return;

    // –ò–Ω–∞—á–µ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    sentenceElement.setAttribute("contenteditable", "true");
    sentenceElement.focus();
    makeSentenceEditableActions(sentenceElement);
}


// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ makeSentenceEditable
function makeSentenceEditableActions(sentenceElement) {
    const oldText = sentenceElement.textContent.trim();

    function finishEditing() {
        sentenceElement.setAttribute("contenteditable", "false");
        sentenceElement.removeEventListener("keydown", onEnterPress);

        const newText = sentenceElement.textContent.trim();
        if (newText !== oldText) {
            updateSentence(sentenceElement); // –í—ã–∑–æ–≤ —Ç–≤–æ–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        }
    }

    // –ü–æ—Ç–µ—Ä—è —Ñ–æ–∫—É—Å–∞
    sentenceElement.addEventListener("blur", finishEditing, { once: true });

    // Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    function onEnterPress(event) {
        if (event.key === "Enter") {
            event.preventDefault();
            sentenceElement.blur();
        }
    }

    sentenceElement.addEventListener("keydown", onEnterPress);
}


// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–ø–∞–ø–∞ —Å –±—É—Ñ–µ—Ä–æ–º
function showBufferPopup(button) {
    const popup = document.getElementById("bufferPopup");

    popup.style.display === "block"
}



function showLockPopup(itemWrapper, event) {
    const popup = document.getElementById("lockPopup");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π wrapper
    popup.dataset.targetWrapperId = itemWrapper.getAttribute("data-wrapper-id") || "";

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–ø–∞–ø
    popup.style.display = "block";
    popup.style.left = `${event.pageX + 10}px`;
    popup.style.top = `${event.pageY + 10}px`;

    // –ù–∞–≤–µ—à–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ø–∞–ø–∞
    const unlinkBtn = document.getElementById("unlinkGroupButton");
    const allowBtn = document.getElementById("allowEditButton");

    unlinkBtn.onclick = function () {
        unlinkGroup(itemWrapper);
        hidePopup(popup);
    };

    allowBtn.onclick = function () {
        allowEditing(itemWrapper);
        hidePopup(popup);
    };

    // –í–µ—à–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –ø–æ–ø–∞–ø–∞
    function onClickOutside(event) {
        if (!popup.contains(event.target)) {
            hidePopup(popup);
            document.removeEventListener("click", onClickOutside);
        }
    }

    // –ß—É—Ç—å –æ—Ç–ª–æ–∂–∏–º, —á—Ç–æ–±—ã –∫–ª–∏–∫ –ø–æ —Å–∞–º–æ–π –∏–∫–æ–Ω–∫–µ –Ω–µ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–ª
    setTimeout(() => {
        document.addEventListener("click", onClickOutside);
    }, 0);

}



/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –≤ –ø–æ–ø–∞–ø–µ
 */
function initPopupButtons(sentenceElement, sentenceId) {
    const editButton = document.getElementById("sentencePopupEditButton");
    const hardEditCheckbox = document.getElementById("hardEditCheckbox");
    if (!editButton) {
        console.error("–ö–Ω–æ–ø–∫–∞ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –≤ –ø–æ–ø–∞–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        return;
    }

    editButton.addEventListener("click", function () {
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        const sentenceItem = document.querySelector(`.edit-sentence__item[data-sentence-id="${sentenceId}"]`);

        if (!sentenceItem || !sentenceElement) {
            console.error(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å ID=${sentenceId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`);
            return;
        }

        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: —É–±–∏—Ä–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
        sentenceItem.setAttribute("data-sentence-is-linked", "False");
        sentenceItem.setAttribute("data-sentence-has-linked-body", "False");

        // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å "–∂–µ—Å—Ç–∫–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" –æ—Ç–º–µ—á–µ–Ω ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        if (hardEditCheckbox.checked) {
            sentenceItem.setAttribute("data-sentence-hard-edit", "True");
        }

        // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫–∏ –∑–∞–º–∫–æ–≤ –∏ –ª–∏–Ω–∫–æ–≤
        const linkedIcon = sentenceItem.querySelector(".edit-sentence__links-icon--is-linked");
        if (linkedIcon) linkedIcon.remove(); // –£–¥–∞–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å–≤—è–∑–∏

        const bodyLinkedIcon = sentenceItem.querySelector(".edit-sentence__links-icon--linked-obj");
        if (bodyLinkedIcon) bodyLinkedIcon.remove(); // –£–¥–∞–ª—è–µ–º –∏–∫–æ–Ω–∫—É body

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        makeSentenceEditable(sentenceElement);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
        const popup = document.getElementById("sentencePopup");
        hidePopup(popup);
    });
}



// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–ø–∞–ø–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
function showSentencePopup(sentenceElement, event) {
    const popup = document.getElementById("sentencePopup");

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    const sentenceId = sentenceElement.closest("li").getAttribute("data-sentence-id");
    const sentenceIndex = sentenceElement.closest("li").getAttribute("data-sentence-index");
    const sentenceComment = sentenceElement.closest("li").getAttribute("data-sentence-comment") || "None";
    const sentenceTags = sentenceElement.closest("li").getAttribute("data-sentence-tags") || "None";

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ø–∞–ø
    document.getElementById("popupSentenceId").textContent = sentenceId;
    document.getElementById("popupSentenceIndex").textContent = sentenceIndex;
    document.getElementById("popupSentenceComment").textContent = sentenceComment;
    document.getElementById("popupSentenceTags").textContent = sentenceTags;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ None, –ø—É—Å—Ç–æ–µ –∏–ª–∏ null
    document.querySelectorAll(".sentence-popup__info-item").forEach(item => {
        const value = item.querySelector("span").textContent.trim();
        if (!value || value === "None") {
            item.style.display = "none";
        } else {
            item.style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –±—ã–ª–∏ —Å–∫—Ä—ã—Ç—ã –¥–æ —ç—Ç–æ–≥–æ
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    initPopupButtons(sentenceElement, sentenceId);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
    popup.style.display = "block";

    // –ü–æ–∑–∏—Ü–∏—è –ø–æ–ø–∞–ø–∞
    const popupWidth = popup.offsetWidth;
    const popupHeight = popup.offsetHeight;
    let posX = event.pageX + 15;
    let posY = event.pageY + 15;

    if (posX + popupWidth > window.innerWidth) {
        posX -= popupWidth + 30;
    }
    if (posY + popupHeight > window.innerHeight) {
        posY -= popupHeight + 30;
    }

    popup.style.left = `${posX}px`;
    popup.style.top = `${posY}px`;
}


/** 
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
function initSentencePopupCloseHandlers() {
    const popup = document.getElementById("sentencePopup");
    const closeButton = popup.querySelector("#closeSentencePopupButton");

    if (!popup || !closeButton) {
        console.error("–ü–æ–ø–∞–ø –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
        return;
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
    closeButton.addEventListener("click", hidePopup(popup));

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ø–∞–ø–∞
    document.addEventListener("click", function (event) {
        if (popup.style.display === "block" && !popup.contains(event.target)) {
            hidePopup(popup);
        }
    });

    // ‚ùó –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    document.querySelectorAll(".edit-sentence__text").forEach(sentence => {
        sentence.addEventListener("input", function () {
            if (popup.style.display === "block") {
                hidePopup(popup);
            }
        });
    });
}



// –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function editSentence(button) {
    const hasLinkedGroup = button.closest(".control-buttons").getAttribute("data-has-linked-group");
    
    if(hasLinkedGroup === "True") {
        const audioKnock = new Audio("/static/audio/dzzz.mp3");
        const sentenceType = button.closest(".control-buttons").getAttribute("data-sentence-type");
        const groupIsLinkedIcon = sentenceType === "head" ? document.getElementById("editSentenceTitleHead").querySelector(".edit-sentence__title-span") : document.getElementById("editSentenceTitleTail").querySelector(".edit-sentence__title-span");
        createRippleAtElement(groupIsLinkedIcon);
        audioKnock.play();
        toastr.warning("–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: —Å–≤—è–∑–∞–Ω–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏");
        return;
    }
    
    const sentenceId = button.closest(".control-buttons").getAttribute("data-object-id");
    const paragraphId = button.closest(".control-buttons").getAttribute("data-related-id");
    const reportId = document.getElementById("editParagraphContainer").getAttribute("data-report-id");

    window.location.href = `/editing_report/edit_head_sentence?sentence_id=${sentenceId}&paragraph_id=${paragraphId}&report_id=${reportId}`;
    
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async function addHeadSentence(itemFromBuffer) {
    const headSentenceList = document.getElementById("editHeadSentenceList");
    const paragraphId = parseInt(headSentenceList.getAttribute("data-paragraph-id"));
    const reportId = document.getElementById("editParagraphContainer").getAttribute("data-report-id");
    const sentences = paragraphData.head_sentences;
    const sentenceIndexes = sentences.map(sentence => sentence.sentence_index);
    const maxIndex = findMaxIndex(sentenceIndexes);
    
    if (itemFromBuffer) {
        data = {
            sentence_id: itemFromBuffer.object_id,
            sentence_text: itemFromBuffer.object_text,
            sentence_type: "head",
            related_id: paragraphId,
            report_id: reportId,
            sentence_index: maxIndex + 1
        }; 
    } else {
            data = {
                related_id: paragraphId,
                report_id: reportId,
                sentence_index: maxIndex + 1,
                sentence_type: "head"
            }
    };

    try {
        const response = await sendRequest({
            url: "/editing_report/add_new_sentence",
            method: "POST",
            data: data
        });

        if (response.status === "success") {
            window.location.reload();
        } 
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async function addTailSentence(itemFromBuffer) {
    const tailSentenceList = document.getElementById("editTailSentenceList");
    const paragraphId = tailSentenceList.getAttribute("data-paragraph-id");
    const reportId = document.getElementById("editParagraphContainer").getAttribute("data-report-id");

    if (itemFromBuffer) {
        data = {
            sentence_id: itemFromBuffer.object_id,
            sentence_text: itemFromBuffer.object_text,
            sentence_type: "tail",
            related_id: paragraphId,
            report_id: reportId
        }; 
    }
    else {
        data = {
            related_id: paragraphId,
            report_id: reportId,
            sentence_type: "tail"
        };
    }


    try {
        const response = await sendRequest({
            url: "/editing_report/add_new_sentence",
            method: "POST",
            data: data
        });

        
        if (response.status === "success") {
            window.location.reload();
        } 
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
    }
}


// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async function deleteTailSentence(button) {
    const sentenceItem = button.closest(".control-buttons");
    
    if (sentenceItem.getAttribute("data-has-linked-group") === "True") {
        const audioKnock = new Audio("/static/audio/dzzz.mp3");
        const groupIsLinkedIcon = document.getElementById("editSentenceTitleTail").querySelector(".edit-sentence__title-span");
        createRippleAtElement(groupIsLinkedIcon);
        audioKnock.play();
        toastr.warning("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å: —Å–≤—è–∑–∞–Ω–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏");
        return;
    }
    
    const sentenceId = sentenceItem.getAttribute("data-object-id");
    const paragraphId = sentenceItem.getAttribute("data-related-id");

    try {
        const response = await sendRequest({
            url: "/editing_report/delete_sentence",
            method: "DELETE",
            data: { sentence_id: sentenceId,
                    related_id: paragraphId,
                    sentence_type: "tail"
                }
        });

        if (response.status === "success") {
            sentenceItem.closest(".edit-sentence__item").remove();
        } 
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async function deleteHeadSentence(button) {
    const sentenceItem = button.closest(".control-buttons");
    
    if (sentenceItem.getAttribute("data-has-linked-group") === "True") {
        const audioKnock = new Audio("/static/audio/dzzz.mp3");
        const groupIsLinkedIcon = document.getElementById("editSentenceTitleHead").querySelector(".edit-sentence__title-span");
        createRippleAtElement(groupIsLinkedIcon);
        audioKnock.play();
        toastr.warning("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å: —Å–≤—è–∑–∞–Ω–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏");
        return;
    }
    
    const confirmation = confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?");
    if (!confirmation) {
        console.log("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
        return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    }


    const sentenceId = sentenceItem.getAttribute("data-object-id");
    const paragraphId = sentenceItem.getAttribute("data-related-id");
    try {
        const response = await sendRequest({
            url: "/editing_report/delete_sentence",
            method: "DELETE",
            data: { sentence_id: sentenceId,
                    related_id: paragraphId,
                    sentence_type: "head"
                }
        });

        if (response.status === "success") {
            sentenceItem.closest(".edit-sentence__item").remove();
        } 
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
    }
}


// –í—ã–∑—ã–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ —Ç—Ä–µ–±—É—é—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function saveHeadSentencesOrder() {
    const allSentences = document.querySelectorAll(".edit-sentence__item--head");
    const sentences = Array.from(allSentences).filter(sentence => sentence.getAttribute("data-sentence-type") === "head");
    const updatedOrder = [];
    const paragraphId = document.getElementById("editParagraphContainer").getAttribute("data-paragraph-id");

    console.log("–ü–∞—Ä–∞–≥—Ä–∞—Ñ ID:", paragraphId);
    sentences.forEach((sentence, newIndex) => {
        const sentenceId = sentence.getAttribute("data-sentence-id");
        updatedOrder.push({
            sentence_id: sentenceId,
            new_index: newIndex
        });
    });
    
    sendRequest({
        url: "/editing_report/update_head_sentence_order",
        method: "POST",
        data: { updated_order: updatedOrder,
                paragraph_id: paragraphId 
            }
    }).then(response => {
        if (response.status === "success") {
            window.location.reload();
            console.log("–ü–æ—Ä—è–¥–æ–∫ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
        } else {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞:", response.message);
        }
    });
}




// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function updateSentence(sentenceElement) {
    const sentenceId = sentenceElement.closest("li").getAttribute("data-sentence-id");
    const sentenceType = sentenceElement.closest("li").getAttribute("data-sentence-type");
    const groupId = sentenceElement.closest("li").getAttribute("data-sentence-group-id"); // id –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ
    const sentenceText = sentenceElement.textContent.trim();
    const related_id = sentenceElement.closest("li").getAttribute("data-paragraph-id");
    const hardEdit = sentenceElement.closest("li").getAttribute("data-sentence-hard-edit");

    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", sentenceText);

    try {
        const response = await sendRequest({
            url: "/editing_report/update_sentence_text",
            method: "PATCH",
            data: {
                sentence_id: sentenceId,
                sentence_type: sentenceType,
                group_id: groupId,
                sentence_text: sentenceText,
                related_id: related_id,
                hard_edit: hardEdit
            }
        });

        console.log("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", response);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", error);
    }
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä
function addSentenceToBuffer(button) {
    const objectId = button.closest(".control-buttons").getAttribute("data-object-id");
    const objectType = button.closest(".control-buttons").getAttribute("data-object-type");
    const relatedId = button.closest(".control-buttons").getAttribute("data-related-id");
    const objectText = button.closest(".control-buttons").getAttribute("data-text");
    const sentenceType = button.closest(".control-buttons").getAttribute("data-sentence-type");
    const sentenceGroupId = button.closest(".control-buttons").getAttribute("data-group-id");
    const reportType = button.closest(".control-buttons").getAttribute("data-report-type");

    dataToBuffer = {
        object_id: objectId,
        object_type: objectType,
        related_id: relatedId,
        object_text: objectText,
        sentence_type: sentenceType,
        group_id: sentenceGroupId,
        report_type: reportType
    };

    addToBuffer(dataToBuffer);
    console.log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä:", dataToBuffer);

}



function deleteSubsidiaries (button) {
    const hasLinkedGroup = button.closest(".control-buttons").getAttribute("data-has-linked-group");
    console.log("–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", button.closest(".control-buttons"));
    console.log("hasLinkedGroup:", hasLinkedGroup);

    if (hasLinkedGroup === "True") {
        const audioKnock = new Audio("/static/audio/dzzz.mp3");
        const groupIsLinkedIcon = document.getElementById("editSentenceTitleHead").querySelector(".edit-sentence__title-span");
        createRippleAtElement(groupIsLinkedIcon);
        audioKnock.play();
        toastr.warning("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å: —Å–≤—è–∑–∞–Ω–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏");
        return;
    }

    const confirmation = confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã?");
    if (!confirmation) {
        console.log("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
        return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    }


    const objectId = button.closest(".control-buttons").getAttribute("data-object-id");
    const objectType = button.closest(".control-buttons").getAttribute("data-object-type");
    const relatedId = button.closest(".control-buttons").getAttribute("data-related-id");
    const sentenceType = button.closest(".control-buttons").getAttribute("data-sentence-type");
    const sentenceGroupId = button.closest(".control-buttons").getAttribute("data-group-id");

    sendRequest({
        url: `/editing_report/delete_subsidiaries`,
        method: "DELETE",
        data: { object_id: objectId, 
            object_type: objectType, 
         }
    }).then(response => {
        window.location.reload();
    }).catch(error => {
        console.error(response.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", error);
    });
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞, –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
function insertFromBuffer(index) {
    const itemFromBuffer = getFromBuffer(index);
    const bufferReportType = itemFromBuffer.report_type;
    const reportType = document.getElementById("editParagraphContainer").getAttribute("data-report-type");

    if (!itemFromBuffer) {
        console.error("–≠–ª–µ–º–µ–Ω—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    if (bufferReportType !== reportType) {
        alert("–ù–µ–ª—å–∑—è –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –¥—Ä—É–≥–æ–º—É —Ç–∏–ø—É –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–µ–ª—å–∑—è –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å —Ç–∏–ø–æ–º –ö–¢ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª —Å —Ç–∏–ø–æ–º –ú–†–¢).");
        return;
    }

    if (itemFromBuffer.object_type === "paragraph") {
        alert("–ù–µ–ª—å–∑—è –≤—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤ –¥–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏.");
        return;
    }

    if (itemFromBuffer.sentence_type === "head") {
        addHeadSentence(itemFromBuffer);
    }
    else if (itemFromBuffer.sentence_type === "tail") {
        addTailSentence(itemFromBuffer);
    } else {
        alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –¥–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏.");
    }

    
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function unlinkGroup(itemWrapper) {
    const groupId = itemWrapper.getAttribute("data-group-id");
    const sentenceType = itemWrapper.getAttribute("data-sentence-type");
    const relatedId = itemWrapper.getAttribute("data-related-id");
    

    sendRequest({
        url: "/editing_report/unlink_group",
        method: "PATCH",
        data: { group_id: groupId,
                sentence_type: sentenceType,
                related_id: relatedId
            }
    }).then(response => {
        if (response.status === "success") {
            window.location.reload();
        } else {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", response.message);
        }
    }
    ).catch(error => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", error);
    });
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Å–Ω–∏–º–∞–µ—Ç –±–ª–æ–∫ –≤—ã–∑–≤–∞–Ω–Ω—ã–π –Ω–∞–ª–∏—á–∏–µ–º —Å–≤—è–∑–µ–π —É –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
function allowEditing(itemWrapper) {
    // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
    itemWrapper.setAttribute("data-group-is-linked", "False");

    const groupType = itemWrapper.getAttribute("data-sentence-type");
    const sentenceTitleElement = itemWrapper.querySelector(".edit-sentence__title");
    sentenceTitleElement.textContent = "–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)";

    // –°–∫—Ä—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –∑–∞–º–∫–∞
    const lockIcon = itemWrapper.querySelector(".edit-sentence__title-span");
    if (lockIcon) {
        lockIcon.style.display = "none";
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º data-has-linked-group –≤–æ –≤—Å–µ—Ö .control-buttons –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    const listId = groupType === "head" ? "editHeadSentenceList" : "editTailSentenceList";
    const sentenceList = document.getElementById(listId);
    const controlButtons = sentenceList.querySelectorAll(".control-buttons");
    controlButtons.forEach(button => {
        button.setAttribute("data-has-linked-group", "False");
    });
}


// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Å–ª–æ–≤–∞–º –≤ —Ç–µ–∫—Å—Ç–µ
function filterSentencesByText() {
    const searchText = document.getElementById("sentenceSearch").value.toLowerCase().trim();
    const searchWords = searchText.split(/\s+/);  // –†–∞–∑–±–∏–≤–∞–µ–º —Å–ª–æ–≤–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    const sentences = document.querySelectorAll(".edit-sentence__item");

    sentences.forEach(item => {
        const sentenceText = item.querySelector(".edit-sentence__text").textContent.toLowerCase();
        const isMatch = searchWords.every(word => sentenceText.includes(word));
        item.style.display = isMatch ? "flex" : "none";
    });
}