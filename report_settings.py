# report_settings.py

from flask import Blueprint, render_template, request, current_app, jsonify, g
from flask_login import login_required
from models import db, ReportType, ReportSubtype
from file_processing import file_uploader
from flask_security.decorators import auth_required
from logger import logger

report_settings_bp = Blueprint('report_settings', __name__)


# Routs
# –ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@report_settings_bp.route('/report_settings', methods=['GET', 'POST'])
@auth_required()
def report_settings():
    logger.info(f"(Report_settings)--------------------------------")
    logger.info(f"(Report_settings) üöÄ –ù–∞—á–∞—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤")
    try:
        profile_types_with_subtypes = ReportType.get_types_with_subtypes(g.current_profile.id)
    except Exception as e:
        logger.error(f"(Report_settings) ‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã –∏ –ø–æ–¥—Ç–∏–ø—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ - {e}")
        return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø—ã –∏ –ø–æ–¥—Ç–∏–ø—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"}), 400
    logger.info(f"(Report_settings) ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ç–∏–ø—ã –∏ –ø–æ–¥—Ç–∏–ø—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤")
    logger.info(f"(Report_settings) ---------------------------------")
        
    return render_template('report_settings.html', 
                           title = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤",
                           types_subtypes=profile_types_with_subtypes,
                           )



@report_settings_bp.route('/add_type', methods=['POST'])
@auth_required()
def add_type():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞.
    """
    logger.info(f"(Add_new_type)--------------------------------")
    logger.info(f"(Add_new_type) üöÄ –ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞")
    
    data = request.get_json()
    new_type = data.get("new_type", "").strip()
    print(new_type)

    if not new_type:
        logger.error(f"(Add_new_type) ‚ùå –û—à–∏–±–∫–∞: –ò–º—è —Ç–∏–ø–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return jsonify({"status": "error", "message": "–ò–º—è —Ç–∏–ø–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400

    try:
        ReportType.create(type_text=new_type, profile_id=g.current_profile.id)
        logger.info(f"(Add_new_type) ‚úÖ –ù–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - '{new_type}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        return jsonify({"status": "success", "message": "–ù–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"}), 200
    except Exception as e:
        logger.error(f"(Add_new_type) ‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - {e}")
        return jsonify({"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"}), 400



@report_settings_bp.route('/delete_type', methods=['POST'])
@auth_required()
def delete_type():
    logger.info(f"(Delete_type)--------------------------------")
    logger.info(f"(Delete_type) üöÄ –ù–∞—á–∞—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞")
    data = request.get_json()
    type_id = data.get("type_id")
    print(type_id)

    if not type_id:
        return jsonify({"status": "error", "message": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω ID —Ç–∏–ø–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞."}), 400

    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ReportType.delete_by_id(type_id)
        logger.info(f"(Delete_type) ‚úÖ –¢–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        return jsonify({"status": "success", "message": "–¢–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}), 200
    except Exception as e:
        logger.error(f"(Delete_type) ‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - {e}")
        return jsonify({"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞."}), 400


@report_settings_bp.route('/edit_type', methods=['POST'])
@auth_required()
def edit_type():
    logger.info(f"(Edit_type)--------------------------------")
    logger.info(f"(Edit_type) üöÄ –ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞")
    data = request.get_json()
    type_id = data.get("type_id")
    new_type_name = data.get("new_type_name", "").strip()

    if not type_id or not new_type_name:
        logger.error(f"(Edit_type) ‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ID —Ç–∏–ø–∞ –∏ –Ω–æ–≤–æ–µ –∏–º—è —Ç–∏–ø–∞.")
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ID —Ç–∏–ø–∞ –∏ –Ω–æ–≤–æ–µ –∏–º—è —Ç–∏–ø–∞."}), 400

    try:
        # –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ –ø–æ ID –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        type_for_editing = ReportType.query.filter_by(id=type_id, profile_id=g.current_profile.id).first()

        if not type_for_editing:
            logger.error(f"(Edit_type) ‚ùå –û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞.")
            return jsonify({"status": "error", "message": "–ù–µ –Ω–∞–π–¥–µ–Ω –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–ª–∏ —É –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."}), 403

        type_for_editing.type_text = new_type_name
        type_for_editing.save()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"(Edit_type) ‚úÖ –¢–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
        logger.info(f"(Edit_type)---------------------------------")
        return jsonify({"status": "success", "message": "–¢–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"}), 200
    except Exception as e:
        logger.error(f"(Edit_type) ‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - {e}")
        return jsonify({"status": "error", "message": "Type wasn't edited."}), 400


@report_settings_bp.route('/add_subtype', methods=['POST'])
@auth_required()
def add_subtype():
    logger.info(f"(Add_new_subtype)--------------------------------")
    logger.info(f"(Add_new_subtype) üöÄ –ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞")
    data = request.get_json()
    report_type_id = data.get("report_type_id")
    new_subtype_name = data.get("new_subtype_name", "").strip()

    if not report_type_id or not new_subtype_name:
        logger.error(f"(Add_new_subtype) ‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ID —Ç–∏–ø–∞ –∏ –∏–º—è –ø–æ–¥—Ç–∏–ø–∞.")
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ID —Ç–∏–ø–∞ –∏ –∏–º—è –ø–æ–¥—Ç–∏–ø–∞."}), 400

    try:
        ReportSubtype.create(type_id=report_type_id, subtype_text=new_subtype_name)
        logger.info(f"(Add_new_subtype) ‚úÖ –ù–æ–≤—ã–π –ø–æ–¥—Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - '{new_subtype_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        logger.info(f"(Add_new_subtype)---------------------------------")
        return jsonify({"status": "success", "message": "–ù–æ–≤—ã–π –ø–æ–¥—Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"}), 200
    except Exception as e:
        logger.error(f"(Add_new_subtype) ‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥—Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - {e}")
        return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥—Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"}), 400


@report_settings_bp.route('/delete_subtype', methods=['POST'])
@auth_required()
def delete_subtype():
    logger.info(f"(Delete_subtype)--------------------------------")
    logger.info(f"(Delete_subtype) üöÄ –ù–∞—á–∞—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞")
    data = request.get_json()
    subtype_id = data.get("subtype_id")
    print(subtype_id)

    if not subtype_id:
        logger.error(f"(Delete_subtype) ‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω ID –ø–æ–¥—Ç–∏–ø–∞.")
        return jsonify({"status": "error", "message": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω ID –ø–æ–¥—Ç–∏–ø–∞"}), 400

    try:
        ReportSubtype.delete_by_id(subtype_id)
        logger.info(f"(Delete_subtype) ‚úÖ –ü–æ–¥—Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        logger.info(f"(Delete_subtype)---------------------------------")
        return jsonify({"status": "success", "message": "Subtype was deleted successfully."}), 200
    except Exception as e:
        logger.error(f"(Delete_subtype) ‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - {e}")
        return jsonify({"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"}), 400
    
    
@report_settings_bp.route('/edit_subtype', methods=['POST'])
@auth_required()
def edit_subtype():
    logger.info(f"(Edit_subtype)--------------------------------")
    logger.info(f"(Edit_subtype) üöÄ –ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞")
    data = request.get_json()
    subtype_id = data.get("subtype_id")
    new_subtype_name = data.get("new_subtype_name", "").strip()

    if not subtype_id or not new_subtype_name:
        logger.error(f"(Edit_subtype) ‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ID –ø–æ–¥—Ç–∏–ø–∞ –∏ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–¥—Ç–∏–ø–∞.")
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ID –ø–æ–¥—Ç–∏–ø–∞ –∏ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–¥—Ç–∏–ø–∞."}), 400

    try:
        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ç–∏–ø–∞ –ø–æ ID –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        subtype_for_editing = ReportSubtype.query.filter_by(id=subtype_id).first()

        if not subtype_for_editing:
            logger.error(f"(Edit_subtype) ‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –¥–∞–Ω–Ω—ã–π –ø–æ–¥—Ç–∏–ø –æ—Ç—á–µ—Ç–∞.")
            return jsonify({"status": "error", "message": "–ù–µ –Ω–∞–π–¥–µ–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–¥—Ç–∏–ø –∏–ª–∏ —É –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ç–∏–ø–∞"}), 403

        subtype_for_editing.subtype_text = new_subtype_name
        subtype_for_editing.save() 
        logger.info(f"(Edit_subtype) ‚úÖ –ü–æ–¥—Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
        logger.info(f"(Edit_subtype)---------------------------------")
        return jsonify({"status": "success", "message": "–ü–æ–¥—Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"}), 200
    except Exception as e:
        logger.error(f"(Edit_subtype) ‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - {e}")
        return jsonify({"status": "error", "message": "Subtype wasn't edited."}), 400
    
    
    
@report_settings_bp.route('/upload_template', methods=['POST'])
@auth_required()
def upload_template():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —à–∞–±–ª–æ–Ω–∞ Word —Ñ–∞–π–ª–∞.
    """
    logger.info(f"(Upload_template)--------------------------------")
    logger.info(f"(Upload_template) üöÄ –ù–∞—á–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ Word —Ñ–∞–π–ª–∞")
    
    if 'file' not in request.files:
        logger.error(f"(Upload_template) ‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∞–π–ª.")
        return jsonify({"status": "error", "message": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∞–π–ª."}), 400
    file = request.files['file']
    file_type = request.form.get('file_type')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if file_type == "template":
        file_name = "word_template"
        file_ext = "doc"
        folder_name = "word_template"
    elif file_type == "signature":
        file_name = "signatura"
        file_ext = "jpg"
        folder_name = "signatura"
    else:
        logger.error(f"(Upload_template) ‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")
        return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"}), 400
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ file_uploader –≤ –ø–∞–ø–∫—É "templates"
    upload_result, filepath = file_uploader(file, file_ext, folder_name, file_name=file_name)
    if "successfully" not in upload_result:
        logger.error(f"(Upload_template) ‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª - {upload_result}")
        return jsonify({"status": "error", "message": upload_result}), 400
    
    logger.info(f"(Upload_template) ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    logger.info(f"(Upload_template)---------------------------------")
    return jsonify({"status": "success", "message": upload_result}), 200

