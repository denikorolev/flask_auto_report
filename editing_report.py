# editing_report.py

from flask import Blueprint, render_template, request, current_app, jsonify, g
from flask_security import current_user
from models import db, Report, Paragraph, HeadSentence, BodySentence, TailSentence, HeadSentenceGroup, TailSentenceGroup, BodySentenceGroup
from utils import get_max_index, check_unique_indices, normalize_paragraph_indices
from flask_security.decorators import auth_required
from logger import logger


editing_report_bp = Blueprint('editing_report', __name__)

# Functions

# Routs

@editing_report_bp.route('/edit_report', methods=["GET"])
@auth_required()
def edit_report():
    logger.info("(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞) üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
    report_id = request.args.get("report_id")
    report = Report.query.get(report_id)
    
    if not report or report.profile_id != g.current_profile.id:
        logger.error(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞) ‚ùå –ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return jsonify({"status": "error", "message": "–ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"}), 403
    try:
        report_data = Report.get_report_info(report_id)
        report_paragraphs = Report.get_report_structure(report_id)
    except Exception as e:
        logger.error(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}")
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}"}), 500
    # –¥–µ–ª–∞—é –≤—ã–±–æ—Ä–∫—É —Ç–∏–ø–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
    paragraph_types = current_app.config["PARAGRAPH_TYPE_LIST"]


    return render_template('edit_report.html', 
                           title=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {report.report_name}", 
                           report_data=report_data,
                           report_paragraphs=report_paragraphs,
                           paragraph_types=paragraph_types
                           )



@editing_report_bp.route('/edit_paragraph', methods=["GET"])
@auth_required()
def edit_paragraph():
    logger.info("(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
    paragraph_id = int(request.args.get("paragraph_id"))
    report_id = int(request.args.get("report_id"))
   
    paragraph = Paragraph.query.get(paragraph_id)
    head_group_links = HeadSentenceGroup.is_linked(paragraph.head_sentence_group_id)
    tail_group_links = TailSentenceGroup.is_linked(paragraph.tail_sentence_group_id)
    logger.debug(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: paragraph_id = {paragraph_id}, report_id = {report_id}")
    logger.debug(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–≤—è–∑–µ–π —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏: head_group_links = {head_group_links}, tail_group_links = {tail_group_links}")
    
    if not paragraph:
        logger.error(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) ‚ùå –ü–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None  # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –Ω–µ—Ç, –≤–µ—Ä–Ω–µ–º None

    # –°–æ–±–∏—Ä–∞–µ–º head-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    # –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏—Ö –Ω–µ—Ç
    head_sentences = []
    if paragraph.head_sentence_group:
        head_sentences = HeadSentenceGroup.get_group_sentences(paragraph.head_sentence_group_id) or []
        logger.debug(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) –ü–æ–ª—É—á–µ–Ω—ã –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {head_sentences}")
        logger.info(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) –ù–∞—á–∞—Ç —Å–±–æ—Ä body-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        for sentence in head_sentences:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ body-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            if sentence["body_sentence_group_id"] is not None:  
                body_sentences = BodySentenceGroup.get_group_sentences(sentence["body_sentence_group_id"])
            else:
                body_sentences = []

            sentence["body_sentences"] = body_sentences  # –î–æ–±–∞–≤–ª—è–µ–º body-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä—å head-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        logger.info(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) –°–±–æ—Ä body-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
    # –°–æ–±–∏—Ä–∞–µ–º tail-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    logger.info(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) –ù–∞—á–∞—Ç —Å–±–æ—Ä tail-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    tail_sentences = TailSentenceGroup.get_group_sentences(paragraph.tail_sentence_group_id) or []
    logger.info(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) –°–±–æ—Ä tail-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
    paragraph_data = {
        "id": paragraph.id,
        "paragraph_index": paragraph.paragraph_index,
        "paragraph": paragraph.paragraph,
        "paragraph_visible": paragraph.paragraph_visible,
        "title_paragraph": paragraph.title_paragraph,
        "bold_paragraph": paragraph.bold_paragraph,
        "paragraph_type": paragraph.paragraph_type,
        "paragraph_comment": paragraph.comment,
        "paragraph_weight": paragraph.paragraph_weight,
        "tags": paragraph.tags,
        "head_group_links": head_group_links or False,
        "tail_group_links": tail_group_links or False,
        "head_sentences": head_sentences,
        "tail_sentences": tail_sentences
    }
    
    if not paragraph:
        logger.error(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) ‚ùå –ü–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return jsonify({"status": "error", "message": "–ü–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω."}), 403
    
    return render_template('edit_paragraph.html',
                            title=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ {paragraph_data['paragraph']}",
                            paragraph=paragraph_data,
                            report_id=report_id
                            )


@editing_report_bp.route('/edit_head_sentence', methods=["GET"])
@auth_required()
def edit_head_sentence():
    logger.info("(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
    sentence_id = request.args.get("sentence_id")
    paragraph_id = request.args.get("paragraph_id")
    report_id = request.args.get("report_id")
    sentence = HeadSentence.query.get(sentence_id)
    body_group_links = BodySentenceGroup.is_linked(sentence.body_sentence_group_id)
    
    logger.debug(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: sentence_id = {sentence_id}, paragraph_id = {paragraph_id}, report_id = {report_id}")
    
    if not sentence:
        logger.error(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) ‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return jsonify({"status": "error", "message": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404
    
    if sentence.body_sentence_group_id:
        body_sentences = BodySentenceGroup.get_group_sentences(sentence.body_sentence_group_id)
    else:
        body_sentences = []
        
    group_id = Paragraph.get_by_id(paragraph_id).head_sentence_group_id
    logger.info("(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    sentence_data = {
        "id": sentence.id,
        "index": HeadSentence.get_sentence_index_or_weight(sentence_id, group_id),
        "sentence": sentence.sentence,
        "tags": sentence.tags,
        "comment": sentence.comment,
        "body_sentence_group_id": sentence.body_sentence_group_id,
        "body_group_links": body_group_links or False,
        "body_sentences": body_sentences or []
    }
    logger.info("(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) ‚úÖ –î–∞–Ω–Ω—ã–µ head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã")
    return render_template('edit_head_sentence.html',
                           title=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {sentence_data['sentence']}",
                           head_sentence=sentence_data,
                           paragraph_id=paragraph_id,
                           report_id=report_id
                           )


@editing_report_bp.route('/update_paragraph_order', methods=["POST"])
@auth_required()
def update_paragraph_order():
    data = request.json.get("paragraphs", [])
    
    try:
        for item in data:
            paragraph = Paragraph.get_by_id(item["id"])
            if paragraph:
                paragraph.paragraph_index = item["index"]
        
        db.session.commit()
        return jsonify({"status": "success", "message": "–ü–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"}), 200

    except Exception as e:
        db.session.rollback()
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {e}"}), 500



@editing_report_bp.route("/update_head_sentence_order", methods=["POST"])
@auth_required()
def update_head_sentence_order():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ –ø–æ—Å–ª–µ –∏—Ö –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è.
    """
    data = request.json
    updated_order = data.get("updated_order")
    paragraph_id = int(data.get("paragraph_id"))
    if not updated_order or not paragraph_id:
        return jsonify({"status": "error", "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}), 400
    
    group_id = Paragraph.get_by_id(paragraph_id).head_sentence_group_id
    if not group_id:
        return jsonify({"status": "error", "message": "–ì—Ä—É–ø–ø–∞ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

    try:
        for item in updated_order:
            sentence_id = int(item["sentence_id"])
            if sentence_id:
                HeadSentence.set_sentence_index_or_weight(sentence_id, group_id, new_index = item["new_index"])

        return jsonify({"status": "success", "message": "–ü–æ—Ä—è–¥–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω"}), 200

    except Exception as e:
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"}), 500



@editing_report_bp.route('/update_report', methods=['PUT'])
@auth_required()
def update_report():

    report_id = request.form.get("report_id")
    report = Report.query.get(report_id)
    
    report_name = request.form.get("report_name")
    if not report_name:
        logger.error(f"–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
        return jsonify({"status": "error", "message": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"}), 400
    
    if not report or report.profile_id != g.current_profile.id:
        logger.error(f"–¢–∞–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return jsonify({"status": "error", "message": "–¢–∞–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 403

    try:
        report.report_name = report_name
        report.comment = request.form.get("comment")
        report.report_side = True if request.form.get("report_side") == "true" else False
        report.save()
        return jsonify({"status": "success", "message": "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}), 200
    except Exception as e:
        logger.error(f"Error updating report: {str(e)}")
        return jsonify({"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. –û—à–∏–±–∫–∞: {e}"}), 400




@editing_report_bp.route('/add_new_paragraph', methods=['POST'])
@auth_required()
def add_paragraph():
    
    report_id = request.json.get("report_id")
    report = Report.query.get(report_id)

    if not report or report.profile_id != g.current_profile.id:
        return jsonify({"status": "error", "message": "–ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é"}), 403

    try:
        paragraph_index = get_max_index(Paragraph, "report_id", report_id, Paragraph.paragraph_index)
        
        new_paragraph = Paragraph.create(
            report_id=report.id,
            paragraph_index=paragraph_index,
            paragraph="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"
        )
        return jsonify({"status": "success", 
                        "message": "–ü–∞—Ä–∞–≥—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                        "paragraph_index": paragraph_index,
                        "paragraph_id": new_paragraph.id,
                        "paragraph": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"
                        }), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {str(e)}")
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞, –∫–æ–¥ –æ—à–∏–±–∫–∏: {e}"}), 400



@editing_report_bp.route("/add_new_sentence", methods=["POST"])
@auth_required()
def add_new_sentence():
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (BodySentence) –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("(–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) üöÄ  –ù–∞—á–∞—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ  –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    data = request.get_json()
    
    sentence_data = {
            "user_id": current_user.id,
            "report_type_id": Report.get_report_type(int(data.get("report_id"))) or None,
            "sentence": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            "related_id": int(data.get("related_id")) or None,
            "sentence_index": data.get("sentence_index") or None
        }
    
    sentence_type = data.get("sentence_type")
    
    if sentence_type == "head":
        class_type = HeadSentence
    elif sentence_type == "body":
        class_type = BodySentence
    elif sentence_type == "tail":
        class_type = TailSentence
    else:
        logger.error(f"(–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        return jsonify({"status": "error", "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"}), 400
    
    logger.info(f"(–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {sentence_data}. –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    
    try:
        new_sentence, new_sentence_group = class_type.create(**sentence_data)
        logger.info(f"(–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ {sentence_type} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å id={new_sentence.id}")
        
        return jsonify({
            "status": "success",
            "id": new_sentence.id,
            "weight": class_type.get_sentence_index_or_weight(new_sentence.id, new_sentence_group.id),
            "sentence": new_sentence.sentence,
            "tags": new_sentence.tags,
            "comment": new_sentence.comment
        }), 201

    except Exception as e:
        logger.error(f"(–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}"}), 500
     

@editing_report_bp.route('/delete_paragraph', methods=["DELETE"])
@auth_required()
def delete_paragraph():
    logger.info("–õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∑–∞–ø—É—â–µ–Ω–∞ ----------------------------")
    paragraph_id = request.json.get("paragraph_id")
    paragraph = Paragraph.get_by_id(paragraph_id)
    report_id = paragraph.report_id
    head_sentence_group = paragraph.head_sentence_group
    tail_sentence_group = paragraph.tail_sentence_group

    if not paragraph or paragraph.paragraph_to_report.profile_id != g.current_profile.id:
        return jsonify({"status": "error", "message": "–ü–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é"}), 404
    
    try:
        if tail_sentence_group:
            logger.info(f"–£ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            tail_sentence_group_count = TailSentenceGroup.is_linked(tail_sentence_group.id)
            if  tail_sentence_group_count > 1:
                logger.info(f"Tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–∞–Ω—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏. –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è—é —Å–≤—è–∑—å —Å —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º")
                TailSentenceGroup.unlink_groupe(tail_sentence_group.id, paragraph_id)
                logger.info(f"–°–≤—è–∑—å —Å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                pass
            else:
                logger.info(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º. –£–¥–∞–ª—è—é –≥—Ä—É–ø–ø—É tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                TailSentenceGroup.delete_group(tail_sentence_group.id, paragraph_id)
                logger.info(f"–ì—Ä—É–ø–ø–∞ tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                pass
        if head_sentence_group:
            logger.info(f"–£ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            head_sentence_group_count = HeadSentenceGroup.is_linked(head_sentence_group.id)
            if head_sentence_group_count > 1:
                logger.info(f"Head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–∞–Ω—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏. –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è—é —Å–≤—è–∑—å —Å —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º")
                HeadSentenceGroup.unlink_groupe(head_sentence_group.id, paragraph_id)
                logger.info(f"–°–≤—è–∑—å —Å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                pass
            else:
                logger.info(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º. –£–¥–∞–ª—è—é –≥—Ä—É–ø–ø—É head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                HeadSentenceGroup.delete_group(head_sentence_group.id, paragraph_id)
                logger.info(f"–ì—Ä—É–ø–ø–∞ head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                pass
        paragraph.delete()
        logger.info(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        try:
            normalize_paragraph_indices(report_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {str(e)}")
            return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {e}"}), 500
        
            
        logger.info("–õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ----------------------------")
        return jsonify({"status": "success", "message": "–ü–∞—Ä–∞–≥—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}), 200
    except Exception as e:
        logger.error(f"Error deleting paragraph: {str(e)}")
        return jsonify({"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ. –û—à–∏–±–∫–∞: {e}"}), 400


    
@editing_report_bp.route('/delete_sentence', methods=['DELETE'])
@auth_required()
def delete_sentence():
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –æ—Ç –≥—Ä—É–ø–ø—ã."""
    data = request.get_json()
    sentence_id = data.get("sentence_id")
    sentence_type = data.get("sentence_type")
    related_id = data.get("related_id") 
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {data}")
   
    if not sentence_id or not related_id or not sentence_type:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        return jsonify({"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"}), 400
    
    group_id = 0
    if sentence_type == "body":
        group_id = HeadSentence.query.get(related_id).body_sentence_group_id
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è {sentence_type} –∏ –µ–≥–æ –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π = {group_id}")
        try:
            BodySentence.delete_sentence(sentence_id, group_id)
            return jsonify({"status": "success", "message": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"}), 200
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            return jsonify({"status": "error", "message": str(e)}), 404
    
    elif sentence_type == "tail":
        group_id = Paragraph.query.get(related_id).tail_sentence_group_id
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è {sentence_type} –∏ –µ–≥–æ –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π = {group_id}")
        try:
            TailSentence.delete_sentence(sentence_id, group_id)
            return jsonify({"status": "success", "message": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"}), 200
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            return jsonify({"status": "error", "message": str(e)}), 404
        
    elif sentence_type == "head":
        group_id = Paragraph.query.get(related_id).head_sentence_group_id
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è {sentence_type} –∏ –µ–≥–æ –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π = {group_id}")
        try:
            HeadSentence.delete_sentence(sentence_id, group_id)
            return jsonify({"status": "success", "message": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"}), 200
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            return jsonify({"status": "error", "message": str(e)}), 404
        
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {sentence_type}")
        return jsonify({"status": "error", "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"}), 400
        
        
        
        
    

    
    
    
    
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@editing_report_bp.route('/report_checkers', methods=['POST'])
@auth_required()
def report_checkers():
    data = request.get_json()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫: {data}")
    report_id = data.get("report_id")
    if not report_id:
        logger.error(f"–ù–µ —É–∫–∞–∑–∞–Ω id –æ—Ç—á–µ—Ç–∞")
        return jsonify({"status": "error", "message": "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
    paragraphs_by_type = Paragraph.get_report_paragraphs(report_id)
    try:
        check_unique_indices(paragraphs_by_type)
        return jsonify({"status": "success", "message": "–ò–Ω–¥–µ–∫—Å—ã –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã"}), 200
    except ValueError as e:
        return jsonify({"status": "error", "message": f"–í –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–∞: {str(e)}"}), 400


