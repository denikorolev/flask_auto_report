# editing_report.py

from flask import Blueprint, render_template, request, current_app, jsonify, g
from flask_security import current_user
from models import db, Report, Paragraph, HeadSentence, BodySentence, TailSentence, HeadSentenceGroup, TailSentenceGroup, BodySentenceGroup
from utils import get_max_index, check_unique_indices, normalize_paragraph_indices
from flask_security.decorators import auth_required
from logger import logger


editing_report_bp = Blueprint('editing_report', __name__)

# Functions

# Routs

@editing_report_bp.route('/edit_report', methods=["GET"])
@auth_required()
def edit_report():
    logger.info("(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ /edit_report) üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
    report_id = request.args.get("report_id")
    report = Report.query.get(report_id)
    
    if not report or report.profile_id != g.current_profile.id:
        logger.error(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ /edit_report) ‚ùå –ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return jsonify({"status": "error", "message": "–ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"}), 403
    try:
        report_data = Report.get_report_info(report_id)
        report_paragraphs = Report.get_report_paragraphs(report_id)
        logger.info(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ /edit_report) ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞.")
    except Exception as e:
        logger.error(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ /edit_report) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}")
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}"}), 500
    # –¥–µ–ª–∞—é –≤—ã–±–æ—Ä–∫—É —Ç–∏–ø–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤


    return render_template('edit_report.html', 
                           title=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {report.report_name}", 
                           report_data=report_data,
                           report_paragraphs=report_paragraphs,
                           )



@editing_report_bp.route('/edit_paragraph', methods=["GET"])
@auth_required()
def edit_paragraph():
    logger.info("(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ /edit_paragraph) üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
    paragraph_id = int(request.args.get("paragraph_id"))
    report_id = int(request.args.get("report_id"))
   
    paragraph_data = Paragraph.get_paragraph_data(paragraph_id)
    logger.info(f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ /edit_paragraph) –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞. –§–æ—Ä–º–∏—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
    
    return render_template('edit_paragraph.html',
                            title=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ {paragraph_data['paragraph']}",
                            paragraph=paragraph_data,
                            report_id=report_id
                            )


@editing_report_bp.route('/edit_head_sentence', methods=["GET"])
@auth_required()
def edit_head_sentence():
    logger.info("(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
    
    sentence_id = request.args.get("sentence_id")
    paragraph_id = request.args.get("paragraph_id")
    report_id = request.args.get("report_id")
    
    group_id = Paragraph.get_by_id(paragraph_id).head_sentence_group_id
    if not group_id:
        logger.error("(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) ‚ùå –ì—Ä—É–ø–ø–∞ head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return jsonify({"status": "error", "message": "–ì—Ä—É–ø–ø–∞ head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404
    
    sentence_data = HeadSentence.get_sentence_data(sentence_id, group_id)
    logger.info("(–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) ‚úÖ –î–∞–Ω–Ω—ã–µ head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã")
    
    return render_template('edit_head_sentence.html',
                           title=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {sentence_data['sentence']}",
                           head_sentence=sentence_data,
                           paragraph_id=paragraph_id,
                           report_id=report_id
                           )


@editing_report_bp.route('/update_paragraph_order', methods=["POST"])
@auth_required()
def update_paragraph_order():
    data = request.json.get("paragraphs", [])
    
    try:
        for item in data:
            paragraph = Paragraph.get_by_id(item["id"])
            if paragraph:
                paragraph.paragraph_index = item["index"]
        
        db.session.commit()
        return jsonify({"status": "success", "message": "–ü–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"}), 200

    except Exception as e:
        db.session.rollback()
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {e}"}), 500



@editing_report_bp.route("/update_head_sentence_order", methods=["POST"])
@auth_required()
def update_head_sentence_order():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ –ø–æ—Å–ª–µ –∏—Ö –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è.
    """
    data = request.json
    updated_order = data.get("updated_order")
    paragraph_id = int(data.get("paragraph_id"))
    if not updated_order or not paragraph_id:
        return jsonify({"status": "error", "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}), 400
    
    group_id = Paragraph.get_by_id(paragraph_id).head_sentence_group_id
    if not group_id:
        return jsonify({"status": "error", "message": "–ì—Ä—É–ø–ø–∞ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

    try:
        for item in updated_order:
            sentence_id = int(item["sentence_id"])
            if sentence_id:
                HeadSentence.set_sentence_index_or_weight(sentence_id, group_id, new_index = item["new_index"])

        return jsonify({"status": "success", "message": "–ü–æ—Ä—è–¥–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω"}), 200

    except Exception as e:
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"}), 500



@editing_report_bp.route('/update_report', methods=["PATCH"])
@auth_required()
def update_report():
    logger.info("(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞) üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
    data = request.json
    report_id = data.get("report_id")
    report = Report.query.get(report_id)
    
    if not report or report.profile_id != g.current_profile.id:
        logger.error(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞) ‚ùå –ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é")
        return jsonify({"status": "error", "message": "–ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é"}), 403
    
    new_report_data = {
        "report_name": data.get("report_name"),
        "comment": data.get("report_comment"),
        "report_side": data.get("report_side") == "True"
    }
    logger.info(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞) –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {new_report_data}")

    try:
        report.update(**new_report_data)
        logger.info(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞) ‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return jsonify({"status": "success", "message": "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}), 200
    except Exception as e:
        logger.error(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}")
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}"}), 500
        


@editing_report_bp.route('/update_paragraph_text', methods=["PATCH"])
@auth_required()
def update_paragraph_text():
    logger.info("(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞")
    data = request.json
    paragraph_id = data.get("paragraph_id")
    paragraph = Paragraph.query.get(paragraph_id)
    
    if not paragraph or paragraph.paragraph_to_report.profile_id != g.current_profile.id:
        logger.error(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) ‚ùå –ü–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é")
        return jsonify({"status": "error", "message": "–ü–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é"}), 403
    
    new_paragraph_text = data.get("paragraph_text")
    logger.info(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {new_paragraph_text}")
    
    try:
        paragraph.update(paragraph=new_paragraph_text)
        logger.info(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) ‚úÖ –¢–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return jsonify({"status": "success", "message": "–¢–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"}), 200
    except Exception as e:
        logger.error(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {str(e)}")
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {str(e)}"}), 500


@editing_report_bp.route('/update_paragraph_flags', methods=["PATCH"])
@auth_required()
def update_paragraph_flags():
    logger.info("(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) ------------------------------------------------")
    logger.info("(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –ø–æ–ª—É—á–µ–Ω")
    
    data = request.json
    paragraph_id = data.pop("paragraph_id", None)
    if not paragraph_id:
        logger.error("(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞")
        return jsonify({"status": "error", "message": "–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é
    paragraph = Paragraph.query.get(paragraph_id)
    if not paragraph or paragraph.paragraph_to_report.profile_id != g.current_profile.id:
        logger.error("(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) ‚ùå –ü–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–æ—Ñ–∏–ª—é")
        return jsonify({"status": "error", "message": "–ü–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é"}), 403
    
    logger.info(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ ID= {paragraph_id}. –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤")
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        paragraph.update(**data)

        db.session.commit()
        logger.info(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) ‚úÖ –§–ª–∞–≥–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ ID {paragraph_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        logger.info(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) ------------------------------------------------------")

        return jsonify({"status": "success", "message": "–§–ª–∞–≥–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}), 200

    except Exception as e:
        logger.error(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
        db.session.rollback()
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–ª–∞–≥–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {str(e)}"}), 500



@editing_report_bp.route('/update_sentence_text', methods=["PATCH"])
@auth_required()
def update_sentence_text():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç head, body –∏–ª–∏ tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è /update_sentence_text) üöÄ –ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    data = request.json
    sentence_id = data.get("sentence_id")
    sentence_text = data.get("sentence_text")
    sentence_type = data.get("sentence_type")
    group_id = data.get("group_id")
    related_id = data.get("related_id")
    hard_edit = data.get("hard_edit") == "True"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if sentence_type not in ["head", "body", "tail"]:
        logger.error("(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è /update_sentence_text) ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        return jsonify({"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."}), 400

    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ —Ç–∏–ø—É
    sentence_class = {"head": HeadSentence, "body": BodySentence, "tail": TailSentence}.get(sentence_type)
    logger.info(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è /update_sentence_text)(—Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {sentence_class}) –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {data}")
    try:
        sentence_class.edit_sentence(sentence_id=sentence_id,
                                     group_id=group_id,
                                     related_id=related_id,
                                     new_text=sentence_text,
                                     hard_edit=hard_edit
                                     )
        logger.info(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è /update_sentence_text) ‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return jsonify({"status": "success", "message": "–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω."}), 200
    except Exception as e:
        logger.error(f"(–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è /update_sentence_text) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}"}), 500




@editing_report_bp.route('/add_new_paragraph', methods=['POST'])
@auth_required()
def add_paragraph():
    
    report_id = request.json.get("report_id")
    report = Report.query.get(report_id)

    if not report or report.profile_id != g.current_profile.id:
        return jsonify({"status": "error", "message": "–ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é"}), 403

    try:
        paragraph_index = get_max_index(Paragraph, "report_id", report_id, Paragraph.paragraph_index)
        
        new_paragraph = Paragraph.create(
            report_id=report.id,
            paragraph_index=paragraph_index,
            paragraph="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"
        )
        return jsonify({"status": "success", 
                        "message": "–ü–∞—Ä–∞–≥—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                        "paragraph_index": paragraph_index,
                        "paragraph_id": new_paragraph.id,
                        "paragraph": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"
                        }), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {str(e)}")
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞, –∫–æ–¥ –æ—à–∏–±–∫–∏: {e}"}), 400



@editing_report_bp.route("/add_new_sentence", methods=["POST"])
@auth_required()
def add_new_sentence():
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (BodySentence) –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("(–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) üöÄ  –ù–∞—á–∞—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ  –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    data = request.get_json()
    
    sentence_data = {
            "user_id": current_user.id,
            "report_type_id": Report.get_report_type(int(data.get("report_id"))) or None,
            "sentence": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            "related_id": int(data.get("related_id")) or None,
            "sentence_index": data.get("sentence_index") or None
        }
    
    sentence_type = data.get("sentence_type")
    
    if sentence_type == "head":
        class_type = HeadSentence
    elif sentence_type == "body":
        class_type = BodySentence
    elif sentence_type == "tail":
        class_type = TailSentence
    else:
        logger.error(f"(–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        return jsonify({"status": "error", "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"}), 400
    
    logger.info(f"(–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {sentence_data}. –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    
    try:
        new_sentence, new_sentence_group = class_type.create(**sentence_data)
        logger.info(f"(–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ {sentence_type} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å id={new_sentence.id}")
        
        return jsonify({
            "status": "success",
            "id": new_sentence.id,
            "weight": class_type.get_sentence_index_or_weight(new_sentence.id, new_sentence_group.id),
            "sentence": new_sentence.sentence,
            "tags": new_sentence.tags,
            "comment": new_sentence.comment
        }), 201

    except Exception as e:
        logger.error(f"(–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}"}), 500
     

@editing_report_bp.route('/delete_paragraph', methods=["DELETE"])
@auth_required()
def delete_paragraph():
    logger.info("–õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∑–∞–ø—É—â–µ–Ω–∞ ----------------------------")
    paragraph_id = request.json.get("paragraph_id")
    paragraph = Paragraph.get_by_id(paragraph_id)
    report_id = paragraph.report_id
    head_sentence_group = paragraph.head_sentence_group
    tail_sentence_group = paragraph.tail_sentence_group

    if not paragraph or paragraph.paragraph_to_report.profile_id != g.current_profile.id:
        return jsonify({"status": "error", "message": "–ü–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é"}), 404
    
    try:
        if tail_sentence_group:
            logger.info(f"–£ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            tail_sentence_group_count = TailSentenceGroup.is_linked(tail_sentence_group.id)
            if  tail_sentence_group_count > 1:
                logger.info(f"Tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–∞–Ω—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏. –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è—é —Å–≤—è–∑—å —Å —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º")
                TailSentenceGroup.unlink_groupe(tail_sentence_group.id, paragraph_id)
                logger.info(f"–°–≤—è–∑—å —Å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                pass
            else:
                logger.info(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º. –£–¥–∞–ª—è—é –≥—Ä—É–ø–ø—É tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                TailSentenceGroup.delete_group(tail_sentence_group.id, paragraph_id)
                logger.info(f"–ì—Ä—É–ø–ø–∞ tail –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                pass
        if head_sentence_group:
            logger.info(f"–£ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            head_sentence_group_count = HeadSentenceGroup.is_linked(head_sentence_group.id)
            if head_sentence_group_count > 1:
                logger.info(f"Head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–∞–Ω—ã —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏. –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è—é —Å–≤—è–∑—å —Å —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º")
                HeadSentenceGroup.unlink_groupe(head_sentence_group.id, paragraph_id)
                logger.info(f"–°–≤—è–∑—å —Å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                pass
            else:
                logger.info(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º. –£–¥–∞–ª—è—é –≥—Ä—É–ø–ø—É head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                HeadSentenceGroup.delete_group(head_sentence_group.id, paragraph_id)
                logger.info(f"–ì—Ä—É–ø–ø–∞ head –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                pass
        paragraph.delete()
        logger.info(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        try:
            normalize_paragraph_indices(report_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {str(e)}")
            return jsonify({"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {e}"}), 500
        
            
        logger.info("–õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ----------------------------")
        return jsonify({"status": "success", "message": "–ü–∞—Ä–∞–≥—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}), 200
    except Exception as e:
        logger.error(f"Error deleting paragraph: {str(e)}")
        return jsonify({"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ. –û—à–∏–±–∫–∞: {e}"}), 400


    
@editing_report_bp.route('/delete_sentence', methods=['DELETE'])
@auth_required()
def delete_sentence():
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –æ—Ç –≥—Ä—É–ø–ø—ã."""
    data = request.get_json()
    sentence_id = data.get("sentence_id")
    sentence_type = data.get("sentence_type")
    related_id = data.get("related_id") 
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {data}")
   
    if not sentence_id or not related_id or not sentence_type:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        return jsonify({"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"}), 400
    
    group_id = 0
    if sentence_type == "body":
        group_id = HeadSentence.query.get(related_id).body_sentence_group_id
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è {sentence_type} –∏ –µ–≥–æ –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π = {group_id}")
        try:
            BodySentence.delete_sentence(sentence_id, group_id)
            return jsonify({"status": "success", "message": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"}), 200
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            return jsonify({"status": "error", "message": str(e)}), 404
    
    elif sentence_type == "tail":
        group_id = Paragraph.query.get(related_id).tail_sentence_group_id
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è {sentence_type} –∏ –µ–≥–æ –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π = {group_id}")
        try:
            TailSentence.delete_sentence(sentence_id, group_id)
            return jsonify({"status": "success", "message": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"}), 200
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            return jsonify({"status": "error", "message": str(e)}), 404
        
    elif sentence_type == "head":
        group_id = Paragraph.query.get(related_id).head_sentence_group_id
        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è {sentence_type} –∏ –µ–≥–æ –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π = {group_id}")
        try:
            HeadSentence.delete_sentence(sentence_id, group_id)
            return jsonify({"status": "success", "message": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"}), 200
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            return jsonify({"status": "error", "message": str(e)}), 404
        
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {sentence_type}")
        return jsonify({"status": "error", "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"}), 400
        
        
        
        
    

    
    
    
    
# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@editing_report_bp.route('/report_checkers', methods=['POST'])
@auth_required()
def report_checkers():
    data = request.get_json()
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫: {data}")
    report_id = data.get("report_id")
    if not report_id:
        logger.error(f"–ù–µ —É–∫–∞–∑–∞–Ω id –æ—Ç—á–µ—Ç–∞")
        return jsonify({"status": "error", "message": "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
    paragraphs_by_type = Report.get_report_paragraphs(report_id)
    try:
        check_unique_indices(paragraphs_by_type)
        return jsonify({"status": "success", "message": "–ò–Ω–¥–µ–∫—Å—ã –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã"}), 200
    except ValueError as e:
        return jsonify({"status": "error", "message": f"–í –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–∞: {str(e)}"}), 400


