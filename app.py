# app.py

from flask import Flask, redirect, url_for, render_template, request, session, g
from flask_security import logout_user, current_user
import logging
from datetime import datetime
from config import get_config
from flask_migrate import Migrate
from models import db, User, UserProfile, Role
from menu_constructor import build_menu
from profile_constructor import ProfileSettingsManager
from db_processing import sync_all_profiles_settings
from utils.mail_helpers import send_email_via_zeptomail
from werkzeug.middleware.proxy_fix import ProxyFix
from logger import logger
import os
from file_processing import prepare_impression_snippets
from utils.mail_helpers import CustomMailUtil, ExtendedRegisterForm
from flask_wtf.csrf import CSRFProtect
from flask_security import Security, SQLAlchemyUserDatastore
from flask_security.decorators import auth_required, roles_required
from flask_security.signals import user_registered

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é –±–ª—é–ø—Ä–∏–Ω—Ç—ã
from working_with_reports import working_with_reports_bp  
from my_reports import my_reports_bp 
from report_settings import report_settings_bp  
from new_report_creation import new_report_creation_bp
from editing_report import editing_report_bp
from profile_settings import profile_settings_bp
from openai_api import openai_api_bp
from key_words import key_words_bp
from admin import admin_bp

version = "0.9.6.4"

app = Flask(__name__)
app.config.from_object(get_config()) # Load configuration from file config.py

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.init_app(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
migrate = Migrate(app, db)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é Flask-security-too
user_datastore = SQLAlchemyUserDatastore(db, User, Role)
security = Security(app, user_datastore, mail_util_cls=CustomMailUtil, register_form=ExtendedRegisterForm)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSRF-–∑–∞—â–∏—Ç—ã
csrf = CSRFProtect(app)
csrf.init_app(app) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSRF-–∑–∞—â–∏—Ç—ã


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ user_registered –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ 'user'
@user_registered.connect_via(app)
def assign_default_role(sender, user, **extra):
    """–ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å 'user' –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    default_role = Role.query.filter_by(name="user").first()
    if default_role:
        user.roles.append(default_role)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å
    db.session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    # send_welcome_email(user)
    # –í—Ä–µ–º–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —Å—Å—ã–ª–∫–∏ –≤ –ª–æ–≥
    # from flask_security.utils import generate_confirmation_token
    # token = generate_confirmation_token(user)
    # confirm_url = url_for('security.confirm_email', token=token, _external=True)
    # logger.warning(f"üì¨ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Å—Å—ã–ª–∫–∞: {confirm_url}")

# Register Blueprints
app.register_blueprint(working_with_reports_bp, url_prefix="/working_with_reports")
app.register_blueprint(my_reports_bp, url_prefix="/my_reports")
app.register_blueprint(report_settings_bp, url_prefix="/report_settings")
app.register_blueprint(editing_report_bp, url_prefix="/editing_report")
app.register_blueprint(new_report_creation_bp, url_prefix="/new_report_creation")
app.register_blueprint(profile_settings_bp, url_prefix="/profile_settings")
app.register_blueprint(openai_api_bp, url_prefix="/openai_api")
app.register_blueprint(key_words_bp, url_prefix="/key_words")
app.register_blueprint(admin_bp, url_prefix="/admin")


# –î–æ–±–∞–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã

# –î–æ–±–∞–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –º–µ–Ω—é
@app.context_processor
def inject_menu():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç Jinja."""
    excluded_endpoints = {"error", "security.login", "security.logout", "index"}
    if request.endpoint in excluded_endpoints:
        return {}
    return {"menu": build_menu()}

# –î–æ–±–∞–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@app.context_processor
def inject_user_settings():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç Jinja."""
    excluded_endpoints = {"error", "security.login", "security.logout", "custom_logout", "index", "profile_settings.create_profile"}
    if request.endpoint in excluded_endpoints:
        return {}
    
    user_settings = app.config.get("PROFILE_SETTINGS", {})

    if not user_settings:
        user_settings = ProfileSettingsManager.load_profile_settings()
        
    return {"user_settings": user_settings}

# –î–æ–±–∞–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.context_processor
def inject_app_info():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç Jinja."""
    app_info = {"version": version, "author": "radiologary ltd"}
    return {"app_info": app_info}

# –î–æ–±–∞–≤–ª—è—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
# —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –ø–æ—Ç–æ–º –±—É–¥—É —Ç–∞–∫ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å 
# –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —á–∞—Å—Ç—è–º —Å—Ç—Ä–∞–Ω–∏—Ü
@app.context_processor
def inject_user_rank():
    if not current_user.is_authenticated:
        return {"user_max_rank": 0}
    user_max_rank = current_user.get_max_rank()
    if not user_max_rank:
        user_max_rank = 0   
    return {"user_max_rank": user_max_rank}


@app.context_processor
def inject_current_profile_data():
    if request.path.startswith('/static/') or not current_user.is_authenticated:
        return {"profiles": None}

    user_profiles = UserProfile.get_user_profiles(current_user.id)
    if not user_profiles:
        return {"profiles": None}
    
    profiles = []
    
    for profile in user_profiles:
        profile_dict = {
            "id": profile.id,
            "profile_name": profile.profile_name,
            "description": profile.description,
            "is_default": profile.default_profile,
            "is_active": True if (getattr(g, "current_profile", None) and profile.id == g.current_profile.id) else False
        }
        profiles.append(profile_dict)
    return {"profiles": profiles}


# –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@app.before_request
def load_current_profile():
    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ—Ñ–∏–ª—è
    if request.path.startswith('/static/') or request.endpoint in [
        "security.login", "security.logout", "security.register", "custom_logout",
        "security.forgot_password", "security.reset_password", 
        "security.change_password","profile_settings.new_profile_creation", 
        "error", "index", "profile_settings.create_profile", "profile_settings.set_default_profile", "feedback_form"
    ]:
        return None
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —É–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ g –∏ —Å–µ—Å—Å–∏–∏    
    if not current_user.is_authenticated:
        g.current_profile = None
        session.pop("profile_id", None)
        logger.info("User is not authenticated")
        return
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ g, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if hasattr(g, "current_profile") and g.current_profile:
        logger.info("Profile is already set in g")
        return
    
    profile_id = session.get("profile_id")
    
    if profile_id:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±–∞–∑—ã —Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤–∏—Å–∏—Ç 
        # –≤ —Å–µ—Å—Å–∏–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ g
        profile = UserProfile.find_by_id_and_user(profile_id, current_user.id)
        if profile:
            g.current_profile = profile
            return
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∏–ª–∏ –Ω–µ 
            # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ 
            # —Å–µ—Å—Å–∏–∏ –∏ –∏–¥–µ–º –Ω–∏–∂–µ –∏ –∏—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print("Profile not found in db or doesn't belong to current user")
            session.pop("profile_id", None)
    
    profile = UserProfile.get_default_profile(current_user.id)
    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –Ω–∏ –≤ —Å–µ—Å—Å–∏–∏ –Ω–∏ –≤ g —Ç–æ –≤—ã—è—Å–Ω—è–µ–º –µ—Å–ª–∏ –ª–∏ –≤–æ–æ–±—â–µ 
    # —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–∏–ª–∏, —Å–∫–æ–ª—å–∫–æ –∏—Ö –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ 
    # –æ—Ç —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º
    if not profile:
        logger.info("User has no profiles")
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –æ—Ç–ø—Ä–∞–ª—è–µ–º –µ–≥–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        return redirect(url_for("profile_settings.new_profile_creation"))
    else:
        logger.info(f"User has default profile {profile.profile_name}")
        session["profile_id"] = profile.id
        g.current_profile = profile
        ProfileSettingsManager.load_profile_settings()
        return redirect(url_for("working_with_reports.choosing_report"))
    


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏
@app.before_request
def one_time_sync_tasks():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –≤ —Å–µ—Å—Å–∏—é:
    - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π.
    - (–í –±—É–¥—É—â–µ–º) –¥—Ä—É–≥–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
            
    if not current_user.is_authenticated:
        return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ—à–µ–ª ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    if not session.get("synced"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        
        logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π")
        sync_all_profiles_settings(current_user.id)
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è
            session["lang"] = app.config.get("PROFILE_SETTINGS", {}).get("APP_LANGUAGE", "ru")
            print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: {session['lang']}")
        except Exception as e: 
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —è–∑—ã–∫–∞: {e}")
        try:
            # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ (—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö + –∑–∞–≥—Ä—É–∑–∫–∞ –≤ OpenAI)
            prepare_impression_snippets(g.current_profile.id)
            logger.info(f"üìÇ Impression snippets —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {g.current_profile.id}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ impression snippets: {e}")
        logger.debug("Synced profile settings")
        session["synced"] = True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞


# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.route("/", methods=['POST', 'GET'])
def index():
    return render_template("index.html", title="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                           

@app.route("/custom_logout", methods=["POST", "GET"])
def custom_logout():
    print("inside logout route")
    session.clear()
    print("session cleared")
    logout_user()
    print("user logged out")
    return redirect(url_for("index"))



@app.route("/error", methods=["POST", "GET"])
def error():
    print("inside error route")
    message = request.args.get("message") or "no message"
    return render_template("error.html",
                           message=message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(Exception)
def handle_exception(e):
    app.logger.error(f"Errorhandler: {str(e)}")
    return f"Internal Server Error {str(e)}", 500


# –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
@app.teardown_appcontext 
def close_db(error):
    db.session.remove()



# Playgroung

@app.route("/playground", methods=["GET", "POST"])
@auth_required()
@roles_required("superadmin")
def playground():
    logger.info("Playground route accessed")
    if request.method == "POST":
        logger.info("Playground POST request received")
       
    
    return render_template(
        "playground.html",
        title="Playground"
    )
    
@app.route("/feedback_form", methods=["POST"])
def feedback_form():
    form_data = request.form
    logger.info(f"Feedback form submitted: {form_data}")
    to_email = "support@radiologary.com"
    subject = f"–ü–∏—Å—å–º–æ —Å —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç {form_data.get('name', 'Unknown')}"
    html_content = f"{form_data.get('message', 'No message provided')}"
    token = app.config.get("ZEPTOMAIL_API_TOKEN")
    from_email = "feedbackform_sender@radiologary.com"
    if not token:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ZEPTOMAIL_API_TOKEN")
        return render_template("error.html", message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    try:
        send_email_via_zeptomail(to_email, subject, html_content, token, from_email)
        logger.info(f"üìß Feedback form submitted successfully: {form_data}")
        return render_template("feedback_form.html", title="Feedback Form")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")
        return render_template("error.html", message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    




# –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–≥–∏


if os.getenv("FLASK_ENV") == "local":
    from flask_debugtoolbar import DebugToolbarExtension
    class StaticFilter(logging.Filter):
        """–§–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /static/."""
        def filter(self, record):
            return not record.getMessage().startswith("GET /static/")

    class DebugToolbarFilter(logging.Filter):
        """–§–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /_debug_toolbar/static/."""
        def filter(self, record):
            return not record.getMessage().startswith("GET /_debug_toolbar/static/")

    class RemoveHeadersFilter(logging.Filter):
        """–§–∏–ª—å—Ç—Ä –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –ª–æ–≥–æ–≤."""
        def filter(self, record):
            return not record.getMessage().startswith("Headers:")
        
    
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –ª–æ–≥–≥–µ—Ä—É Flask
    app.logger.addFilter(StaticFilter())
    app.logger.addFilter(DebugToolbarFilter())
    app.logger.addFilter(RemoveHeadersFilter())
   

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –ª–æ–≥–≥–µ—Ä—É Werkzeug
    werkzeug_logger = logging.getLogger("werkzeug")
    
    werkzeug_logger.addFilter(StaticFilter())
    werkzeug_logger.addFilter(DebugToolbarFilter())
    werkzeug_logger.addFilter(RemoveHeadersFilter())





if __name__ == "__main__":
    # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞), –∑–∞–ø—É—Å–∫–∞–µ–º Flask –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
    if os.getenv("FLASK_ENV") == "local":
        app.debug = True
        app.config['DEBUG_TB_INTERCEPT_REDIRECTS'] = False
        toolbar = DebugToolbarExtension(app)
        app.run(debug=True, port=int(os.getenv("PORT", 5001)))
        
        

