"""new field report_type_id added in Sentence

Revision ID: d439cac13439
Revises: 10547b73ac57
Create Date: 2025-02-22 18:40:35.597720

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm import Session

# revision identifiers, used by Alembic.
revision = 'd439cac13439'
down_revision = '10547b73ac57'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('paragraph_links', schema=None) as batch_op:
        batch_op.drop_index('ix_paragraph_links_paragraphs')

    op.drop_table('paragraph_links')

    with op.batch_alter_table('report_paragraphs', schema=None) as batch_op:
        batch_op.alter_column('paragraph_type',
               existing_type=postgresql.ENUM('text', 'custom', 'impression', 'clincontext', 'scanparam', 'dinamics', 'scanlimits', 'title', name='paragraph_type_enum'),
               nullable=True,
               existing_server_default=sa.text("'text'::paragraph_type_enum"))

    with op.batch_alter_table('sentences', schema=None) as batch_op:
        batch_op.add_column(sa.Column('report_type_id', sa.SmallInteger(), nullable=True))

    # ### Обновление данных в таблице sentences ###
    bind = op.get_bind()
    session = Session(bind=bind)

    update_sql = sa.text("""
        UPDATE sentences s
        SET report_type_id = rt.id
        FROM report_paragraphs p
        JOIN reports r ON p.report_id = r.id
        JOIN report_subtype rs ON r.report_subtype = rs.id
        JOIN report_type rt ON rs.type_id = rt.id
        WHERE s.paragraph_id = p.id;
    """)

    session.execute(update_sql)
    session.commit()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('sentences', schema=None) as batch_op:
        batch_op.drop_column('report_type_id')

    with op.batch_alter_table('report_paragraphs', schema=None) as batch_op:
        batch_op.alter_column('paragraph_type',
               existing_type=postgresql.ENUM('text', 'custom', 'impression', 'clincontext', 'scanparam', 'dinamics', 'scanlimits', 'title', name='paragraph_type_enum'),
               nullable=False,
               existing_server_default=sa.text("'text'::paragraph_type_enum"))

    op.create_table('paragraph_links',
    sa.Column('paragraph_id_1', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('paragraph_id_2', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('link_type', postgresql.ENUM('equivalent', 'expanding', 'excluding', 'additional', name='paragraph_link_type'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['paragraph_id_1'], ['report_paragraphs.id'], name='paragraph_links_paragraph_id_1_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['paragraph_id_2'], ['report_paragraphs.id'], name='paragraph_links_paragraph_id_2_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('paragraph_id_1', 'paragraph_id_2', name='paragraph_links_pkey')
    )
    with op.batch_alter_table('paragraph_links', schema=None) as batch_op:
        batch_op.create_index('ix_paragraph_links_paragraphs', ['paragraph_id_1', 'paragraph_id_2'], unique=False)

    # ### end Alembic commands ###